" VIM CONFIGURATION FILE

" Initial settings {{{1
if v:version < 600 | finish | endif

" DEBUG (when necessary) 
"set verbose=4
"set verbosefile=~/tmp/vim_debug.log

if $VIM_BARE
    set noloadplugins
    finish
endif

" Every vimrc file should set vim to nocompatible mode 
" Let's move to 80s. The future is now!
set nocompatible

" Toggle paste status
set pastetoggle=<F2>

" Disable netrw
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1

" Filetype handling
" Enables filetype handling
filetype on
" Loads the filetype indentation at $VIMRUNTIME/indent
filetype indent on
" Loads the file im $VIMRUNTIME/ftplugin/filetype.vim
filetype plugin on
" }}}1

" Plug-in load and settings {{{1
" To install plugins call
" :PlugInstall
call plug#begin('~/.vim/plugged')
    Plug 'airblade/vim-gitgutter'
    Plug 'christoomey/vim-tmux-navigator'
    Plug 'igormorgado/vim-hints'
    Plug 'jpalardy/vim-slime'
    Plug 'justinmk/vim-dirvish'
    Plug 'knubie/vim-kitty-navigator'
    Plug 'kristijanhusak/vim-dirvish-git'
    Plug 'kshenoy/vim-signature'
    Plug 'morhetz/gruvbox'
    " Needs golang
    Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
    Plug 'tpope/vim-eunuch'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-markdown'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-unimpaired'
    Plug 'ludovicchabant/vim-gutentags'
    " Need cscope
    Plug 'skywind3000/gutentags_plus'
    " Need ccglue
    Plug 'hari-rangarajan/CCTree'
    Plug 'majutsushi/tagbar'
    Plug 'igormorgado/valgrind.vim'

    " Python
    "Plug 'davidhalter/jedi-vim'
    "Plug 'tmhedberg/SimpylFold'
    "Plug 'nvie/vim-flake8'
    " Latex
    "Plug 'inkarkat/vim-ingo-library'
    "Plug 'inkarkat/vim-SpellCheck'
    " Meson
    "Plug 'igankevich/mesonic'
    " XML
    "Plug 'othree/xml.vim'
    "Plug 'chrisbra/vim-xml-runtime'
call plug#end()

" }}}1

" Vim special files {{{1
set backup
set backupdir=~/.tmp/vim,~/tmp/vim,/tmp/$USER/vim
set swapfile
set directory=~/.tmp/vim,~/tmp/vim,/tmp/$USER/vim
set undofile
set undodir=~/.tmp/vim,~/tmp/vim,/tmp/$USER/vim
set writebackup
set viminfo^=%
set tags=.tags;tags;$HOME
" }}}1

" Other many settings (TO ORGANIZE) {{{1
set encoding=utf-8
set fileformat=unix
set signcolumn=yes
 
set tabstop=8
set shiftwidth=8
set softtabstop=8
set noexpandtab
set shiftround

set nowrap
 
" Do not break words when wrapping (if wrapping)
set linebreak
 
" Make wrap breaks more readeable
set showbreak=↪\
set textwidth=80
set colorcolumn=80
 
set scrolloff=8
set sidescroll=8
 
set modeline
set cursorline
set cursorcolumn
set conceallevel=0
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨

set undolevels=1000
set virtualedit=block
set smartcase
set hlsearch
set incsearch
set ignorecase
set mouse=
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.bak
set wildignore+=*.o,*~,*.pyc,*.obj
set wildignore+=tags,cscope.out,.tags,cctree.out
set wildignore+=*.exe,a.out
set wildignorecase
set path=.,,
set splitbelow
set splitright
set showtabline=1

" Buffer numbering
set numberwidth=5
set number
set relativenumber
augroup numbering
    autocmd!
    autocmd InsertLeave * :setlocal relativenumber
    autocmd InsertEnter * :setlocal norelativenumber
augroup END

" }}}1
 
" Status Line configuration {{{1
set laststatus=2
if has("statusline")
    set statusline =              " clear
    set statusline+=\ %#FileName#    " Color
    set statusline+=\ %<%F        " file full path, truncate
    set statusline+=\ %*
    set statusline+=%m          " modified flag '[+]' if modifiable
    set statusline+=\ %h          " help flag '[Help]'
    set statusline+=%r          " read only flag '[RO]'
if exists("g:loaded_fugitive")
    set statusline+=\ %{fugitive#statusline()}    " GIT Branch
endif
if exists("g:loaded_gutentags")
    set statusline+=\ %{gutentags#statusline()}
endif
    set statusline+=%=            " left/right separation point
    set statusline+=\ \|\ %{strlen(&ft)?&ft:'none'}      " filetype
    set statusline+=\ \|\ %{&ff}  " fileformat
    set statusline+=\ (%04v,%04l)\  " (x,y)
endif
" }}}1

" Misc settings often invisible {{{1
if has("autocmd")
    " correctly identify some files
    augroup filetypes
        autocmd!
        autocmd BufNewFile,BufRead *.xhtml setlocal ft=html
        autocmd BufNewFile,BufRead *.mako,*.mak,*.jinja2   setlocal ft=html
        autocmd BufNewFile,BufRead *.cu,*.cuh,*.h set filetype=c
    augroup END

    " When editing a file, always jump to the last cursor position
    augroup lastposition
        autocmd!
        autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   execute "normal! g'\"" |
        \ endif
      augroup END
endif
" }}}1

" Color scheme configuration {{{1

" Vim truecolor 
" Reference: https://gist.github.com/XVilka/8346728
" Think about: Do we REALLY need true color in vim?
" PRO: Using true color removes the need to change term palletes
" CON: Not every application supports it (linux tty)
" PRO: More colors
" CON: Useless colors

if $TERM =~? 'linux'
    set t_Co=16
elseif ($COLORTERM ==? 'truecolor' || $COLORTERM ==? '24bit' || has("gui"))
    set termguicolors
    let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
    let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
endif

" Read ENVVARS BACKGROUND preference
let BACKGROUND = $BACKGROUND
if BACKGROUND == 'light'
    set background=light
else
    set background=dark
endif

" Use Gruvbox colorscheme
colorscheme gruvbox
" Enable syntax
syntax on

if has("gui_running")
    " Remove toolbar and menubar
    set guioptions-=Tm 
    set lines=32 columns=110 linespace=0
    if has("gui_gtk3")
        set guifont=Fira\ Code\ weight\=453\ 12
    endif
endif
 
if $TERM ==# 'linux'
    let g:gruvbox_termcolors=16
else
    " Possible values soft medium hard
    let g:gruvbox_contrast_dark = 'medium'
    let g:gruvbox_contrast_light = 'medium'
endif
 
if &termguicolors
    let g:Hexokinase_hilighters = ['foregroundfull']
    let g:terminal_ansi_colors = [
                \ "#282828",
                \ "#cc241d",
                \ "#98971a",
                \ "#d79921",
                \ "#458588",
                \ "#b16286",
                \ "#689d6a",
                \ "#a89984",
                \ "#928374",
                \ "#fb4934",
                \ "#b8bb26",
                \ "#fabd2f",
                \ "#83a598",
                \ "#d3869b",
                \ "#8ec07c",
                \ "#ebdbb2"]
endif

" }}}1

" Plugin settings {{{1

" Slime configuration {{{2
let g:slime_target='vimterminal'
let g:slime_vimterminal_config={"term_finish": "close"}
" }}}2

" Kitty navigation {{{2
" For system configuration check https://github.com/knubie/vim-kitty-navigator
if $TERM !~? "kitty"
    let g:kitty_navigator_no_mappings = 1
endif
" }}}2

" Tmux navigation {{{2
" Need additinal settings https://github.com/christoomey/vim-tmux-navigator
if empty($TMUX)
    let g:tmux_navigator_no_mappings = 1
else
    let g:tmux_navigator_save_on_switch = 1
    let g:tmux_navigator_disable_when_zoomed = 1
endif
" }}}2
 
" Markdown editing and vieweing {{{2
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'c', 'help']
" }}}2

" C Tags management {{{2
let g:gutentags_modules = ['ctags', 'gtags_cscope']
let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']
let g:gutentags_cache_dir='~/.tmp/vim/gutentags'
let g:gutentags_project_root=[ 'meson.build', 'Makefile', 'setup.py', 'Makefile.am', 'CMake', '.root' ]
let g:gutentags_define_advanced_commands = 1
let g:gutentags_plus_switch = 1
let g:CCTreeKeyHilightTree = '<C-t>'
let g:CCTreeCscopeDb = "cscope.out"
let g:CCTreeMinVisibleDepth = 3
let g:CCTreeOrientation = "topleft"
let g:CCTreeWindowVertical = 1
let g:CCTreeDisplayMode = 2
let g:CCTreeHilightCallTree = 1
let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_autopreview = 1
" }}}2

" }}}1

" Mappings {{{1

" GitGutter
" GitGutter shows marks on VimGutter regarding status
" GitGutterSignsToggle
" GitGutterLineHighlightsToggle
" GitGutterQuickFix
" <Leader>hs stage hunk
" <Leader>hu undo stage
" {RANGE}GitGutterStageHunk
" more @ https://github.com/airblade/vim-gitgutter

" Vim terminal 
" C-\ C-M  (enter terminal-normal)
" i  (enter terminal-insert mode)

" vim-unimpaired
" Files		]a [a
" Buffers	]b [b
" Checklist	]q [q
" Moveline	]e [e

" Vim Sign column 
" m,		place next mark
" ]` [`		Next/Prev mark
" `] `[		Next/Prev mark alphabetically

" Gutentags
" <leader>cs 	Find symbol (reference) under cursor
" <leader>cg 	Find symbol definition under cursor
" <leader>cd 	Functions called by this function
" <leader>cc 	Functions calling this function
" <leader>ct 	Find text string under cursor
" <leader>ce 	Find egrep pattern under cursor
" <leader>cf 	Find file name under cursor
" <leader>ci 	Find files #including the file name under cursor
" <leader>ca 	Find places where current symbol is assigned
" <leader>cz 	Find current word in ctags database
 
let mapleader=' '
let maplocalleader='\'

" Many mappings {{{2
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" Close all buffers except this one
command! BufOnly silent! execute "%bd|e#|bd#"

nnoremap <ESC><ESC><ESC> :q<CR>
nnoremap <leader>/ :nohlsearch<cr>
nnoremap <leader><space> za
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>ef :execute 'vsplit $HOME/.vim/ftplugin/' . &filetype .  '.vim'<CR>
command! W :w
cnoremap W! w !sudo tee % >/dev/null
cnoremap w!! w !sudo tee % >/dev/null
nnoremap <leader>l :setlocal list!<cr>
inoremap <C-v> <ESC>"+pa
vnoremap <C-c> "+y
vnoremap <C-x> "+d
 
" Find current word
nnoremap gr :grep <cword> *<CR>
nnoremap Gr :grep <cword> %:p:h/*<CR>
nnoremap gR :grep '\b<cword>\b' *<CR>
nnoremap GR :grep '\b<cword>\b' %:p:h/*<CR>

" Delete all other buffers
nnoremap <leader>ca :w<bar>%bd<bar>e#<bar>bd#<CR>
" }}}2

" Window {{{2
nnoremap <silent> <Leader>= <C-w>=
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>> :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>< :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
" }}}2

" Vim Terminal + Kitty/Tmux Navigator {{{2
tnoremap <S-Insert> <C-w>"+
if $TERM =~? "kitty"
    tnoremap <silent> <C-h> <C-w>:KittyNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:KittyNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:KittyNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:KittyNavigateRight<cr>
elseif !empty($TMUX)
    tnoremap <silent> <C-h> <C-w>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:TmuxNavigateRight<cr>
endif
" }}}2

" " Function keys {{{2
" " ======================================================================
" " Standard functions keys in APPS
" " <F1> Help
" " <F2> Toggle Pastee
" " <F3> Show Buffers
" " <F4>
" " <F5> Build/Execute/Refresh
" " <F6>
" " <F7>
" " <F8>
" " <F9> Tagbar
" " <F10>
" " <F11> DO NOT REMAP THIS: Why?
" " <F12>
"
" Fast Buffers access
inoremap <F3> <ESC>:buffers<CR>:buffer<Space>
nnoremap <F3>      :buffers<CR>:buffer<Space>
"
" " Find files
" inoremap <F3>
" nnoremap <F3>
" vnoremap <F3>
"
" inoremap <F4> 
" nnoremap <F4>
" vnoremap <F4>
"
" inoremap <F5> <ESC>:make!<cr>
" nnoremap <F5> :make!<cr>
" vnoremap <F5> :make!<cr>
" nnoremap <S-F5> :Valgrind build/%<cr>
"
" set grepprg=grep\ --exclude-from=$HOME/.grep_ignore\ --exclude-dir\ '.git'\ --exclude-dir\ '*venv*'\ -Inr
" inoremap <F6> <ESC>:grep  *<left><left>
" nnoremap <F6>      :grep  *<left><left>
" nnoremap gr :grep <cword> *<CR>
" nnoremap Gr :grep <cword> %:p:h/*<CR>
"
" " Check if spellcheck
" inoremap <F7> <ESC>:SpellCheck<CR>
" nnoremap <F7> :SpellCheck<CR>
"
" inoremap <F8> <ESC>
" nnoremap <F8>
" vnoremap <F8>
"
" " Check if tagbar
inoremap <F9> <ESC>:TagbarToggle<CR>
nnoremap <F9> :TagbarToggle<CR>
"
"inoremap <F10> <ESC>
"nnoremap <F10>
"vnoremap <F10>
"
"inoremap <F11> <ESC>
"nnoremap <F11>
"vnoremap <F11>
"
"inoremap <F12> <ESC>
"nnoremap <F12>
"vnoremap <F12>
" }}}2

" }}}1

" " OLD CONFIGS {{{1

" " Meson {{{3
" " If there's a `meson.build` file, use meson for linting.
"    autocmd FileType c call ConsiderMesonForLinting()
"    function ConsiderMesonForLinting()
"        if filereadable('meson.build')
"            let g:syntastic_c_checkers = ['meson']
"        endif
"    endfunction
" " }}}3

" " Python {{{3
" let g:jedi#use_splits_not_buffers = "bottom"
" let g:jedi#use_tabs_not_buffers = 1
" let g:jedi#popup_on_dot = 0
" let g:jedi#popup_select_first = 0
" let g:jedi#show_call_signatures = "1"
" let g:SimpylFold_fold_import = 1
" let g:SimpylFold_docstring_preview = 1
" let g:SimpylFold_fold_docstring = 0
" augroup vflake8
"     autocmd FileType python map <buffer> <F5> :call Flake8()<CR>
"     autocmd BufWritePost *.py call Flake8()
" augroup END
" let g:flake8_show_in_gutter=1  " show
" let g:flake8_show_in_file=1  " show
" let g:flake8_error_marker='EE'     " set error marker to 'EE'
" let g:flake8_warning_marker='WW'   " set warning marker to 'WW'
" let g:flake8_pyflake_marker='WP'     " disable PyFlakes warnings
" let g:flake8_complexity_marker='CC'  " disable McCabe complexity warnings
" let g:flake8_naming_marker='NN'      " disable naming warnings
" " }}}3

"}}}1

