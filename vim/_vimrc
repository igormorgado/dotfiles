" VIM CONFIGURATION FILE
"
" TODO: Organize better to be readeable in screens without syntax higtlight
"


" Every vimrc file should set vim to nocompatible mode, lets move to
" 1980s. The future is now!
set nocompatible

" Plug-in management {{{
"
" Load plugins and configure them
"
" To install plugins call
" :PlugInstall

let g:plug_timeout=600
call plug#begin('~/.vim/plugged')

" {{{ My vim hints
Plug 'igormorgado/vim-hints'
" }}}

" NetRW settings {{{
Plug 'tpope/vim-vinegar'
" }}}

" Gruvbox colorscheme {{{
Plug 'morhetz/gruvbox'
if has('nvim')
    " Enable Truetype GUI colors in terminal
    set termguicolors
else
    let g:gruvbox_termcolors=256
endif
" Enable italics
let g:gruvbox_italic=1
" let g:gruvbox_termcolors=16
" }}}

" Pair shortcuts {{{
" unimpaired
" Files : ]a [a
" Buffers:  ]b [b
" Checklist: ]q [q
" Moveline: ]e [e
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
" }}}

" Send to terminal! {{{
"Plug 'habamax/vim-sendtoterm'
"nmap <leader>rr <Plug>(SentToTermLine)j
" Default map C-v C-v
Plug 'jpalardy/vim-slime'
let g:slime_target='vimterminal'
let g:slime_vimterminal_config={"term_finish": "close"}
"
"let g:slime_no_mappings = 1
"nmap <Leader>s <Plug>SlimeLineSend
"nmap <Leader>ss <Plug>SlimeParagraphSend
"xmap <Leader>s <Plug>SlimeRegionSend

" }}}

"Julia support {{{
Plug 'JuliaEditorSupport/julia-vim'
Plug 'mroavi/vim-julia-cell', { 'for': 'julia' }
let g:julia_cell_delimit_cells_by='tags'
" }}}

"Python support {{{
Plug 'hanschen/vim-ipython-cell', { 'for': 'python' }
let g:slime_python_ipython = 1
"}}}

" Tags support {{{
"
" Gutentags makes update of tags database automatic while plus also uses cscope
" to get better insight
Plug 'ludovicchabant/vim-gutentags'
" Enable ctags and gtags
let g:gutentags_modules = ['ctags', 'gtags_cscope']
" Exclude some files
" let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']
" Set cache dir to a hidden location
let g:gutentags_cache_dir='~/.tmp/vim/gutentags'
" Identify common build files. Remember to correctly configure each builder in
" each filetype (or make a global one ?)
let g:gutentags_project_root=[ 'meson.build', 'Makefile', 'setup.py', 'Makefile.am', 'CMake', '.root' ]
" Gutentags_plus need this sometimes
let g:gutentags_define_advanced_commands = 1

Plug 'skywind3000/gutentags_plus'
" let g:gutentags_plus_switch = 1

" Friendly lateral bar to show code objects mapped to <F3>
Plug 'majutsushi/tagbar'
let g:tagbar_left = 1
let g:tagbar_width = 30
let g:tagbar_autopreview = 1
"}}}

" YCM {{{
" Plug 'ycm-core/YouCompleteMe'
" let g:ycm_auto_trigger = 1
" let g:ycm_max_num_candidates = 10
" let g:ycm_max_identifier_candidates = 10
" " let g:ycm_error_symbol = 'üî¥'
" let g:ycm_error_symbol = 'üí©'
" let g:ycm_warning_symbol = 'üü°'
" let g:ycm_min_num_of_chars_for_completion = 2
" let g:ycm_always_populate_location_list = 1
" "let g:ycm_min_num_identifier_candidate_chars = 2
" 
" " Why can't I remap to <C-tab>
" " let g:ycm_key_invoke_completion = '<C-tab>'
" " Disable hover by time and enable it by key only
" let g:ycm_auto_hover = ''
" " Why do not works with <leader>D for example?
" nmap <F3> <plug>(YCMHover)
" }}}

" GIT management {{{
Plug 'tpope/vim-fugitive'
" GitGutter shows marks on VimGutter regarding status
" GitGutterToggle
" GitGutterSignsToggle
" GitGutterLineHighlightsToggle
" GitGutterQuickFix
" <Leader>hs stage hunk
" <Leader>hu undo stage
" {RANGE}GitGutterStageHunk
" more @ https://github.com/airblade/vim-gitgutter
Plug 'airblade/vim-gitgutter'
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)
" }}}

" Vim Sign column {{{
" m,    place next mark
" ]` [`  NExt/Prev mark
" `] `[  Next/Prev mark alphabetically
Plug 'kshenoy/vim-signature'
" Always display the Sign Column.
set signcolumn=yes
" }}}

" Build and debug {{{
" Valgrind binaryname
" TODO: Find a way to integrate with meson and makefile
Plug 'igormorgado/valgrind.vim'
" }}}

" Markdown editin and vieeweing {{{
Plug 'tpope/vim-markdown'
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'c', 'help']
" }}}

" Vim XML
Plug 'othree/xml.vim'
Plug 'chrisbra/vim-xml-runtime'


" Vim Color Codes Highlighrt {{{
Plug 'chrisbra/Colorizer'
" }}}

" Tmux navigation {{{
Plug 'igormorgado/vim-tbone'
"Plug 'tpope/vim-tbone'
Plug 'christoomey/vim-tmux-navigator'
" }}}

" Kitty navigation
Plug 'knubie/vim-kitty-navigator'
call plug#end()
"}}}

" Color scheme configuration {{{
" Read ENVVARS BACKGROUND preference
let BACKGROUND=$BACKGROUND
if BACKGROUND=='light'
    set background=light
else
    set background=dark
endif

" Use Gruvbox colorscheme
colorscheme gruvbox
" Enable syntax
syntax on


" Set gui font
if has("gui_running")
  if has("gui_gtk3")
    set guifont=Fixedsys\ Excelsior\ Mono\ 12
  endif
endif
" }}}

" Sane default buffer settings {{{

" As a text editor VIM should handle by default every kind of text document
" availabe with the greatest confort possible therefore some standard sane
" configurations should be set by default
"
" UTF-8 is the new ASCII
set encoding=utf-8
" FIleformat is UNIX
set fileformat=unix

" TABS are tabs, and should be elegantly 8 spaced (this isn't HTML)
set tabstop=8
set shiftwidth=8
set softtabstop=8
set noexpandtab
set shiftround

" A standard terminal has 80 column wide (you can go bigger, but stick with
" it. But it should not wrap if screen is smaller, otherwise things get weird
set nowrap
" Do not break words when wrapping (if wrapping)
set linebreak
" Make wrap breaks more readeable
set showbreak=‚Ü™\
set textwidth=79
set colorcolumn=79
" Try to keep part of file visible
set scrolloff=8
" }}}

" VIM default filetype handling {{{

" Enables filetype handling
filetype on
" Loads the filetype indentation at $VIMRUNTIME/indent
" |C-indenting|
filetype indent on
" Loads the file im $VIMRUNTIME/filetype.vim
filetype plugin on
" This changes the keybinding started to space bar, since is simpler and bigger
let mapleader=" "
let maplocalleader=" "
" }}}

" Buffer manipulation {{{

" Read modelines if they are set
set modeline
" Display a marker for cursor position in buffer
set cursorline
set cursorcolumn
" Try not interpret any special characters
set conceallevel=0
" Set special characters
set listchars=tab:‚Üí\ ,eol:‚Ü≤,nbsp:‚ê£,trail:‚Ä¢,extends:‚ü©,precedes:‚ü®
" Toogle special characters on key
nnoremap <leader>l :set list!<cr>
" Undo is never enough
set undolevels=1000
" Enable move inside invisible chars for manipulation
set virtualedit=block
" Searching
set smartcase
set hlsearch
set incsearch
set ignorecase
" Disable mouse. THIS. IS. VIM!
set mouse=a
" Map standard commands to system clipboard (LAME!)
inoremap <C-v> <ESC>"+pa
vnoremap <C-c> "+y
vnoremap <C-x> "+d

" Window resize shortcut
nnoremap <silent> <Leader>= <C-w>=
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>> :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>< :exe "vertical resize " . (winwidth(0) * 2/3)<CR>

" Find current word
nnoremap gr :grep <cword> *<CR>
nnoremap Gr :grep <cword> %:p:h/*<CR>
nnoremap gR :grep '\b<cword>\b' *<CR>
nnoremap GR :grep '\b<cword>\b' %:p:h/*<CR>
" }}}

" Vim terminal {{{
" Paste buffer with shifg insert
" :he terminal-typing
" :he Terminal-mode
" C-\ C-M  (enter terminal-normal)
" i  (enter terminal-insert mode)
"
tmap <S-Insert> <C-w>"+
" }}}

" Vim window setting {{{
" Enable wild menu
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.bak
set wildignore+=*.o,*~,*.pyc,*.obj
set wildignore+=tags,cscope.out,.tags,cctree.out
set wildignore+=*.exe,a.out
set wildignorecase
" Set path locations while finding
set path=.,/usr/include,/usr/local/include,src/include,include,../include,../lib/,**,,
" New splits are below and right (instead defaul top left)
set splitbelow
set splitright
""  A complicated status bar configuration
set laststatus=2
set showtabline=1
" Status line color (changed for a simpler than informative for many buffer views)
if has("statusline")
    set statusline =              " clear
    set statusline+=\ %#FileName#    " Color
    set statusline+=\ %<%F        " file full path, truncate
    set statusline+=\ %*
    set statusline+=%m          " modified flag '[+]' if modifiable
    set statusline+=\ %h          " help flag '[Help]'
    set statusline+=%r          " read only flag '[RO]'
" if exists("g:loaded_fugitive")
    set statusline+=\ %{fugitive#statusline()}    " GIT Branch
" endif
" if exists("g:loaded_gutentags")
    set statusline+=\ %{gutentags#statusline()}
" endif
    set statusline+=%=            " left/right separation point
    set statusline+=\ \|\ %{strlen(&ft)?&ft:'none'}      " filetype
    set statusline+=\ \|\ %{&ff}  " fileformat
    " Display ascii value of actual character under cursor
    " set statusline+=\ \|\ [%03b   " decimal byte
    " set statusline+=\ x%02B]      " hex byte ' \x62'
    set statusline+=\ (%04v,%04l)\  " (x,y)
    " set statusline+=\ \|\ %P    " percent of file
    " set statusline+=\ of
    " set statusline+=\ %L          " line/lines
    " set statusline+=\ lines
endif
" Numbering
set numberwidth=5
set number
set relativenumber
augroup numbering
    autocmd!
    autocmd InsertLeave * :set relativenumber
    autocmd InsertEnter * :set norelativenumber
augroup END
" }}}

" Function keys {{{
" ======================================================================
" Standard functions keys in APPS
" <F1> Help
" <F2>
" <F3>
" <F4>
" <F5> Build/Execute/Refresh
" <F6>
" <F7>
" <F8>
" <F9> Tagbar
" <F10>
" <F11> DO NOT REMAP THIS
" <F12>

" Fast Buffers access
inoremap <F2> <ESC>:buffers<CR>:buffer<Space>
nnoremap <F2>      :buffers<CR>:buffer<Space>

"" Find files
"inoremap <F3>
"nnoremap <F3>
"vnoremap <F3>
"
"inoremap <F4> <ESC>:Texec<CR>j<Insert>
"nnoremap <F4>      :Texec<CR>j
"vnoremap <F4>      :Texec<CR>j

inoremap <F5> <ESC>:make!<cr>
nnoremap <F5> :make!<cr>
vnoremap <F5> :make!<cr>
"nnoremap <S-F5> :Valgrind build/%<cr>

"set grepprg=grep\ --exclude-from=$HOME/.grep_ignore\ --exclude-dir\ '.git'\ --exclude-dir\ '*venv*'\ -Inr
"inoremap <F6> <ESC>:grep  *<left><left>
"nnoremap <F6>      :grep  *<left><left>
"nnoremap gr :grep <cword> *<CR>
"nnoremap Gr :grep <cword> %:p:h/*<CR>
"
"" Check if spellcheck
"inoremap <F7> <ESC>:SpellCheck<CR>
"nnoremap <F7> :SpellCheck<CR>
"
"inoremap <F8> <ESC>
"nnoremap <F8>
"vnoremap <F8>
"
"" Check if tagbar
inoremap <F9> <ESC>:TagbarToggle<CR>
nnoremap <F9> :TagbarToggle<CR>
"
"inoremap <F10> <ESC>
"nnoremap <F10>
"vnoremap <F10>
"
"inoremap <F11> <ESC>
"nnoremap <F11>
"vnoremap <F11>
"
"inoremap <F12> <ESC>
"nnoremap <F12>
"vnoremap <F12>
"}}}

" Lazyness and confort keys {{{

" Pressing j then k quicly in insert mode leaves insert mode.
inoremap jk <esc>
" Quit on triple ESC (RAGE MODE)
nnoremap <ESC><ESC><ESC> :q<CR>
" Clean search
nnoremap <leader>/ :nohlsearch<cr>
" Open/close fold
nnoremap <leader><space> za
"" Edit vim rc
"nnoremap <leader>ev :vsplit $MYVIMRC<cr>
" Changed in neovim since the $MYVIMRC is mapped to
" ~/.config/neovim/init.vim
nnoremap <leader>ev :vsplit ~/.vimrc<cr>
"" Edit filetype vim config file
nnoremap <leader>ef :execute 'vsplit $HOME/.vim/ftplugin/' . &filetype .  '.vim'<CR>
" W use capital w to write too..
command! W :w
" sudo write this
cnoremap W! w !sudo tee % >/dev/null
cnoremap w!! w !sudo tee % >/dev/null
" CLose all bufffers
"nnoremap <leader>ca :w<bar>%bd<bar>e#<bar>bd#<CR>
" }}}

" NETRW navigation configuration {{{
"
" Checkout {netrw-browse-maps}
" Some shortcuts:
"   gh  hide/show system files
" Common keys:
"	<CR>		Open file in same split
"	v		Open file in vertical split
"	t		Open file in new tab
let g:netrw_list_hide  = '\(^\|\s\s\)\zs\.\S\+'
let g:netrw_list_hide .= '\.pyc$,'
let g:netrw_list_hide .= '\.o$,\.obj$'
let g:netrw_list_hide .= '\.a$,\.so$,\.lib$,\.dll$,'
let g:netrw_list_hide .= '\.pyc\s\+,'
let g:netrw_list_hide .= '\.o\s\+,\.obj\s\+'
let g:netrw_list_hide .= '\.a\s\+,\.so\s\+,\.lib\s\+,\.dll\s\+,'
" }}}

" Vim Special files handling {{{
"
" This keep all ugly vim files in a separated lhh0
set backup
set backupdir=~/.tmp/vim,~/tmp/vim
set swapfile
set directory=~/.tmp/vim,~/tmp/vim
set undofile
set undodir=~/.tmp/vim,~/tmp/vim
set writebackup
set viminfo^=%
" Tags
set tags=.tags;tags;${HOME}
set tags+=~/.config/nvim/systags
" }}}

" Misc settings often invisible {{{
if has("autocmd")

    " correctly identify some files
    augroup filetypes
        autocmd!
        autocmd BufNewFile,BufRead *.xhtml setlocal ft=html
        autocmd BufNewFile,BufRead *.mako,*.mak,*.jinja2   setlocal ft=html
        autocmd BufNewFile,BufRead *.cu,*.cuh,*.h set filetype=c
    augroup END

    " When editing a file, always jump to the last cursor position
    augroup lastposition
        autocmd!
        autocmd BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal! g'\"" |
        \ endif
      augroup END
endif
" }}}



" OLD CONFIGS {{{

"""""""""""""""""""""""""""""""""""""""""""""""

" TMUX MANAGEMENT

" Coding
"Plug 'igormorgado/Conque-GDB'
"
"

"" Vim Enhancement
"Plug 'tpope/vim-eunuch'
"Plug 'tpope/vim-flagship'
"Plug 'tpope/vim-surround'
"
"
"" C development
"Plug 'igankevich/mesonic'
"
"" Python Dev
"" Need to learn more about these plugins
"Plug 'davidhalter/jedi-vim'
""Plug 'tmhedberg/SimpylFold'
"Plug 'nvie/vim-flake8'
"
"" Latex dev
"Plug 'lervag/vimtex'
"
"" Latex SpellCheck
"Plug 'inkarkat/vim-ingo-library'
"Plug 'inkarkat/vim-SpellCheck'

"" split window vertically
"nnoremap <leader>w <C-w>v<C-w>l
"" Add files to buffers
"nnoremap <leader>a :argadd <c-r>=fnameescape(expand('%p:h'))<cr>/*<C-d>
"" Find a file
"nnoremap <leader>f :find *
"" Close all buffers except this one
"command! BufOnly silent! execute "%bd|e#|bd#"
"
"" Setup TMUX Navigator
"let g:tmux_navigator_save_on_switch = 2
"let g:tmux_navigator_disable_when_zoomed = 1
"let g:tmux_navigator_no_mappings = 1
"" Standard <C-\> conflicts with vim-CScope"
"" These keys are not working inside CCTree split
"nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
"nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
"nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
"nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
"nnoremap <silent> <C-g> :TmuxNavigatePrevious<cr>
"inoremap <silent> <C-h> <ESC>:TmuxNavigateLeft<cr>
"inoremap <silent> <C-j> <ESC>:TmuxNavigateDown<cr>
"inoremap <silent> <C-k> <ESC>:TmuxNavigateUp<cr>
"inoremap <silent> <C-l> <ESC>:TmuxNavigateRight<cr>
"inoremap <silent> <C-g> <ESC>:TmuxNavigatePrevious<cr>
"tnoremap <silent> <C-h> <C-W> h
"tnoremap <silent> <C-j> <C-W> j
"tnoremap <silent> <C-k> <C-W> k
"tnoremap <silent> <C-l> <C-W> l
"tnoremap <silent> <C-g> <C-W> <C-W>
"
"
"" romainl/vim-qf
"" Inside QF window
""    s - open entry in a new horizontal window
""    v - open entry in a new vertical window
""    t - open entry in a new tab
""    o - open entry and come back
""    O - open entry and close the location/quickfix window
""    p - open entry in a preview window
Plug 'romainl/vim-qf'
"" nmap C <Plug>qf_qf_switch
"" nmap <leader>c <Plug>qf_qf_stay_toggle
"let g:qf_mapping_ack_style = 1
let g:qf_statusline = {}
let g:qf_statusline.before = '%<\ '
let g:qf_statusline.after = '\ %f%=%l\/%-6L\ \ \ \ \ '
"
"
"
"
"" CCTree and Cscope
"" let g:CCTreeKeyHilightTree = '<C-t>'
"" let g:CCTreeCscopeDb = "cscope.out"
"" let g:CCTreeMinVisibleDepth = 3
"" " Can be top/bottom right/left
"" let g:CCTreeOrientation = "topleft"
"" let g:CCTreeWindowVertical = 1
"" " 1 compact 2: normal 3: wide
"" let g:CCTreeDisplayMode = 2
"" let g:CCTreeHilightCallTree = 1
"
"
"" Tagbar
"
"
"
"
"    " If there's a `meson.build` file, use meson for linting.
"    autocmd FileType c call ConsiderMesonForLinting()
"    function ConsiderMesonForLinting()
"        if filereadable('meson.build')
"            let g:syntastic_c_checkers = ['meson']
"        endif
"    endfunction
"
"
""
"
"" Abbreviations
"" =====================================================================
"iabbrev migor morgado.igor@gmail.com
"
"" Enable Digraphs with C-D
"inoremap <C-D> <C-K>
"
"" let g:jedi#use_splits_not_buffers = "bottom"
"" let g:jedi#use_tabs_not_buffers = 1
"" let g:jedi#popup_on_dot = 0
"" let g:jedi#popup_select_first = 0
"" let g:jedi#show_call_signatures = "1"
"
"" let g:SimpylFold_fold_import = 1
"" let g:SimpylFold_docstring_preview = 1
"" let g:SimpylFold_fold_docstring = 0
"
"" augroup vflake8
""     autocmd FileType python map <buffer> <F5> :call Flake8()<CR>
"" "   autocmd BufWritePost *.py call Flake8()
"" augroup END
"" let g:flake8_show_in_gutter=1  " show
"" let g:flake8_show_in_file=1  " show
"" let g:flake8_error_marker='EE'     " set error marker to 'EE'
"" let g:flake8_warning_marker='WW'   " set warning marker to 'WW'
"" let g:flake8_pyflake_marker='WP'     " disable PyFlakes warnings
"" let g:flake8_complexity_marker='CC'  " disable McCabe complexity warnings
"" let g:flake8_naming_marker='NN'      " disable naming warnings
" }}}
