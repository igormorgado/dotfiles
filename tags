!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
"Drawable"	_gimp/plug-ins/layer-to-selection.scm	/^(define$/;"	f
-	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^  nmap - <Plug>(dirvish_up)$/;"	m
/	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer> \/ \/\\ze[^\\\/]*[\\\/]\\=$<Home>$/;"	m
<C-G>S	_vim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	_vim/plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-L>	_vim/plugged/vim-sensible/plugin/sensible.vim	/^  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>$/;"	m
<C-S>	_vim/plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-U>	_vim/plugged/vim-sensible/plugin/sensible.vim	/^inoremap <C-U> <C-G>u<C-U>$/;"	m
<F7>	_vim/ftplugin/python.vim	/^nnoremap <buffer> <F7> :call Autopep8()<CR>$/;"	m
<F7>	_vim/plugged/vim-flake8/ftplugin/python_flake8.vim	/^        noremap <buffer> <F7> :call flake8#Flake8()<CR>$/;"	m
<F8>	_vim/plugged/vim-autopep8/ftplugin/python_autopep8.vim	/^        noremap <buffer> <F8> :call Autopep8()<CR>$/;"	m
<P	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <P :call <SID>putline('[p', 'Above')<CR><']$/;"	m
<Plug>(dirvish_quit)	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_quit) :<C-U>call <SID>buf_close()<CR>$/;"	m
<Plug>(dirvish_up)	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> <Plug>(dirvish_up) :<C-U>exe "Dirvish %:h".repeat(":h",v:count1)<CR>$/;"	m
<Plug>(dirvish_up)	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_up) :<C-U>exe 'Dirvish %:p'.repeat(':h',v:count1)<CR>$/;"	m
<Plug>CSurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>Csurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	_vim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	_vim/plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>QfCnext	_vim/plugged/vim-qf/plugin/qf.vim	/^nnoremap <silent> <Plug>QfCnext     :call qf#WrapCommand('down', 'c')<CR>$/;"	m
<Plug>QfCprevious	_vim/plugged/vim-qf/plugin/qf.vim	/^nnoremap <silent> <Plug>QfCprevious :call qf#WrapCommand('up', 'c')<CR>$/;"	m
<Plug>QfLnext	_vim/plugged/vim-qf/plugin/qf.vim	/^nnoremap <silent> <Plug>QfLnext     :call qf#WrapCommand('up', 'l')<CR>$/;"	m
<Plug>QfLprevious	_vim/plugged/vim-qf/plugin/qf.vim	/^nnoremap <silent> <Plug>QfLprevious :call qf#WrapCommand('down', 'l')<CR>$/;"	m
<Plug>QfSwitch	_vim/plugged/vim-qf/plugin/qf.vim	/^nnoremap <expr> <silent> <Plug>QfSwitch &filetype == "qf" ? "<C-w>p" : "<C-w>b"$/;"	m
<Plug>QlistDefinefromhere	_vim/plugged/vim-qlist/plugin/qlist.vim	/^nnoremap <silent> <Plug>QlistDefinefromhere        :call <sid>Qlist("d", 0, 1, 0)<CR>$/;"	m
<Plug>QlistDefinefromtop	_vim/plugged/vim-qlist/plugin/qlist.vim	/^nnoremap <silent> <Plug>QlistDefinefromtop         :call <sid>Qlist("d", 0, 0, 0)<CR>$/;"	m
<Plug>QlistIncludefromhere	_vim/plugged/vim-qlist/plugin/qlist.vim	/^nnoremap <silent> <Plug>QlistIncludefromhere       :call <sid>Qlist("i", 0, 1, 0)<CR>$/;"	m
<Plug>QlistIncludefromtop	_vim/plugged/vim-qlist/plugin/qlist.vim	/^nnoremap <silent> <Plug>QlistIncludefromtop        :call <sid>Qlist("i", 0, 0, 0)<CR>$/;"	m
<Plug>SurroundRepeat	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>ToggleBackground	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a$/;"	m
<Plug>ToggleBackground	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG$/;"	m
<Plug>ToggleBackground	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv$/;"	m
<Plug>VSurround	_vim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	_vim/plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>YSsurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	_vim/plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<Plug>unimpairedBlankDown	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>call <SID>BlankDown(v:count1)<CR>$/;"	m
<Plug>unimpairedBlankUp	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>call <SID>BlankUp(v:count1)<CR>$/;"	m
<Plug>unimpairedContextNext	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextNext     :call <SID>Context(0)<CR>$/;"	m
<Plug>unimpairedContextNext	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextNext     :call <SID>ContextMotion(0)<CR>$/;"	m
<Plug>unimpairedContextPrevious	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextPrevious :call <SID>Context(1)<CR>$/;"	m
<Plug>unimpairedContextPrevious	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextPrevious :call <SID>ContextMotion(1)<CR>$/;"	m
<Plug>unimpairedDirectoryNext	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryNext     :<C-U>edit <C-R>=fnamemodify(<SID>fnameescape(<SID>FileByOffset(v:count1)), ':.')<CR><CR>$/;"	m
<Plug>unimpairedDirectoryPrevious	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryPrevious :<C-U>edit <C-R>=fnamemodify(<SID>fnameescape(<SID>FileByOffset(-v:count1)), ':.')<CR><CR>$/;"	m
<Plug>unimpairedMoveDown	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'Down')<CR>$/;"	m
<Plug>unimpairedMoveSelectionDown	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionDown :<C-U>call <SID>MoveSelectionDown(v:count1)<CR>$/;"	m
<Plug>unimpairedMoveSelectionUp	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionUp   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR>$/;"	m
<Plug>unimpairedMoveUp	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'Up')<CR>$/;"	m
<Plug>unimpairedONext	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap <silent> <Plug>unimpairedONext     <Plug>unimpairedDirectoryNext:echohl WarningMSG<Bar>echo "]o is deprecated. Use ]f"<Bar>echohl NONE<CR>$/;"	m
<Plug>unimpairedOPrevious	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap <silent> <Plug>unimpairedOPrevious <Plug>unimpairedDirectoryPrevious:echohl WarningMSG<Bar>echo "[o is deprecated. Use [f"<Bar>echohl NONE<CR>$/;"	m
<Plug>unimpairedPaste	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPaste :call <SID>setup_paste()<CR>$/;"	m
<Plug>unimpairedPutAbove	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutAbove :call <SID>putline('[p', 'Above')<CR>$/;"	m
<Plug>unimpairedPutBelow	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutBelow :call <SID>putline(']p', 'Below')<CR>$/;"	m
<SID>:	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>TogBG	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^noremap <SID>TogBG  :call <SID>TogBG()<CR>$/;"	m
<leader>px	_vim/ftplugin/xml.vim	/^nmap <leader>px !!xmllint --format -<CR>$/;"	m
<leader>px	_vim/ftplugin/xml.vim	/^vmap <leader>px !xmllint --format -<CR>$/;"	m
<leader>pxa	_vim/ftplugin/xml.vim	/^nmap <leader>pxa :%!xmllint --format -<CR>$/;"	m
<leader>xd	_vim/ftplugin/xml.vim	/^nmap <leader>xd :%w !xmllint --dtdvalid$/;"	m
<leader>xl	_vim/ftplugin/xml.vim	/^nmap <leader>xl <leader>cd:%w !xmllint --valid --noout -<CR>$/;"	m
<leader>xr	_vim/ftplugin/xml.vim	/^nmap <leader>xr <leader>cd:%w !rxp -V -N -s -x<CR>$/;"	m
<leader>xs	_vim/ftplugin/xml.vim	/^nmap <leader>xs :%!xsltlint<CR>$/;"	m
<p	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <p :call <SID>putline(']p', 'Below')<CR><']$/;"	m
=P	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> =P :call <SID>putline('[p', 'Above')<CR>=']$/;"	m
=p	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> =p :call <SID>putline(']p', 'Below')<CR>=']$/;"	m
>P	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> >P :call <SID>putline('[p', 'Above')<CR>>']$/;"	m
>p	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> >p :call <SID>putline(']p', 'Below')<CR>>']$/;"	m
?	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer> ? ?\\ze[^\\\/]*[\\\/]\\=$<Home>$/;"	m
AGS	_fzf/src/Makefile	/^		\/bin\/bash -ci 'cd \/fzf\/src; make TAGS=static release'$/;"	m
ALLSPHINXOPTS	_vim/plugged/vim-autopep8/docs/Makefile	/^ALLSPHINXOPTS   = -d $(BUILDDIR)\/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
APPDIR	bin/ldif2vcf.py	/^APPDIR = os.path.abspath(HERE)$/;"	v
Add	_fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []*Item) {$/;"	f
AltA	_fzf/src/curses/curses.go	/^	AltBS$/;"	c
AltB	_fzf/src/curses/curses.go	/^	AltA$/;"	c
AltBS	_fzf/src/curses/curses.go	/^	AltSlash$/;"	c
AltC	_fzf/src/curses/curses.go	/^	AltB$/;"	c
AltD	_fzf/src/curses/curses.go	/^	AltC$/;"	c
AltE	_fzf/src/curses/curses.go	/^	AltD$/;"	c
AltEnter	_fzf/src/curses/curses.go	/^	F10$/;"	c
AltF	_fzf/src/curses/curses.go	/^	AltE$/;"	c
AltSlash	_fzf/src/curses/curses.go	/^	AltSpace$/;"	c
AltSpace	_fzf/src/curses/curses.go	/^	AltEnter$/;"	c
AltZ	_fzf/src/curses/curses.go	/^	AltF$/;"	c
Arg	bin/parallel	/^package Arg;$/;"	p
AsString	_fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f
AsString	_fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f
AtomicBool	_fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	t
Autopep8	_vim/plugged/vim-autopep8/ftplugin/python_autopep8.vim	/^        command! -nargs=? -bar Autopep8 call Autopep8(<f-args>)$/;"	c
Autopep8	_vim/plugged/vim-autopep8/ftplugin/python_autopep8.vim	/^    function Autopep8(...)$/;"	f
BG	_fzf/src/curses/curses.go	/^	CurrentFG     int$/;"	v
BINARY	_fzf/src/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	_fzf/src/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY32	_fzf/src/Makefile	/^BINARY32    := fzf-$(GOOS)_386$/;"	m
BINARY64	_fzf/src/Makefile	/^BINARY64    := fzf-$(GOOS)_amd64$/;"	m
BINARYARM7	_fzf/src/Makefile	/^BINARYARM7  := fzf-$(GOOS)_arm7$/;"	m
BINDIR	_fzf/src/Makefile	/^BINDIR      := $(shell dirname $(ROOTDIR))\/bin$/;"	m
BSpace	_fzf/src/curses/curses.go	/^	BTab$/;"	c
BTab	_fzf/src/curses/curses.go	/^	DoubleClick$/;"	c
BUILDDIR	_vim/plugged/vim-autopep8/docs/Makefile	/^BUILDDIR      = _build$/;"	m
Blame	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
BlameCommit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameCommit(cmd) abort$/;"	f
BlameJump	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
BlankDown	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:BlankDown(count) abort$/;"	f
BlankUp	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:BlankUp(count) abort$/;"	f
Browse	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Browse(bang,line1,count,...) abort$/;"	f
BufReadIndex	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndex() abort$/;"	f
BufReadIndexFile	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadIndexFile() abort$/;"	f
BufReadObject	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufReadObject() abort$/;"	f
BufWriteIndexFile	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:BufWriteIndexFile() abort$/;"	f
BuildPattern	_fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, extended bool, caseMode Case, forward bool,$/;"	f
ByOrder	_fzf/src/item.go	/^type ByOrder []Offset$/;"	t
ByRelevance	_fzf/src/item.go	/^type ByRelevance []*Item$/;"	t
ByRelevanceTac	_fzf/src/item.go	/^type ByRelevanceTac []*Item$/;"	t
BytesToRunes	_fzf/src/util/util.go	/^func BytesToRunes(bytea []byte) []rune {$/;"	f
CFill	_fzf/src/curses/curses.go	/^func (w *Window) CFill(str string, fg int, bg int, bold bool) bool {$/;"	f
CHM2PDF_TEMP_ORIG_DIR	bin/chm2pdf.py	/^CHM2PDF_TEMP_ORIG_DIR='\/tmp\/chm2pdf\/orig'$/;"	v
CHM2PDF_TEMP_WORK_DIR	bin/chm2pdf.py	/^CHM2PDF_TEMP_WORK_DIR='\/tmp\/chm2pdf\/work' $/;"	v
COLOR_TEMPLATES	_pythonrc.py	/^        COLOR_TEMPLATES = ($/;"	v	class:TermColors
CPrint	_fzf/src/curses/curses.go	/^func (w *Window) CPrint(pair int, bold bool, text string) {$/;"	f
CSCOPE_EXE	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	_fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f
Case	_fzf/src/options.go	/^type Case int$/;"	t
CaseIgnore	_fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c
CaseRespect	_fzf/src/options.go	/^	CaseIgnore$/;"	c
CaseSmart	_fzf/src/options.go	/^const ($/;"	c
Chmod	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -nargs=1 Chmod :$/;"	c
Chunk	_fzf/src/chunklist.go	/^type Chunk []*Item \/\/ >>> []Item$/;"	t
ChunkCache	_fzf/src/cache.go	/^type ChunkCache struct {$/;"	t
ChunkList	_fzf/src/chunklist.go	/^type ChunkList struct {$/;"	t
Clear	_fzf/src/curses/curses.go	/^func Clear() {$/;"	f
Clear	_fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f
Close	_fzf/src/curses/curses.go	/^func (w *Window) Close() {$/;"	f
Close	_fzf/src/curses/curses.go	/^func Close() {$/;"	f
ColBorder	_fzf/src/curses/curses.go	/^	ColHeader$/;"	c
ColCurrent	_fzf/src/curses/curses.go	/^	ColMatch$/;"	c
ColCurrentMatch	_fzf/src/curses/curses.go	/^	ColCurrent$/;"	c
ColCursor	_fzf/src/curses/curses.go	/^	ColInfo$/;"	c
ColHeader	_fzf/src/curses/curses.go	/^	ColSelected$/;"	c
ColInfo	_fzf/src/curses/curses.go	/^	ColSpinner$/;"	c
ColMatch	_fzf/src/curses/curses.go	/^	ColPrompt$/;"	c
ColNormal	_fzf/src/curses/curses.go	/^const ($/;"	c
ColPrompt	_fzf/src/curses/curses.go	/^	ColNormal = iota$/;"	c
ColSelected	_fzf/src/curses/curses.go	/^	ColCursor$/;"	c
ColSpinner	_fzf/src/curses/curses.go	/^	ColCurrentMatch$/;"	c
ColUser	_fzf/src/curses/curses.go	/^	ColBorder$/;"	c
ColorTheme	_fzf/src/curses/curses.go	/^type ColorTheme struct {$/;"	t
CommandLine	bin/parallel	/^package CommandLine;$/;"	p
CommandLineQueue	bin/parallel	/^package CommandLineQueue;$/;"	p
Commit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Commit(args, ...) abort$/;"	f
CommitComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
Completer	_pythonrc.py	/^    class Completer(object):$/;"	c
CompletionTest	_fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Constrain	_fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f
Constrain32	_fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f
Context	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Context(reverse)$/;"	f
ContextMotion	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:ContextMotion(reverse)$/;"	f
CountItems	_fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f
CssCatcher	bin/chm2pdf.py	/^class CssCatcher(sgmllib.SGMLParser):$/;"	c
CtrlA	_fzf/src/curses/curses.go	/^	Rune = iota$/;"	c
CtrlB	_fzf/src/curses/curses.go	/^	CtrlA$/;"	c
CtrlC	_fzf/src/curses/curses.go	/^	CtrlB$/;"	c
CtrlD	_fzf/src/curses/curses.go	/^	CtrlC$/;"	c
CtrlE	_fzf/src/curses/curses.go	/^	CtrlD$/;"	c
CtrlF	_fzf/src/curses/curses.go	/^	CtrlE$/;"	c
CtrlG	_fzf/src/curses/curses.go	/^	CtrlF$/;"	c
CtrlH	_fzf/src/curses/curses.go	/^	CtrlG$/;"	c
CtrlJ	_fzf/src/curses/curses.go	/^	Tab$/;"	c
CtrlK	_fzf/src/curses/curses.go	/^	CtrlJ$/;"	c
CtrlL	_fzf/src/curses/curses.go	/^	CtrlK$/;"	c
CtrlM	_fzf/src/curses/curses.go	/^	CtrlL$/;"	c
CtrlN	_fzf/src/curses/curses.go	/^	CtrlM$/;"	c
CtrlO	_fzf/src/curses/curses.go	/^	CtrlN$/;"	c
CtrlP	_fzf/src/curses/curses.go	/^	CtrlO$/;"	c
CtrlQ	_fzf/src/curses/curses.go	/^	CtrlP$/;"	c
CtrlR	_fzf/src/curses/curses.go	/^	CtrlQ$/;"	c
CtrlS	_fzf/src/curses/curses.go	/^	CtrlR$/;"	c
CtrlT	_fzf/src/curses/curses.go	/^	CtrlS$/;"	c
CtrlU	_fzf/src/curses/curses.go	/^	CtrlT$/;"	c
CtrlV	_fzf/src/curses/curses.go	/^	CtrlU$/;"	c
CtrlW	_fzf/src/curses/curses.go	/^	CtrlV$/;"	c
CtrlX	_fzf/src/curses/curses.go	/^	CtrlW$/;"	c
CtrlY	_fzf/src/curses/curses.go	/^	CtrlX$/;"	c
CtrlZ	_fzf/src/curses/curses.go	/^	CtrlY$/;"	c
CurrentFG	_fzf/src/curses/curses.go	/^	FG            int$/;"	v
DB_FILE	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DESTROY	bin/parallel	/^sub DESTROY {$/;"	s
DOCKEROPTS	_fzf/src/Makefile	/^DOCKEROPTS  := -i -t -v $(ROOTDIR):\/fzf\/src$/;"	m
Dark256	_fzf/src/curses/curses.go	/^	Default16     *ColorTheme$/;"	v
DarkBG	_fzf/src/curses/curses.go	/^	BG            int$/;"	v
DeclareOption	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! s:DeclareOption(name, globalPrefix, default)  " {{{$/;"	f
Default16	_fzf/src/curses/curses.go	/^	_screen       *C.SCREEN$/;"	v
Del	_fzf/src/curses/curses.go	/^	BSpace$/;"	c
Delimiter	_fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	t
Diff	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Diff(vert,keepfocus,...) abort$/;"	f
DirComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
Dirvish	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^command! -bar -nargs=? -complete=dir Dirvish call dirvish#open(<q-args>)$/;"	c
Dispatch	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Dispatch(bang, args)$/;"	f
DjangoModels	_pythonrc.py	/^        class DjangoModels(object):$/;"	c	function:SECRET_KEY
Dlist	_vim/plugged/vim-qlist/plugin/qlist.vim	/^command! -nargs=1 -bar -bang Dlist call <sid>Qlist("d", 1, 0, '<bang>' == '!', <f-args>)$/;"	c
DoUpdate	_fzf/src/curses/curses.go	/^func DoUpdate() {$/;"	f
Dofile	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=1 Dofile call qf#DoList(0, <q-args>)$/;"	c
Doline	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=1 Doline call qf#DoList(1, <q-args>)$/;"	c
DoneParseArgs	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
DoubleClick	_fzf/src/curses/curses.go	/^	Mouse$/;"	c
Down	_fzf/src/curses/curses.go	/^	Up$/;"	c
DurWithin	_fzf/src/util/util.go	/^func DurWithin($/;"	f
EDITOR	_pythonrc.py	/^    EDITOR = os.environ.get('EDITOR', 'vim')$/;"	v
EDIT_CMD	_pythonrc.py	/^    EDIT_CMD = '\\e'$/;"	v
ESC	_fzf/src/curses/curses.go	/^	CtrlZ$/;"	c
Edit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Edit(cmd,bang,...) abort$/;"	f
EditComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
EditRunComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:EditRunComplete(A,L,P) abort$/;"	f
EditableBufferInteractiveConsole	_pythonrc.py	/^    class EditableBufferInteractiveConsole(InteractiveConsole):$/;"	c
EmptyMerger	_fzf/src/merger.go	/^var EmptyMerger = NewMerger([][]*Item{}, false, false)$/;"	v
EmptyTheme	_fzf/src/curses/curses.go	/^func EmptyTheme() *ColorTheme {$/;"	f
Enclose	_fzf/src/curses/curses.go	/^func (w *Window) Enclose(y int, x int) bool {$/;"	f
End	_fzf/src/curses/curses.go	/^	Home$/;"	c
Endwin	_fzf/src/curses/curses.go	/^func Endwin() {$/;"	f
EqualMatch	_fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, forward bool, runes []rune, pattern []rune) Result {$/;"	f
Erase	_fzf/src/curses/curses.go	/^func (w *Window) Erase() {$/;"	f
Event	_fzf/src/curses/curses.go	/^type Event struct {$/;"	t
EventBox	_fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	t
EventType	_fzf/src/util/eventbox.go	/^type EventType int$/;"	t
Events	_fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t
EvtClose	_fzf/src/constants.go	/^	EvtHeader$/;"	c
EvtClose	_fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c
EvtHeader	_fzf/src/constants.go	/^	EvtSearchFin$/;"	c
EvtReadFin	_fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c
EvtReadFin	_fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c
EvtReadNew	_fzf/src/constants.go	/^const ($/;"	c
EvtReadNew	_fzf/src/util/eventbox_test.go	/^const ($/;"	c
EvtSearchFin	_fzf/src/constants.go	/^	EvtSearchProgress$/;"	c
EvtSearchFin	_fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c
EvtSearchNew	_fzf/src/constants.go	/^	EvtReadFin$/;"	c
EvtSearchNew	_fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c
EvtSearchProgress	_fzf/src/constants.go	/^	EvtSearchNew$/;"	c
EvtSearchProgress	_fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c
ExactMatchNaive	_fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, forward bool, runes []rune, pattern []rune) Result {$/;"	f
ExecCommand	_fzf/src/util/util.go	/^func ExecCommand(command string) *exec.Cmd {$/;"	f
ExecuteInTree	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
ExtendedFuzzyMatcher	_fzf/fzf	/^  class ExtendedFuzzyMatcher < FuzzyMatcher$/;"	c	class:start_search
F1	_fzf/src/curses/curses.go	/^	SRight$/;"	c
F10	_fzf/src/curses/curses.go	/^	F9$/;"	c
F2	_fzf/src/curses/curses.go	/^	F1$/;"	c
F3	_fzf/src/curses/curses.go	/^	F2$/;"	c
F4	_fzf/src/curses/curses.go	/^	F3$/;"	c
F5	_fzf/src/curses/curses.go	/^	F4$/;"	c
F6	_fzf/src/curses/curses.go	/^	F5$/;"	c
F7	_fzf/src/curses/curses.go	/^	F6$/;"	c
F8	_fzf/src/curses/curses.go	/^	F7$/;"	c
F9	_fzf/src/curses/curses.go	/^	F8$/;"	c
FG	_fzf/src/curses/curses.go	/^	Light256      *ColorTheme$/;"	v
FZF	_fzf/fzf	/^class FZF$/;"	c
FZF	_fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FileByOffset	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:FileByOffset(num)$/;"	f
FileRead	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:FileRead() abort$/;"	f
Fill	_fzf/src/curses/curses.go	/^func (w *Window) Fill(str string) bool {$/;"	f
Filter	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=1 -bang Filter call qf#FilterList(<q-args>, expand("<bang>") == "!" ? 1 : 0)$/;"	c
Find	_fzf/src/cache.go	/^func (cc *ChunkCache) Find(chunk *Chunk, key string) ([]*Item, bool) {$/;"	f
Find	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=+ Find   exe s:Grep(<q-bang>, <q-args>, 'find')$/;"	c
FinishCommit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:FinishCommit() abort$/;"	f
Flake8	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! s:Flake8()  " {{{$/;"	f
Flake8	_vim/plugged/vim-flake8/ftplugin/python_flake8.vim	/^function! Flake8()$/;"	f
FuzzyMatch	_fzf/src/algo/algo.go	/^func FuzzyMatch(caseSensitive bool, forward bool, runes []rune, pattern []rune) Result {$/;"	f
FuzzyMatcher	_fzf/fzf	/^  class FuzzyMatcher < Matcher$/;"	c	class:start_search
GF	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GFInit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:GFInit(...) abort$/;"	f
GOOS	_fzf/src/Makefile	/^		\/bin\/bash -ci 'cd \/fzf\/src; GOOS=android make android-build'$/;"	m
GOOS	_fzf/src/Makefile	/^	GOOS := darwin$/;"	m
GOOS	_fzf/src/Makefile	/^	GOOS := linux$/;"	m
GOPATH	_fzf/src/Makefile	/^GOPATH      := $(shell dirname $(ROOTDIR))\/gopath$/;"	m
Get	_fzf/src/merger.go	/^func (mg *Merger) Get(idx int) *Item {$/;"	f
Get	_fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f
GetBytes	_fzf/src/curses/curses.go	/^func GetBytes() []byte {$/;"	f
GetChar	_fzf/src/curses/curses.go	/^func GetChar() Event {$/;"	f
GetPythonPEPIndent	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! GetPythonPEPIndent(lnum)$/;"	f
Git	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Git(bang, args) abort$/;"	f
GitComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:GitComplete(A, L, P) abort$/;"	f
Grep	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:Grep(bang,args,prg) abort$/;"	f
Grep	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Grep(cmd,bang,arg) abort$/;"	f
GutentagsToggleEnabled	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUnlock	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^command! GutentagsUnlock :call gutentags#delete_lock_files()$/;"	c
HERE	bin/ldif2vcf.py	/^HERE = os.path.dirname(sys.argv[0])$/;"	v
History	_fzf/src/history.go	/^type History struct {$/;"	t
Home	_fzf/src/curses/curses.go	/^	Right$/;"	c
I18NSPHINXOPTS	_vim/plugged/vim-autopep8/docs/Makefile	/^I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS) .$/;"	m
INDEX_WHOLE_PROJECT	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Ilist	_vim/plugged/vim-qlist/plugin/qlist.vim	/^command! -nargs=1 -bar -bang Ilist call <sid>Qlist("i", 1, 0, '<bang>' == '!', <f-args>)$/;"	c
ImageCatcher	bin/chm2pdf.py	/^class ImageCatcher(sgmllib.SGMLParser):$/;"	c
Index	_fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f
Init	_fzf/src/curses/curses.go	/^func Init(theme *ColorTheme, black bool, mouse bool) {$/;"	f
Input	_fzf/src/terminal.go	/^func (t *Terminal) Input() []rune {$/;"	f
Invalid	_fzf/src/curses/curses.go	/^	ESC$/;"	c
IsEmpty	_fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f
IsFull	_fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f
IsTty	_fzf/src/util/util.go	/^func IsTty() bool {$/;"	f
Item	_fzf/src/item.go	/^type Item struct {$/;"	t
ItemBuilder	_fzf/src/chunklist.go	/^type ItemBuilder func([]byte, int) *Item$/;"	t
Job	bin/parallel	/^package Job;$/;"	p
JobQueue	bin/parallel	/^package JobQueue;$/;"	p
JumpInit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:JumpInit(...) abort$/;"	f
Keep	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=1 Keep call qf#FilterList(<q-args>, 0)$/;"	c
LOG_FILE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Left	_fzf/src/curses/curses.go	/^	Down$/;"	c
Len	_fzf/src/item.go	/^func (a ByOrder) Len() int {$/;"	f
Len	_fzf/src/item.go	/^func (a ByRelevance) Len() int {$/;"	f
Len	_fzf/src/item.go	/^func (a ByRelevanceTac) Len() int {$/;"	f
Len	_fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f
Length	_fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f
Less	_fzf/src/item.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f
Less	_fzf/src/item.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f
Less	_fzf/src/item.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f
Less	_fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f
Light256	_fzf/src/curses/curses.go	/^	Dark256       *ColorTheme$/;"	v
Limits::Command	bin/parallel	/^package Limits::Command;$/;"	p
ListLists	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer ListLists call qf#ListLists()$/;"	c
LoadList	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=+ -complete=customlist,qf#CompleteList LoadList    call qf#LoadList(0, <q-args>)$/;"	c
LoadListAdd	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=+ -complete=customlist,qf#CompleteList LoadListAdd call qf#LoadList(1, <q-args>)$/;"	c
Locate	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=+ Locate exe s:Grep(<q-bang>, <q-args>, 'locate')$/;"	c
Log	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Log(cmd, line1, line2, ...) abort$/;"	f
Loop	_fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f
Loop	_fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f
LoopParseArgs	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
MapNextFamily	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MapNextFamily(map,cmd)$/;"	f
Match	_fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk) []*Item {$/;"	f
MatchData	_fzf/fzf	/^    class MatchData$/;"	c	class:start_search.Matcher
MatchItem	_fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item) bool {$/;"	f
MatchRequest	_fzf/src/matcher.go	/^type MatchRequest struct {$/;"	t
Matcher	_fzf/fzf	/^  class Matcher$/;"	c	class:start_search
Matcher	_fzf/src/matcher.go	/^type Matcher struct {$/;"	t
Max	_fzf/src/util/util.go	/^func Max(first int, items ...int) int {$/;"	f
Max32	_fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f
MaxX	_fzf/src/curses/curses.go	/^func MaxX() int {$/;"	f
MaxY	_fzf/src/curses/curses.go	/^func MaxY() int {$/;"	f
Merge	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Merge(cmd, bang, args) abort$/;"	f
Merger	_fzf/src/merger.go	/^type Merger struct {$/;"	t
Min	_fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f
Min32	_fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f
Mkdir	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -bang -nargs=? -complete=dir Mkdir$/;"	c
Mouse	_fzf/src/curses/curses.go	/^	Invalid$/;"	c
MouseEvent	_fzf/fzf	/^  class MouseEvent$/;"	c	class:start_search
MouseEvent	_fzf/src/curses/curses.go	/^type MouseEvent struct {$/;"	t
Move	_fzf/src/curses/curses.go	/^func (w *Window) Move(y int, x int) {$/;"	f
Move	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -nargs=1 -bang -complete=file Move :$/;"	c
Move	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Move(force,destination) abort$/;"	f
Move	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Move(cmd, count, map) abort$/;"	f
MoveAndClear	_fzf/src/curses/curses.go	/^func (w *Window) MoveAndClear(y int, x int) {$/;"	f
MoveComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:MoveComplete(A,L,P) abort$/;"	f
MoveSelectionDown	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionDown(count) abort$/;"	f
MoveSelectionUp	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionUp(count) abort$/;"	f
MultifileQueue	bin/parallel	/^package MultifileQueue;$/;"	p
NewAtomicBool	_fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f
NewChunkCache	_fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f
NewChunkList	_fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f
NewEventBox	_fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f
NewHistory	_fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f
NewMatcher	_fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f
NewMerger	_fzf/src/merger.go	/^func NewMerger(lists [][]*Item, sorted bool, tac bool) *Merger {$/;"	f
NewTerminal	_fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f
NewWindow	_fzf/src/curses/curses.go	/^func NewWindow(top int, left int, width int, height int, border bool) *Window {$/;"	f
NextNonBlankOrCommentLine	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^function! s:NextNonBlankOrCommentLine(lnum)$/;"	f
NextNonBlankOrCommentLine	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^function! s:NextNonBlankOrCommentLine(lnum)$/;"	f
NilClass	_fzf/test/test_go.rb	/^class NilClass$/;"	c
NoColor	_pythonrc.py	/^        NoColor = ''$/;"	v	class:TermColors
NumContainingDefs	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^function! s:NumContainingDefs(lnum)$/;"	f
NumContainingDefs	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^function! s:NumContainingDefs(lnum)$/;"	f
O	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^        nnoremap <buffer> O <CR>:cclose<CR>$/;"	m
O	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^        nnoremap <buffer> O <CR>:lclose<CR>$/;"	m
Offset	_fzf/src/item.go	/^type Offset [3]int32$/;"	t
Options	_fzf/src/options.go	/^type Options struct {$/;"	t
PAPER	_vim/plugged/vim-autopep8/docs/Makefile	/^PAPER         =$/;"	m
PAPEROPT_a4	_vim/plugged/vim-autopep8/docs/Makefile	/^PAPEROPT_a4     = -D latex_paper_size=a4$/;"	m
PAPEROPT_letter	_vim/plugged/vim-autopep8/docs/Makefile	/^PAPEROPT_letter = -D latex_paper_size=letter$/;"	m
PARSER	bin/ldif2vcf.py	/^    PARSER = OptionParser(usage = USAGE_ , version = "0.101017-0")$/;"	v
PAUSE_BEFORE_EXIT	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PROJECT_ROOT	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PageLister	bin/chm2pdf.py	/^class PageLister(sgmllib.SGMLParser):$/;"	c
PairFor	_fzf/src/curses/curses.go	/^func PairFor(fg int, bg int) int {$/;"	f
ParseArgs	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	_fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f
ParseRange	_fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f
PassMerger	_fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f
Pattern	_fzf/src/pattern.go	/^type Pattern struct {$/;"	t
Peek	_fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f
PgDn	_fzf/src/curses/curses.go	/^	PgUp$/;"	c
PgUp	_fzf/src/curses/curses.go	/^	Del$/;"	c
PlaceMarkers	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! s:PlaceMarkers(results)  " {{{$/;"	f
PrefixMatch	_fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, forward bool, runes []rune, pattern []rune) Result {$/;"	f
Print	_fzf/src/curses/curses.go	/^func (w *Window) Print(text string) {$/;"	f
Push	_fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f
Qlist	_vim/plugged/vim-qlist/plugin/qlist.vim	/^function! s:Qlist(command, selection, start_at_cursor, force, ...)$/;"	f
R	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> R :Dirvish %<CR>$/;"	m
RELEASE32	_fzf/src/Makefile	/^RELEASE32   := fzf-$(VERSION)-$(GOOS)_386$/;"	m
RELEASE64	_fzf/src/Makefile	/^RELEASE64   := fzf-$(VERSION)-$(GOOS)_amd64$/;"	m
RELEASEARM7	_fzf/src/Makefile	/^RELEASEARM7 := fzf-$(VERSION)-$(GOOS)_arm7$/;"	m
ROOTDIR	_fzf/src/Makefile	/^ROOTDIR     := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))$/;"	m
Range	_fzf/src/tokenizer.go	/^type Range struct {$/;"	t
Rank	_fzf/src/item.go	/^func (item *Item) Rank(cache bool) [5]int32 {$/;"	f
ReadSource	_fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f
Reader	_fzf/src/reader.go	/^type Reader struct {$/;"	t
RecordColQueue	bin/parallel	/^package RecordColQueue;$/;"	p
RecordQueue	bin/parallel	/^package RecordQueue;$/;"	p
Refresh	_fzf/src/curses/curses.go	/^func (w *Window) Refresh() {$/;"	f
Refresh	_fzf/src/curses/curses.go	/^func Refresh() {$/;"	f
RehighlightBlame	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:RehighlightBlame() abort$/;"	f
Reject	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=1 Reject call qf#FilterList(<q-args>, 1)$/;"	c
RemoteComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:RemoteComplete(A, L, P) abort$/;"	f
Remove	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -bang Remove$/;"	c
Remove	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Remove(force) abort$/;"	f
RemoveList	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=* -bang -complete=customlist,qf#CompleteList RemoveList call qf#RemoveList(expand("<bang>") == "!" ? 1 : 0, <q-args>)$/;"	c
Rename	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -nargs=1 -bang -complete=custom,s:Rename_complete Rename$/;"	c
Rename_complete	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:Rename_complete(A, L, P) abort$/;"	f
ReplaceCmd	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
Reset	_fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool) {$/;"	f
Restore	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer Restore call qf#RestoreList()$/;"	c
Result	_fzf/src/algo/algo.go	/^type Result struct {$/;"	t
RevisionComplete	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:RevisionComplete(A, L, P) abort$/;"	f
Right	_fzf/src/curses/curses.go	/^	Left$/;"	c
Run	_fzf/src/core.go	/^func Run(opts *Options) {$/;"	f
Rune	_fzf/src/curses/curses.go	/^const ($/;"	c
SECRET_KEY	_pythonrc.py	/^    def SECRET_KEY():$/;"	f
SHELL	_fzf/src/Makefile	/^	SHELL=\/bin\/sh go test -v .\/...$/;"	m
SLeft	_fzf/src/curses/curses.go	/^	End$/;"	c
SOURCES	_fzf/src/Makefile	/^SOURCES     := $(wildcard *.go *\/*.go)$/;"	m
SPHINXBUILD	_vim/plugged/vim-autopep8/docs/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXOPTS	_vim/plugged/vim-autopep8/docs/Makefile	/^SPHINXOPTS    =$/;"	m
SRCDIR	_fzf/src/Makefile	/^SRCDIR      := $(GOPATH)\/src\/github.com\/junegunn\/fzf\/src$/;"	m
SRight	_fzf/src/curses/curses.go	/^	SLeft$/;"	c
SSHLogin	bin/parallel	/^package SSHLogin;$/;"	p
SaveList	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=? -complete=customlist,qf#CompleteList SaveList    call qf#SaveList(0, <q-args>)$/;"	c
SaveListAdd	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^command! -buffer -nargs=? -complete=customlist,qf#CompleteList SaveListAdd call qf#SaveList(1, <q-args>)$/;"	c
Semaphore	bin/parallel	/^package Semaphore;$/;"	p
Set	_fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f
Set	_fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f
SetOption	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^function! s:SetOption(name,default)$/;"	f
Setup	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! s:Setup()  " {{{$/;"	f
Shdo	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^command! -bar -nargs=* -complete=file -range Shdo call dirvish#shdo(<line1>, <line2>, <q-args>)$/;"	c
Shell	_fzf/test/test_go.rb	/^class Shell$/;"	c
ShowUsage	_vim/plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	_vim/plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
SimpylFold	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^function! SimpylFold(lnum)$/;"	f
SimpylFold	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^function! SimpylFold(lnum)$/;"	f
SimpylFoldText	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^function! SimpylFoldText()$/;"	f
SimpylFoldText	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^function! SimpylFoldText()$/;"	f
Snapshot	_fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f
SolarizedHiTrail	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^augroup SolarizedHiTrail$/;"	a
SolarizedHiTrail	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^function! s:SolarizedHiTrail()$/;"	f
SolarizedMenu	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^function! SolarizedMenu()$/;"	f
SolarizedOptions	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    command SolarizedOptions :call s:SolarizedOptions()$/;"	c
SolarizedOptions	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^function! s:SolarizedOptions()$/;"	f
StageDiff	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StageNext	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageNext(count) abort$/;"	f
StagePatch	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StagePrevious	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StagePrevious(count) abort$/;"	f
StageReloadSeek	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageReloadSeek(target,lnum1,lnum2) abort$/;"	f
StageToggle	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
StageUndo	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:StageUndo() abort$/;"	f
Status	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Status() abort$/;"	f
String	_fzf/fzf	/^  class String$/;"	c
String	_fzf/fzf	/^class String$/;"	c
StringPtr	_fzf/src/item.go	/^func (item *Item) StringPtr(stripAnsi bool) *string {$/;"	f
SudoEdit	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=? SudoEdit$/;"	c
SudoEditInit	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:SudoEditInit() abort$/;"	f
SudoReadCmd	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:SudoReadCmd() abort$/;"	f
SudoSetup	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:SudoSetup(file) abort$/;"	f
SudoWrite	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar SudoWrite$/;"	c
SudoWriteCmd	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:SudoWriteCmd() abort$/;"	f
SuffixMatch	_fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, forward bool, input []rune, pattern []rune) Result {$/;"	f
Swap	_fzf/src/item.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f
Swap	_fzf/src/item.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f
Swap	_fzf/src/item.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f
Swap	_fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f
TAGS_FILE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
Tab	_fzf/src/curses/curses.go	/^	CtrlH$/;"	c
TermColors	_pythonrc.py	/^    class TermColors(dict):$/;"	c
Terminal	_fzf/src/terminal.go	/^type Terminal struct {$/;"	t
TestAtomicBool	_fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f
TestBase	_fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	_fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c
TestBind	_fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f
TestCacheKey	_fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f
TestCaseSensitivity	_fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f
TestChunkCache	_fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f
TestChunkList	_fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f
TestColorOffset	_fzf/src/item_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f
TestColorSpec	_fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f
TestContrain	_fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f
TestDefaultCtrlNP	_fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f
TestDelimiterRegex	_fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f
TestDelimiterRegexRegex	_fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f
TestDelimiterRegexString	_fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f
TestEmptyMerger	_fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f
TestEmptyPattern	_fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f
TestEqual	_fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f
TestEventBox	_fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f
TestExact	_fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f
TestExactMatchNaive	_fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f
TestExactMatchNaiveBackward	_fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f
TestExtractColor	_fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f
TestFish	_fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c
TestFuzzyMatch	_fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f
TestFuzzyMatchBackward	_fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f
TestGoFZF	_fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestHistory	_fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f
TestIrrelevantNth	_fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f
TestItemRank	_fzf/src/item_test.go	/^func TestItemRank(t *testing.T) {$/;"	f
TestMax	_fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f
TestMergerSorted	_fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f
TestMergerUnsorted	_fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f
TestOffsetSort	_fzf/src/item_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f
TestOrigTextAndTransformed	_fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f
TestPairFor	_fzf/src/curses/curses_test.go	/^func TestPairFor(t *testing.T) {$/;"	f
TestParseKeys	_fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f
TestParseKeysWithComma	_fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f
TestParseNilTheme	_fzf/src/options_test.go	/^func TestParseNilTheme(t *testing.T) {$/;"	f
TestParseRange	_fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f
TestParseTermsEmpty	_fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f
TestParseTermsExtended	_fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f
TestParseTermsExtendedExact	_fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f
TestPrefixMatch	_fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f
TestRankComparison	_fzf/src/item_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f
TestReadFromCommand	_fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f
TestShell	_fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	_fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f
TestSuffixMatch	_fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f
TestToggle	_fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f
TestTokenize	_fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f
TestTransform	_fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f
TestTransformIndexOutOfBounds	_fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f
TestTrimLen	_fzf/src/util/util_test.go	/^func TestTrimLen(t *testing.T) {$/;"	f
TestZsh	_fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c
TimeoutQueue	bin/parallel	/^package TimeoutQueue;$/;"	p
Tmux	_fzf/test/test_go.rb	/^class Tmux$/;"	c
TogBG	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^function! s:TogBG()$/;"	f
ToggleBG	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^    command ToggleBG :call s:TogBG()$/;"	c
ToggleBackground	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^function! ToggleBackground()$/;"	f
Token	_fzf/src/tokenizer.go	/^type Token struct {$/;"	t
Tokenize	_fzf/src/tokenizer.go	/^func Tokenize(runes []rune, delimiter Delimiter) []Token {$/;"	f
ToolBar.togglebg	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^inoremenu <script> ToolBar.togglebg <ESC><SID>TogBG<ESC>a$/;"	m
ToolBar.togglebg	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^nnoremenu <script> ToolBar.togglebg <SID>TogBG$/;"	m
ToolBar.togglebg	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^vnoremenu <script> ToolBar.togglebg <ESC><SID>TogBG<ESC>gv$/;"	m
Transform	_fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f
Transform	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:Transform(algorithm,type)$/;"	f
TransformOpfunc	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformOpfunc(type)$/;"	f
TransformSetup	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:TransformSetup(algorithm)$/;"	f
TrimLen	_fzf/src/util/util.go	/^func TrimLen(runes []rune) int {$/;"	f
TrimRight	_fzf/src/util/util.go	/^func TrimRight(runes []rune) []rune {$/;"	f
UNAME_M	_fzf/src/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNAME_S	_fzf/src/Makefile	/^UNAME_S := $(shell uname -s)$/;"	m
UPDATED_SOURCE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
USAGE_	bin/ldif2vcf.py	/^fichier au format ldif vers le format vcf pour roundcube"$/;"	v
Undotree	_vim/plugged/undotree/plugin/undotree.vim	/^augroup Undotree$/;"	a
UndotreeFocus	_vim/plugged/undotree/plugin/undotree.vim	/^command! -n=0 -bar UndotreeFocus    :call UndotreeFocus()$/;"	c
UndotreeFocus	_vim/plugged/undotree/plugin/undotree.vim	/^function! UndotreeFocus()$/;"	f
UndotreeHide	_vim/plugged/undotree/plugin/undotree.vim	/^command! -n=0 -bar UndotreeHide     :call UndotreeHide()$/;"	c
UndotreeHide	_vim/plugged/undotree/plugin/undotree.vim	/^function! UndotreeHide()$/;"	f
UndotreeIsVisible	_vim/plugged/undotree/plugin/undotree.vim	/^function! UndotreeIsVisible()$/;"	f
UndotreeShow	_vim/plugged/undotree/plugin/undotree.vim	/^command! -n=0 -bar UndotreeShow     :call UndotreeShow()$/;"	c
UndotreeShow	_vim/plugged/undotree/plugin/undotree.vim	/^function! UndotreeShow()$/;"	f
UndotreeToggle	_vim/plugged/undotree/plugin/undotree.vim	/^    command! -n=0 -bar UndotreeToggle :echoerr "undotree.vim needs Vim version >= 7.3"$/;"	c
UndotreeToggle	_vim/plugged/undotree/plugin/undotree.vim	/^    command! -n=0 -bar UndotreeToggle :echoerr "undotree.vim needs vim7.3 with patch005 applied."$/;"	c
UndotreeToggle	_vim/plugged/undotree/plugin/undotree.vim	/^command! -n=0 -bar UndotreeToggle   :call UndotreeToggle()$/;"	c
UndotreeToggle	_vim/plugged/undotree/plugin/undotree.vim	/^function! UndotreeToggle()$/;"	f
UndotreeUpdate	_vim/plugged/undotree/plugin/undotree.vim	/^function! UndotreeUpdate()$/;"	f
UnimpairedMapTransform	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! UnimpairedMapTransform(algorithm, key)$/;"	f
Unlink	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -bang Unlink$/;"	c
Unlock	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
UnplaceMarkers	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! s:UnplaceMarkers()  " {{{$/;"	f
Unwatch	_fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f
Up	_fzf/src/curses/curses.go	/^	PgDn$/;"	c
UpdateCount	_fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool) {$/;"	f
UpdateHeader	_fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f
UpdateList	_fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger) {$/;"	f
UpdateProgress	_fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f
Usage	_vim/plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	_vim/plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
VERSION	_fzf/src/Makefile	/^VERSION     := $(shell awk -F= '\/version =\/ {print $$2}' constants.go | tr -d "\\" ")$/;"	m
W	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^  command! -bar W Wall$/;"	c
WELCOME	_pythonrc.py	/^    WELCOME=''$/;"	v
Wait	_fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f
WaitFor	_fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f
Wall	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^command! -bar -nargs=? Wall$/;"	c
Wall	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:Wall() abort$/;"	f
Warnings	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function s:Warnings()$/;"	f
Watch	_fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f
Window	_fzf/src/curses/curses.go	/^type Window struct {$/;"	t
Window.Toggle\	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^inoremenu <script> Window.Toggle\\ Background <ESC><SID>TogBG<ESC>a$/;"	m
Window.Toggle\	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^nnoremenu <script> Window.Toggle\\ Background <SID>TogBG$/;"	m
Window.Toggle\	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^vnoremenu <script> Window.Toggle\\ Background <ESC><SID>TogBG<ESC>gv$/;"	m
Wq	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Wq(force,...) abort$/;"	f
Write	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
[<Space>	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap [<Space> <Plug>unimpairedBlankUp$/;"	m
[D	_vim/plugged/vim-qlist/plugin/qlist.vim	/^    nmap <silent> [D <Plug>QlistDefinefromtop$/;"	m
[I	_vim/plugged/vim-qlist/plugin/qlist.vim	/^    nmap <silent> [I <Plug>QlistIncludefromtop$/;"	m
[e	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap [e <Plug>unimpairedMoveUp$/;"	m
[f	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap [f <Plug>unimpairedDirectoryPrevious$/;"	m
[n	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap [n <Plug>unimpairedContextPrevious$/;"	m
[n	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^omap [n <Plug>unimpairedContextPrevious$/;"	m
[o	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap [o <Plug>unimpairedOPrevious$/;"	m
[ob	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap [ob :set background=light<CR>$/;"	m
[od	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap [od :diffthis<CR>$/;"	m
[ov	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap [ov :set virtualedit+=all<CR>$/;"	m
[ox	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap [ox :set cursorline cursorcolumn<CR>$/;"	m
[p	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap [p <Plug>unimpairedPutAbove$/;"	m
\>	_vim/ftplugin/xml.vim	/^inoremap \\> ><CR>$/;"	m
]<Space>	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]<Space> <Plug>unimpairedBlankDown$/;"	m
]D	_vim/plugged/vim-qlist/plugin/qlist.vim	/^    nmap <silent> ]D <Plug>QlistDefinefromhere$/;"	m
]I	_vim/plugged/vim-qlist/plugin/qlist.vim	/^    nmap <silent> ]I <Plug>QlistIncludefromhere$/;"	m
]e	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]e <Plug>unimpairedMoveDown$/;"	m
]f	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]f <Plug>unimpairedDirectoryNext$/;"	m
]n	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]n <Plug>unimpairedContextNext$/;"	m
]n	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^omap ]n <Plug>unimpairedContextNext$/;"	m
]o	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]o <Plug>unimpairedONext$/;"	m
]ob	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap ]ob :set background=dark<CR>$/;"	m
]od	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap ]od :diffoff<CR>$/;"	m
]ov	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap ]ov :set virtualedit-=all<CR>$/;"	m
]ox	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap ]ox :set nocursorline nocursorcolumn<CR>$/;"	m
]p	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nmap ]p <Plug>unimpairedPutBelow$/;"	m
__DEBUGGING__	bin/parallel	/^sub __DEBUGGING__ {}$/;"	s
__FILEHANDLES__	bin/parallel	/^sub __FILEHANDLES__ {}$/;"	s
__GENERIC_COMMON_FUNCTION__	bin/parallel	/^sub __GENERIC_COMMON_FUNCTION__ {}$/;"	s
__OBJECT_ORIENTED_PARTS__	bin/parallel	/^sub __OBJECT_ORIENTED_PARTS__ {}$/;"	s
__PARSE_OPTIONS__	bin/parallel	/^sub __PARSE_OPTIONS__ {}$/;"	s
__PIPE_MODE__	bin/parallel	/^sub __PIPE_MODE__ {}$/;"	s
__QUOTING_ARGUMENTS_FOR_SHELL__	bin/parallel	/^sub __QUOTING_ARGUMENTS_FOR_SHELL__ {}$/;"	s
__REMOTE_SSH__	bin/parallel	/^sub __REMOTE_SSH__ {}$/;"	s
__RUNNING_THE_JOBS_AND_PRINTING_PROGRESS__	bin/parallel	/^sub __RUNNING_THE_JOBS_AND_PRINTING_PROGRESS__ {}$/;"	s
__SEM_MODE__	bin/parallel	/^sub __SEM_MODE__ {}$/;"	s
__SIGNAL_HANDLING__	bin/parallel	/^sub __SIGNAL_HANDLING__ {}$/;"	s
__USAGE__	bin/parallel	/^sub __USAGE__ {}$/;"	s
__fsel	_fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	_fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_generic_path_completion	_fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	_fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	_fzf/shell/key-bindings.bash	/^__fzf_history__() ($/;"	f
__fzf_select__	_fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzf_select_tmux__	_fzf/shell/key-bindings.bash	/^__fzf_select_tmux__() {$/;"	f
__fzf_use_tmux__	_fzf/shell/key-bindings.bash	/^__fzf_use_tmux__() {$/;"	f
__fzfcmd	_fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	_fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable):$/;"	m	class:layerfx_reapply_effects
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, color, opacity, contour, noise, mode, source, choke, size, merge):$/;"	m	class:layerfx_inner_glow
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, color, opacity, contour, noise, mode, source, choke, size, offsetangle, offsetdist, merge):$/;"	m	class:layerfx_inner_shadow
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, color, opacity, contour, noise, mode, spread, size, knockout, merge):$/;"	m	class:layerfx_outer_glow
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, color, opacity, contour, noise, mode, spread, size, offsetangle, offsetdist, knockout, merge):$/;"	m	class:layerfx_drop_shadow
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, color, opacity, mode, merge):$/;"	m	class:layerfx_color_overlay
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, color, opacity, mode, offsetangle, offsetdist, size, contour, invert, merge):$/;"	m	class:layerfx_satin
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, fill, opacity, mode, size, position, merge):$/;"	m	class:layerfx_stroke
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, gradient, gradienttype, repeat, reverse, opacity, mode, centerx, centery, angle, width, merge):$/;"	m	class:layerfx_gradient_overlay
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, pattern, opacity, mode, scale, interpolation_type, merge):$/;"	m	class:layerfx_pattern_overlay
__init__	_gimp/plug-ins/layerfx.py	/^  def __init__(self, runmode, img, drawable, style, depth, direction, size, soften, angle, altitude, glosscontour, highlightcolor, highlightmode, highlightopacity, shadowcolor, shadowmode, shadowopacity, surfacecontour, use_texture, pattern, scale, tex_depth, invert, merge):$/;"	m	class:layerfx_bevel_emboss
__init__	_pythonrc.py	/^            def __init__(self):$/;"	m	class:SECRET_KEY.DjangoModels
__init__	_pythonrc.py	/^        def __init__(self):$/;"	m	class:Completer
__init__	_pythonrc.py	/^        def __init__(self):$/;"	m	class:TermColors
__init__	_pythonrc.py	/^        def __init__(self, *args, **kwargs):$/;"	m	class:EditableBufferInteractiveConsole
_base	_pythonrc.py	/^        _base  = '\\001\\033[%sm\\002'$/;"	v	class:TermColors
_buf	_fzf/src/curses/curses.go	/^var ($/;"	v
_c	_pythonrc.py	/^    _c = TermColors()$/;"	v
_cache	_fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v
_clickY	_fzf/src/curses/curses.go	/^	_prevDownTime time.Time$/;"	v
_color	_fzf/src/curses/curses.go	/^	_in           *os.File$/;"	v
_colorMap	_fzf/src/curses/curses.go	/^	_color        func(int, bool) C.int$/;"	v
_fzf_compgen_dir	_fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	_fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	_fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	_fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	_fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	_fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	_fzf/shell/completion.bash	/^_fzf_complete_export() {$/;"	f
_fzf_complete_export	_fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	_fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_ssh	_fzf/shell/completion.bash	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_ssh	_fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	_fzf/shell/completion.bash	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_telnet	_fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	_fzf/shell/completion.bash	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unalias	_fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	_fzf/shell/completion.bash	/^_fzf_complete_unset() {$/;"	f
_fzf_complete_unset	_fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_defc	_fzf/shell/completion.bash	/^_fzf_defc() {$/;"	f
_fzf_dir_completion	_fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	_fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	_fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	_fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	_fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_opts_completion	_fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_orig_completion_filter	_fzf/shell/completion.bash	/^_fzf_orig_completion_filter() {$/;"	f
_fzf_path_completion	_fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	_fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_in	_fzf/src/curses/curses.go	/^	_buf          []byte$/;"	v
_patternCache	_fzf/src/pattern.go	/^var ($/;"	v
_prevDownTime	_fzf/src/curses/curses.go	/^	_colorMap     map[int]int$/;"	v
_runeWidths	_fzf/src/terminal.go	/^var _runeWidths = make(map[rune]int)$/;"	v
_screen	_fzf/src/curses/curses.go	/^	_clickY       []int$/;"	v
_spinner	_fzf/src/terminal.go	/^var _spinner = []string{`-`, `\\`, `|`, `\/`, `-`, `\\`, `|`, `\/`}$/;"	v
_splitRegex	_fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v
_tabStop	_fzf/src/terminal.go	/^var _tabStop int$/;"	v
acquire	bin/parallel	/^sub acquire {$/;"	s
acquire_semaphore	bin/parallel	/^sub acquire_semaphore {$/;"	s
actAbort	_fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c
actAccept	_fzf/src/terminal.go	/^	actAbort$/;"	c
actBackwardChar	_fzf/src/terminal.go	/^	actAccept$/;"	c
actBackwardDeleteChar	_fzf/src/terminal.go	/^	actBackwardChar$/;"	c
actBackwardKillWord	_fzf/src/terminal.go	/^	actYank$/;"	c
actBackwardWord	_fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c
actBeginningOfLine	_fzf/src/terminal.go	/^	actMouse$/;"	c
actCancel	_fzf/src/terminal.go	/^	actBackwardWord$/;"	c
actClearScreen	_fzf/src/terminal.go	/^	actCancel$/;"	c
actDeleteChar	_fzf/src/terminal.go	/^	actClearScreen$/;"	c
actDeleteCharEOF	_fzf/src/terminal.go	/^	actDeleteChar$/;"	c
actDeselectAll	_fzf/src/terminal.go	/^	actSelectAll$/;"	c
actDown	_fzf/src/terminal.go	/^	actToggleOut$/;"	c
actEndOfLine	_fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c
actExecute	_fzf/src/terminal.go	/^	actNextHistory$/;"	c
actExecuteMulti	_fzf/src/terminal.go	/^	actExecute$/;"	c
actForwardChar	_fzf/src/terminal.go	/^	actEndOfLine$/;"	c
actForwardWord	_fzf/src/terminal.go	/^	actForwardChar$/;"	c
actIgnore	_fzf/src/terminal.go	/^const ($/;"	c
actInvalid	_fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c
actJump	_fzf/src/terminal.go	/^	actPageDown$/;"	c
actJumpAccept	_fzf/src/terminal.go	/^	actJump$/;"	c
actKillLine	_fzf/src/terminal.go	/^	actForwardWord$/;"	c
actKillWord	_fzf/src/terminal.go	/^	actKillLine$/;"	c
actMouse	_fzf/src/terminal.go	/^	actRune$/;"	c
actNextHistory	_fzf/src/terminal.go	/^	actPreviousHistory$/;"	c
actPageDown	_fzf/src/terminal.go	/^	actPageUp$/;"	c
actPageUp	_fzf/src/terminal.go	/^	actUp$/;"	c
actPreviousHistory	_fzf/src/terminal.go	/^	actTogglePreview$/;"	c
actPrintQuery	_fzf/src/terminal.go	/^	actJumpAccept$/;"	c
actRune	_fzf/src/terminal.go	/^	actInvalid$/;"	c
actSelectAll	_fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c
actToggle	_fzf/src/terminal.go	/^	actDeselectAll$/;"	c
actToggleAll	_fzf/src/terminal.go	/^	actToggle$/;"	c
actToggleDown	_fzf/src/terminal.go	/^	actToggleAll$/;"	c
actToggleIn	_fzf/src/terminal.go	/^	actToggleUp$/;"	c
actToggleOut	_fzf/src/terminal.go	/^	actToggleIn$/;"	c
actTogglePreview	_fzf/src/terminal.go	/^	actToggleSort$/;"	c
actToggleSort	_fzf/src/terminal.go	/^	actPrintQuery$/;"	c
actToggleUp	_fzf/src/terminal.go	/^	actToggleDown$/;"	c
actUnixLineDiscard	_fzf/src/terminal.go	/^	actKillWord$/;"	c
actUnixWordRubout	_fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c
actUp	_fzf/src/terminal.go	/^	actDown$/;"	c
actYank	_fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c
actionType	_fzf/src/terminal.go	/^type actionType int$/;"	t
add_failed	bin/parallel	/^sub add_failed {$/;"	s
add_failed_here	bin/parallel	/^sub add_failed_here {$/;"	s
add_methods	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_over_layer	_gimp/plug-ins/layerfx.py	/^  def add_over_layer(self, newlayer, oldlayer):$/;"	m	class:layerfx_base
add_under_layer	_gimp/plug-ins/layerfx.py	/^  def add_under_layer(self, newlayer, oldlayer):$/;"	m	class:layerfx_base
addstr_safe	_fzf/fzf	/^  def addstr_safe str$/;"	f	class:usage
algo	_fzf/src/algo/algo.go	/^package algo$/;"	p
algo	_fzf/src/algo/algo_test.go	/^package algo$/;"	p
ansiOffset	_fzf/src/ansi.go	/^type ansiOffset struct {$/;"	t
ansiRegex	_fzf/src/ansi.go	/^var ansiRegex *regexp.Regexp$/;"	v
ansiState	_fzf/src/ansi.go	/^type ansiState struct {$/;"	t
anum	bin/waitkill.sh	/^anum() {$/;"	f
append	_fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f
append_line	_fzf/install	/^append_line() {$/;"	f
append_ul	_vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
apply_contour	_gimp/plug-ins/layerfx.py	/^  def apply_contour(self, drawable, channel, contour):$/;"	m	class:layerfx_base
apply_noise	_gimp/plug-ins/layerfx.py	/^  def apply_noise(self, drawable, srclayer, noise, uselayer):$/;"	m	class:layerfx_base
arg_number	bin/parallel	/^sub arg_number {$/;"	s
args_as_dirname	bin/parallel	/^sub args_as_dirname {$/;"	s
args_as_string	bin/parallel	/^sub args_as_string {$/;"	s
ask	_fzf/install	/^ask() {$/;"	f
ask	_vim/autoload/plug.vim	/^function! s:ask(message)$/;"	f
assert	_fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f
assertMatch	_fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun func(bool, bool, []rune, []rune) Result, caseSensitive, forward bool, input, pattern string, sidx int32, eidx int32, bonus int32) {$/;"	f
assign_name	_vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
assoc	_vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
atof	_fzf/src/options.go	/^func atof(str string) float64 {$/;"	f
atoi	_fzf/src/options.go	/^func atoi(str string) int {$/;"	f
atomic_link_if_count_less_than	bin/parallel	/^sub atomic_link_if_count_less_than {$/;"	s
attrColored	_fzf/src/curses/curses.go	/^func attrColored(pair int, bold bool) C.int {$/;"	f
attrMono	_fzf/src/curses/curses.go	/^func attrMono(pair int, bold bool) C.int {$/;"	f
awkBlack	_fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c
awkNil	_fzf/src/tokenizer.go	/^const ($/;"	c
awkTokenizer	_fzf/src/tokenizer.go	/^func awkTokenizer(input []rune) ([][]rune, int) {$/;"	f
awkWhite	_fzf/src/tokenizer.go	/^	awkBlack$/;"	c
b:control_statement	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except)>'$/;"	v
b:control_statement	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^    let b:control_statement = '\\v^\\s*(class|def|if|while|with|for|except|cdef|cpdef)>'$/;"	v
b:current_syntax	_vim/plugged/vim-dirvish/syntax/dirvish.vim	/^let b:current_syntax = "dirvish"$/;"	v
b:def_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^    let b:def_regex = '\\v^\\s*%(%(class|%(async\\s+)?def|cdef|cpdef|ctypedef)\\s+\\w+)|cdef\\s*:\\s*'$/;"	v
b:def_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^    let b:def_regex = '\\v^\\s*%(class|%(async\\s+)?def)\\s+\\w+|if\\s*__name__\\s*\\=\\=\\s*%("__main__"|''__main__'')\\s*:\\s*'$/;"	v
b:def_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^    let b:def_regex = '\\v^\\s*%(%(class|%(async\\s+)?def|cdef|cpdef|ctypedef)\\s+\\w+)|cdef\\s*:\\s*'$/;"	v
b:def_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^    let b:def_regex = '\\v^\\s*%(class|%(async\\s+)?def)\\s+\\w+|if\\s*__name__\\s*\\=\\=\\s*%("__main__"|''__main__'')\\s*:\\s*'$/;"	v
b:did_indent	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let b:did_indent = 1$/;"	v
b:isLoc	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^let b:isLoc = len(getloclist(0)) > 0 ? 1 : 0$/;"	v
b:loaded_SimpylFold	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let b:loaded_SimpylFold = 1$/;"	v
b:loaded_SimpylFold	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let b:loaded_SimpylFold = 1$/;"	v
b:loaded_autopep8_ftplugin	_vim/plugged/vim-autopep8/ftplugin/python_autopep8.vim	/^let b:loaded_autopep8_ftplugin=1$/;"	v
b:loaded_flake8_ftplugin	_vim/plugged/vim-flake8/ftplugin/python_flake8.vim	/^let b:loaded_flake8_ftplugin=1$/;"	v
b:undo_ftplugin	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^let b:undo_ftplugin = "setl fo< com< ofu<"$/;"	v
bang	_vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
bar	_vim/autoload/plug.vim	/^function! s:bar()$/;"	f
bash	_fzf/test/test_go.rb	/^    def bash$/;"	f	class:Shell
basicMatch	_fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item) (Offset, int32) {$/;"	f
beep	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
bibtex	bin/parallel	/^sub bibtex {$/;"	s
binary_find_max_length	bin/parallel	/^sub binary_find_max_length {$/;"	s
buf_close	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_close() abort$/;"	f
buf_init	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_init() abort$/;"	f
buf_isvalid	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_isvalid(bnr) abort$/;"	f
buf_render	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_render(dir, lastpath) abort$/;"	f
buffer	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer(...) abort$/;"	f
buffer_commit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
buffer_compare_age	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
buffer_containing_commit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
buffer_expand	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
buffer_getline	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getvar	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_name	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_path	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
buffer_repo	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_rev	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
buffer_setvar	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_sha1	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
buffer_spec	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:buffer_spec() dict abort$/;"	f
buffer_type	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
buffer_up	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:buffer_up(...) dict abort$/;"	f
bufwin_do	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:bufwin_do(cmd, bname) abort$/;"	f
build	bin/edown.sh	/^function build() {$/;"	f
buildEmptyRank	_fzf/src/item.go	/^func buildEmptyRank(index int32) [5]int32 {$/;"	f
buildLists	_fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]*Item, []*Item) {$/;"	f
build_delim_regex	_fzf/fzf	/^  def FZF.build_delim_regex delim$/;"	F
burp	_fzf/fzf	/^  def burp string, orig = nil$/;"	f
byBegin	_fzf/src/options.go	/^	byLength$/;"	c
byEnd	_fzf/src/options.go	/^	byBegin$/;"	c
byLength	_fzf/src/options.go	/^	byMatchLen criterion = iota$/;"	c
byMatchLen	_fzf/src/options.go	/^const ($/;"	c
byTimeOrder	_fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t
c	_pythonrc.py	/^    c = Completer()$/;"	v
c	_pythonrc.py	/^    c = EditableBufferInteractiveConsole(locals=locals())$/;"	v
cS	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cache_project_root	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
cacheable	_fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f
calc_size	_fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
calculateSize	_fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, margin int, minSize int) int {$/;"	f
call	_fzf/fzf	/^  def call(name, method, *args)$/;"	f	class:FZF
callback	_fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
can_diffoff	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
capture	_fzf/test/test_go.rb	/^  def capture pane = 0$/;"	f	class:Tmux
cfile	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:cfile() abort$/;"	f
changesurround	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
charClass	_fzf/src/algo/algo.go	/^type charClass int$/;"	t
charLetter	_fzf/src/algo/algo.go	/^	charUpper$/;"	c
charLower	_fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c
charNonWord	_fzf/src/algo/algo.go	/^const ($/;"	c
charNumber	_fzf/src/algo/algo.go	/^	charLetter$/;"	c
charUpper	_fzf/src/algo/algo.go	/^	charLower$/;"	c
check_binary	_fzf/install	/^check_binary() {$/;"	f
check_ruby	_vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
checkout	_vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
chsh	_vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
chunkSize	_fzf/src/constants.go	/^	progressMinDuration = 200 * time.Millisecond$/;"	c
clean	_vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
cleanup	_fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
cleanup	bin/parallel	/^sub cleanup {$/;"	s
cleanup_basefile	bin/parallel	/^sub cleanup_basefile {$/;"	s
clearChunkCache	_fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f
clearPatternCache	_fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f
closematch	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
cmd	_fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
cmd_callback	_fzf/plugin/fzf.vim	/^function! s:cmd_callback(lines) abort$/;"	f
cob	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap cob :set background=<C-R>=&background == 'dark' ? 'light' : 'dark'<CR><CR>$/;"	m
cod	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap cod :<C-R>=&diff ? 'diffoff' : 'diffthis'<CR><CR>$/;"	m
colDefault	_fzf/src/curses/curses.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c
colUndefined	_fzf/src/curses/curses.go	/^	colDefault          = -1$/;"	c
collect	_fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
color	_fzf/fzf	/^      def self.color sym, bold = false$/;"	F	class:init_screen
colorOffset	_fzf/src/item.go	/^type colorOffset struct {$/;"	t
colorOffsets	_fzf/src/item.go	/^func (item *Item) colorOffsets(color int, bold bool, current bool) []colorOffset {$/;"	f
colored	_fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f
colors_name	_vim/plugged/flattened/colors/flattened_dark.vim	/^let colors_name = 'flattened_dark'$/;"	v
colors_name	_vim/plugged/flattened/colors/flattened_light.vim	/^let colors_name = 'flattened_light'$/;"	v
colors_name	_vim/plugged/lanox-vim-theme/colors/lanox.vim	/^let colors_name = "lanox"$/;"	v
colors_name	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let colors_name = "solarized"$/;"	v
command	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:command(definition) abort$/;"	f
compareRanks	_fzf/src/item.go	/^func compareRanks(irank [5]int32, jrank [5]int32, tac bool) bool {$/;"	f
compare_git_uri	_vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
compute_max_loadavg	bin/parallel	/^sub compute_max_loadavg {$/;"	s
compute_number_of_processes	bin/parallel	/^sub compute_number_of_processes {$/;"	s
cond	_gimp/plug-ins/layerfx.py	/^  def cond(self, b, t = 1, f = 0):$/;"	m	class:layerfx_base
configured_tree	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:configured_tree(git_dir) abort$/;"	f
confirm	_fzf/uninstall	/^confirm() {$/;"	f
connection	bin/dropbox_set_lansync.py	/^connection = GetDbConnection(dbfile)$/;"	v
constrain	_fzf/fzf	/^  def constrain offset, cursor, count, height$/;"	f	class:start_search
constrain	_fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f
context_replace_placeholders	bin/parallel	/^sub context_replace_placeholders {$/;"	s
control_path_dir	bin/parallel	/^sub control_path_dir {$/;"	s
convert2pdf	bin/odf2pdf.py	/^def convert2pdf(odf_filename, pdf_filename=None, opts=None):$/;"	f
convert_to_pdf	bin/chm2pdf.py	/^def convert_to_pdf(cfile, filename, outputfilename, options):$/;"	f
coordinatorDelayMax	_fzf/src/constants.go	/^	version = "0.13.2"$/;"	c
coordinatorDelayStep	_fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c
copySlice	_fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f
copyright	_vim/plugged/vim-autopep8/docs/conf.py	/^copyright = u'2014, tell-k'$/;"	v
correct_file	bin/chm2pdf.py	/^def correct_file(input_file, output_file, html_list, objective_urls, options):$/;"	f
cov	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap cov :set <C-R>=(&virtualedit =~# "all") ? 'virtualedit-=all' : 'virtualedit+=all'<CR><CR>$/;"	m
cox	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap cox :set <C-R>=&cursorline && &cursorcolumn ? 'nocursorline nocursorcolumn' : 'cursorline cursorcolumn'<CR><CR>$/;"	m
cpath	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:cpath(path) abort$/;"	f
cprint	_fzf/fzf	/^  def cprint str, col$/;"	f	class:usage
create_vcard	bin/ldif2vcf.py	/^def create_vcard(nom, prenom, nomaffiche, mail, telephoneNumber, fileout):$/;"	f
criterion	_fzf/src/options.go	/^type criterion int$/;"	t
cs	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
ctrl	_fzf/fzf	/^  def ctrl char$/;"	f	class:usage
culldead	bin/waitkill.sh	/^culldead() {$/;"	f
current	_fzf/src/history.go	/^func (h *History) current() string {$/;"	f
current	_fzf/src/terminal.go	/^func (t *Terminal) current() string {$/;"	f
curses	_fzf/src/curses/curses.go	/^package curses$/;"	p
curses	_fzf/src/curses/curses_test.go	/^package curses$/;"	p
cursor_y	_fzf/fzf	/^  def cursor_y offset = 0$/;"	f	class:usage
dbver	bin/dropbox_set_lansync.py	/^dbver = GetDbVersion(dbfnver, connection)$/;"	v
debug	bin/parallel	/^sub debug {$/;"	s
dec_jobs_running	bin/parallel	/^sub dec_jobs_running {$/;"	s
defaultCommand	_fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c
defaultHistoryMax	_fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c
defaultJumpLabels	_fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c
defaultKeymap	_fzf/src/terminal.go	/^func defaultKeymap() map[int]actionType {$/;"	f
defaultMargin	_fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f
defaultOptions	_fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f
define_commands	_vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
define_commands	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:define_commands() abort$/;"	f
delChar	_fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f
delete	bin/waitkill.sh	/^delete() {$/;"	f
delimiterRegexp	_fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f
delta_time	bin/parallel	/^sub delta_time {$/;"	s
die_bug	bin/parallel	/^sub die_bug {$/;"	s
die_usage	bin/parallel	/^sub die_usage {$/;"	s
diff	_vim/autoload/plug.vim	/^function! s:diff()$/;"	f
diff_modifier	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
diff_restore	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
diff_window_count	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
diffoff	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diffoff() abort$/;"	f
diffoff_all	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
diffpanel.BindAu	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.BindAu()$/;"	f
diffpanel.CleanUpHighlight	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.CleanUpHighlight()$/;"	f
diffpanel.GetStatusLine	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.GetStatusLine()$/;"	f
diffpanel.Hide	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.Hide()$/;"	f
diffpanel.Init	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.Init()$/;"	f
diffpanel.ParseDiff	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.ParseDiff(diffresult)$/;"	f
diffpanel.Show	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.Show()$/;"	f
diffpanel.Toggle	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.Toggle()$/;"	f
diffpanel.Update	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:diffpanel.Update(seq,targetBufnr,targetid)$/;"	f
diffthis	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:diffthis() abort$/;"	f
dirpath	_vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
dirvish#open	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! dirvish#open(...) range abort$/;"	f
dirvish#shdo	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! dirvish#shdo(l1, l2, cmd)$/;"	f
dirvish_ftdetect	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^augroup dirvish_ftdetect$/;"	a
displayWidth	_fzf/src/terminal.go	/^func displayWidth(runes []rune) int {$/;"	f
displayWidthWithLimit	_fzf/src/terminal.go	/^func displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f
do	_vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
do_match	_fzf/fzf	/^    def do_match str, pat$/;"	f	class:start_search.Matcher
do_open	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:do_open(d, reload) abort$/;"	f
doautocmd	_vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
dobufread	_vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
dopopd	_fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
dosurround	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
double?	_fzf/fzf	/^    def double? v$/;"	f	class:start_search.MouseEvent
doubleClickDuration	_fzf/src/curses/curses.go	/^const ($/;"	c
download	_fzf/install	/^download() {$/;"	f
drain_job_queue	bin/parallel	/^sub drain_job_queue {$/;"	s
draw_blurshape	_gimp/plug-ins/layerfx.py	/^  def draw_blurshape(self, drawable, size, initgrowth, sel, invert):$/;"	m	class:layerfx_base
ds	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dupItem	_fzf/src/pattern.go	/^func dupItem(item *Item, offsets []Offset, bonus int32) *Item {$/;"	f
dupe	_fzf/src/chunklist.go	/^func (c *Chunk) dupe() *Chunk {$/;"	f
dupeTheme	_fzf/src/options.go	/^func dupeTheme(theme *curses.ColorTheme) *curses.ColorTheme {$/;"	f
echo	bin/ansicolors	/^def echo(msg):$/;"	f
emit	_fzf/fzf	/^  def emit event$/;"	f	class:usage
empty	bin/parallel	/^sub empty {$/;"	s
empty?	_fzf/fzf	/^    def empty? q$/;"	f	class:start_search.ExtendedFuzzyMatcher
empty?	_fzf/fzf	/^    def empty? q$/;"	f	class:start_search.FuzzyMatcher
enable_lansync	bin/dropbox_set_lansync.py	/^		enable_lansync = (sys.argv[1] == 'on')$/;"	v
end_with?	_fzf/test/test_go.rb	/^  def end_with? str$/;"	f	class:NilClass
endtime	bin/parallel	/^sub endtime {$/;"	s
enough_file_handles	bin/parallel	/^sub enough_file_handles {$/;"	s
entries	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:entries(path)$/;"	f
env_quote	bin/parallel	/^sub env_quote {$/;"	s
equals	_fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f
err	_vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
error	_fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
error	bin/parallel	/^sub error {$/;"	s
errorExit	_fzf/src/options.go	/^func errorExit(msg string) {$/;"	f
esc	_vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
escSequence	_fzf/src/curses/curses.go	/^func escSequence(sz *int) Event {$/;"	f
escape	_fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
escapedColon	_fzf/src/options.go	/^const ($/;"	c
escapedComma	_fzf/src/options.go	/^	escapedColon = 0$/;"	c
escrtp	_vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
eunuch	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^augroup eunuch$/;"	a
evaluateBonus	_fzf/src/algo/algo.go	/^func evaluateBonus(caseSensitive bool, runes []rune, pattern []rune, sidx int, eidx int) int32 {$/;"	f
exact_regex	_fzf/fzf	/^    def exact_regex w$/;"	f	class:start_search.ExtendedFuzzyMatcher.parse
exclude_patterns	_vim/plugged/vim-autopep8/docs/conf.py	/^exclude_patterns = ['_build']$/;"	v
exec	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:exec(cmd)$/;"	f
exec_silent	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:exec_silent(cmd)$/;"	f
execute	_fzf/plugin/fzf.vim	/^function! s:execute(dict, command, temps) abort$/;"	f
executeCommand	_fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, replacement string) {$/;"	f
executeRegexp	_fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v
execute_term	_fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
execute_tmux	_fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
exitError	_fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c
exitIfLast	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:exitIfLast()$/;"	f
exitInterrupt	_fzf/src/constants.go	/^	exitError     = 2$/;"	c
exitNoMatch	_fzf/src/constants.go	/^	exitOk        = 0$/;"	c
exitOk	_fzf/src/constants.go	/^const ($/;"	c
exit_handler	_fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
exitsignal	bin/parallel	/^sub exitsignal {$/;"	s
exitstatus	bin/parallel	/^sub exitstatus {$/;"	s
expand_combinations	bin/parallel	/^sub expand_combinations {$/;"	s
extendedMatch	_fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item) ([]Offset, int32) {$/;"	f
extensions	_vim/plugged/vim-autopep8/docs/conf.py	/^extensions = ['sphinxjp.themes.basicstrap']$/;"	v
extensions	_vim/plugged/vim-autopep8/docs/conf.py	/^extensions = []$/;"	v
extractColor	_fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, []ansiOffset, *ansiState) {$/;"	f
extract_name	_vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
extractafter	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
fail	_fzf/bin/fzf-tmux	/^fail() {$/;"	f
failed	bin/parallel	/^sub failed {$/;"	s
failed_here	bin/parallel	/^sub failed_here {$/;"	s
family_pids	bin/parallel	/^sub family_pids {$/;"	s
fd	bin/parallel	/^sub fd {$/;"	s
fd_file_name	bin/parallel	/^sub fd_file_name {$/;"	s
feed	_fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f
filetype_python	_vim/ftplugin/python.vim	/^augroup filetype_python$/;"	a
filter_list	_fzf/fzf	/^  def filter_list list$/;"	f
findFirstMatch	_fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f
findLastMatch	_fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f
find_name	_vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
find_opening_paren	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:find_opening_paren(...)$/;"	f
find_start_of_block	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:find_start_of_block(lnum, types, multiple)$/;"	f
find_start_of_multiline_statement	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:find_start_of_multiline_statement(lnum)$/;"	f
finish	_vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
finish_bindings	_vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
firstKey	_fzf/src/options.go	/^func firstKey(keymap map[int]string) int {$/;"	f
fixindent	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
flake8#Flake8	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! flake8#Flake8()$/;"	f
flake8#Flake8UnplaceMarkers	_vim/plugged/vim-flake8/autoload/flake8.vim	/^function! flake8#Flake8UnplaceMarkers()$/;"	f
fnameescape	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:fnameescape(string) abort$/;"	f
fnameescape	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
fnameescape	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:fnameescape(file) abort$/;"	f
force_encoding	_fzf/fzf	/^    def force_encoding *arg$/;"	f	class:String
format	_fzf/fzf	/^  def format line, limit, offsets$/;"	f	class:usage
format_git_log	_vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
format_message	_vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
fugitive	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#can_diffoff	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#can_diffoff(buf) abort$/;"	f
fugitive#cfile	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#cfile() abort$/;"	f
fugitive#cwindow	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#cwindow() abort$/;"	f
fugitive#detect	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#foldtext	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#git_commands	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#git_commands() abort$/;"	f
fugitive#git_version	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#git_version(...) abort$/;"	f
fugitive#head	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#reload_status	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#repo	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#statusline	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive_blame	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_foldtext	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_foldtext$/;"	a
fugitive_remove	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_status	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_statusline	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_statusline$/;"	a
fugitive_temp	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive_temp$/;"	a
function	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:function(name) abort$/;"	f
fuzzy_regex	_fzf/fzf	/^    def fuzzy_regex q$/;"	f	class:start_search.FuzzyMatcher
fzf	_fzf/src/ansi.go	/^package fzf$/;"	p
fzf	_fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	_fzf/src/cache.go	/^package fzf$/;"	p
fzf	_fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	_fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	_fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	_fzf/src/constants.go	/^package fzf$/;"	p
fzf	_fzf/src/core.go	/^package fzf$/;"	p
fzf	_fzf/src/history.go	/^package fzf$/;"	p
fzf	_fzf/src/history_test.go	/^package fzf$/;"	p
fzf	_fzf/src/item.go	/^package fzf$/;"	p
fzf	_fzf/src/item_test.go	/^package fzf$/;"	p
fzf	_fzf/src/matcher.go	/^package fzf$/;"	p
fzf	_fzf/src/merger.go	/^package fzf$/;"	p
fzf	_fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	_fzf/src/options.go	/^package fzf$/;"	p
fzf	_fzf/src/options_test.go	/^package fzf$/;"	p
fzf	_fzf/src/pattern.go	/^package fzf$/;"	p
fzf	_fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	_fzf/src/reader.go	/^package fzf$/;"	p
fzf	_fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	_fzf/src/terminal.go	/^package fzf$/;"	p
fzf	_fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	_fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	_fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf!	_fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#run	_fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf.on_exit	_fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code)$/;"	f
fzf_exec	_fzf/plugin/fzf.vim	/^function! s:fzf_exec()$/;"	f
fzf_popd	_fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_tmux	_fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
g:SimpylFold_docstring_preview	_vim/ftplugin/python.vim	/^let g:SimpylFold_docstring_preview = 1$/;"	v
g:SimpylFold_fold_docstring	_vim/ftplugin/python.vim	/^let g:SimpylFold_fold_docstring = 0$/;"	v
g:SimpylFold_fold_import	_vim/ftplugin/python.vim	/^let g:SimpylFold_fold_import = 0$/;"	v
g:colors_name	_vim/plugged/Sift/colors/sift.vim	/^let g:colors_name="sift"$/;"	v
g:fugitive_browse_handlers	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_browse_handlers = []$/;"	v
g:fugitive_git_executable	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:gutentags_add_default_project_roots	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_set_tags	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_auto_set_tags = get(g:, 'gutentags_auto_set_tags', 1)$/;"	v
g:gutentags_background_update	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_executable	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_check_tagfile	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_executable	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_options_file	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_debug	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_enabled_user_func	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled_user_func = get(g:, 'gutentags_enabled_user_func', '')$/;"	v
g:gutentags_exclude	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude = get(g:, 'gutentags_exclude', [])$/;"	v
g:gutentags_exclude_project_root	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'])$/;"	v
g:gutentags_fake	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_generate_on_missing	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_modules	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslckout']$/;"	v
g:gutentags_project_root	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_res_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_tagfile	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_tagfile = get(g:, 'gutentags_tagfile', 'tags')$/;"	v
g:gutentags_trace	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:loaded_dirvish	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^let g:loaded_dirvish = 1$/;"	v
g:loaded_eunuch	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^let g:loaded_eunuch = 1$/;"	v
g:loaded_fugitive	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_gutentags	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_plug	_vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_qf	_vim/plugged/vim-qf/plugin/qf.vim	/^let g:loaded_qf = 1$/;"	v
g:loaded_qlist	_vim/plugged/vim-qlist/plugin/qlist.vim	/^let g:loaded_qlist = 1$/;"	v
g:loaded_sensible	_vim/plugged/vim-sensible/plugin/sensible.vim	/^  let g:loaded_sensible = 1$/;"	v
g:loaded_surround	_vim/plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_togglebg	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^let g:loaded_togglebg = 1$/;"	v
g:loaded_undotree	_vim/plugged/undotree/plugin/undotree.vim	/^let g:loaded_undotree = 0$/;"	v
g:loaded_undotree	_vim/plugged/undotree/plugin/undotree.vim	/^let g:loaded_undotree = 1   " Signal plugin availability with a value of 1.$/;"	v
g:loaded_unimpaired	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^let g:loaded_unimpaired = 1$/;"	v
g:plugs_order	_vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:python_pep8_indent_multiline_string	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^    let g:python_pep8_indent_multiline_string = 0$/;"	v
g:undotree_DiffAutoOpen	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_DiffAutoOpen = 1$/;"	v
g:undotree_DiffCommand	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_DiffCommand = "diff"$/;"	v
g:undotree_DiffpanelHeight	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_DiffpanelHeight = 10$/;"	v
g:undotree_HighlightChangedText	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_HighlightChangedText = 1$/;"	v
g:undotree_HighlightSyntaxAdd	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_HighlightSyntaxAdd = "DiffAdd"$/;"	v
g:undotree_HighlightSyntaxChange	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_HighlightSyntaxChange = "DiffChange"$/;"	v
g:undotree_RelativeTimestamp	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_RelativeTimestamp = 1$/;"	v
g:undotree_SetFocusWhenToggle	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_SetFocusWhenToggle = 0$/;"	v
g:undotree_SplitWidth	_vim/plugged/undotree/plugin/undotree.vim	/^        let g:undotree_SplitWidth = 24$/;"	v
g:undotree_SplitWidth	_vim/plugged/undotree/plugin/undotree.vim	/^        let g:undotree_SplitWidth = 30$/;"	v
g:undotree_TreeNodeShape	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_TreeNodeShape = '*'$/;"	v
g:undotree_WindowLayout	_vim/plugged/undotree/plugin/undotree.vim	/^    let g:undotree_WindowLayout = 1$/;"	v
g:unimpaired_html_entities	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^let g:unimpaired_html_entities = {$/;"	v
g?	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent>   g?    :help dirvish-mappings<CR>$/;"	m
get	_fzf/fzf	/^  def get name$/;"	f	class:FZF
get	bin/parallel	/^sub get {$/;"	s
getGradientMeasurements	_gimp/plug-ins/layerfx.py	/^  def getGradientMeasurements(self, drawoffsetx, drawoffsety, gradienttype, centerx, centery, angle, width):$/;"	m	class:layerfx_base
getUniqueID	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:getUniqueID()$/;"	f
get_ctags_executable	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
get_gk_pass	_mutt/offlineimap.py	/^def get_gk_pass(keyring_name, key):$/;"	f
get_html_list	bin/chm2pdf.py	/^def get_html_list(cfile):$/;"	f
get_input	_fzf/fzf	/^  def get_input actions$/;"	f	class:start_search
get_job_with_sshlogin	bin/parallel	/^sub get_job_with_sshlogin {$/;"	s
get_layer_pos	_gimp/plug-ins/layerfx.py	/^  def get_layer_pos(self, layer):$/;"	m	class:layerfx_base
get_mouse	_fzf/fzf	/^  def get_mouse$/;"	f	class:start_search
get_objective_urls_list	bin/chm2pdf.py	/^def get_objective_urls_list(filename):$/;"	f
get_options_from_array	bin/parallel	/^sub get_options_from_array {$/;"	s
geta	_fzf/fzf	/^  def geta(*names)$/;"	f	class:FZF
getch	_fzf/src/curses/curses.go	/^func getch(nonblock bool) int {$/;"	f
getchar	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
getchildren	bin/waitkill.sh	/^getchildren() {$/;"	f
getpos	_fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
gettime	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:gettime(time)$/;"	f
git_validate	_vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
git_version_requirement	_vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
github_url	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:github_url(opts, ...) abort$/;"	f
glob	_vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
glob_dir	_vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
globlist	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:globlist(pat) abort$/;"	f
go	_fzf/test/test_go.rb	/^  def go *args$/;"	f
group	bin/odf2pdf.py	/^    group = parser.add_option_group('To connect to already running server use:')$/;"	v
gsub	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gutentags#add_progress	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_progress(module, file) abort$/;"	f
gutentags#cscope#command_terminated	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#command_terminated(job_id, data, event) abort$/;"	f
gutentags#cscope#generate	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, write_mode) abort$/;"	f
gutentags#cscope#init	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#ctags#generate	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, write_mode) abort$/;"	f
gutentags#ctags#init	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#delete_lock_files	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#delete_lock_files() abort$/;"	f
gutentags#fake	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#get_cachefile	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_execute_cmd	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_execute_cmd() abort$/;"	f
gutentags#get_execute_cmd_suffix	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_execute_cmd_suffix() abort$/;"	f
gutentags#get_plat_file	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_info	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#inprogress	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#normalizepath	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#rescan	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#statusline	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#stripslash	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags_detect	_vim/plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
hasPreviewWindow	_fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f
hash_match	_vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
header_indexes_sorted	bin/parallel	/^sub header_indexes_sorted {$/;"	s
help	_fzf/bin/fzf-tmux	/^help() {$/;"	f
help	_fzf/install	/^help() {$/;"	f
help	_fzf/src/options.go	/^func help(code int) {$/;"	f
help	bin/ldif2vcf.py	/^                      help = "Fichier ldif à traiter",$/;"	v
help	bin/ldif2vcf.py	/^la sortie standard.")$/;"	v
help	bin/odf2pdf.py	/^                      help="tear down OOo after convertion")$/;"	v
help	bin/odf2pdf.py	/^                     help="hostname\/ip of server (default: %default)")$/;"	v
help	bin/odf2pdf.py	/^                     help="port the server is listening on (default: %default)")$/;"	v
hiddenLayer	_gimp/plug-ins/layerfx.py	/^  hiddenLayer = None$/;"	v	class:layerfx_base
hostname	bin/parallel	/^sub hostname {$/;"	s
hs_highlight_boolean	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let hs_highlight_boolean=1$/;"	v
hs_highlight_delimiters	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let hs_highlight_delimiters=1$/;"	v
html_static_path	_vim/plugged/vim-autopep8/docs/conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	_vim/plugged/vim-autopep8/docs/conf.py	/^html_theme = 'basicstrap'$/;"	v
html_theme_options	_vim/plugged/vim-autopep8/docs/conf.py	/^html_theme_options = {$/;"	v
htmlhelp_basename	_vim/plugged/vim-autopep8/docs/conf.py	/^htmlhelp_basename = 'vim-autopep8'$/;"	v
inc_jobs_completed	bin/parallel	/^sub inc_jobs_completed {$/;"	s
inc_jobs_running	bin/parallel	/^sub inc_jobs_running {$/;"	s
include?	_fzf/test/test_go.rb	/^  def include? str$/;"	f	class:NilClass
indent	_vim/plugged/vim-python-pep8-indent/spec/spec_helper.rb	/^    def indent$/;"	f
indent_like_block	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:indent_like_block(lnum)$/;"	f
indent_like_opening_paren	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:indent_like_opening_paren(lnum)$/;"	f
indent_like_previous_line	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:indent_like_previous_line(lnum)$/;"	f
infer_properties	_vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
init	_fzf/src/ansi.go	/^func init() {$/;"	f
init	_fzf/src/curses/curses.go	/^func init() {$/;"	f
init	_fzf/src/pattern.go	/^func init() {$/;"	f
init	_gimp/plug-ins/layerfx.py	/^  def init(self):$/;"	m	class:layerfxplugin
initPairs	_fzf/src/curses/curses.go	/^func initPairs(baseTheme *ColorTheme, theme *ColorTheme, black bool) {$/;"	f
initProcs	_fzf/src/core.go	/^func initProcs() {$/;"	f
init_progress	bin/parallel	/^sub init_progress {$/;"	s
init_run_jobs	bin/parallel	/^sub init_run_jobs {$/;"	s
init_screen	_fzf/fzf	/^  def init_screen$/;"	f
initialDelay	_fzf/src/constants.go	/^	defaultCommand = `find . -path '*\/\\.*' -prune -o -type f -print -o -type l -print 2> \/dev\/null | sed s\/^..\/\/`$/;"	c
initialDelayTac	_fzf/src/constants.go	/^	initialDelay    = 20 * time.Millisecond$/;"	c
initialize	_fzf/fzf	/^      def initialize n$/;"	f	class:start_search.Matcher.MatchData
initialize	_fzf/fzf	/^    def initialize nth, delim$/;"	f	class:start_search.Matcher
initialize	_fzf/fzf	/^    def initialize rxflag, mode = :fuzzy, nth = nil, delim = nil$/;"	f	class:start_search.ExtendedFuzzyMatcher
initialize	_fzf/fzf	/^    def initialize rxflag, nth = nil, delim = nil$/;"	f	class:start_search.FuzzyMatcher
initialize	_fzf/fzf	/^    def initialize v = nil$/;"	f	class:start_search.MouseEvent
initialize	_fzf/fzf	/^  def initialize argv, source = $stdin$/;"	f	class:FZF
initialize	_fzf/test/test_go.rb	/^  def initialize shell = :bash$/;"	f	class:Tmux
inputreplacement	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insert	bin/parallel	/^sub insert {$/;"	s
insert	bin/waitkill.sh	/^insert() {$/;"	f
install	_vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
install_ruby_fzf	_fzf/install	/^install_ruby_fzf() {$/;"	f
instaweb_url	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:instaweb_url(opts) abort$/;"	f
interpretCode	_fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) *ansiState {$/;"	f
isAlphabet	_fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f
isExecuteAction	_fzf/src/options.go	/^func isExecuteAction(str string) bool {$/;"	f
isPreviewEnabled	_fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f
isRankValid	_fzf/src/item.go	/^func isRankValid(rank [5]int32) bool {$/;"	f
isUnpack	bin/edown.sh	/^function isUnpack() {$/;"	f
is_acceptable_command_line_length	bin/parallel	/^sub is_acceptable_command_line_length {$/;"	s
is_already_in_joblog	bin/parallel	/^sub is_already_in_joblog {$/;"	s
is_concealed	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:is_concealed(line, col)$/;"	f
is_dedented_already	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:is_dedented_already(current, base)$/;"	f
is_local_plug	_vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
is_managed	_vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
is_preview_window_open	_vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
is_python_string	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:is_python_string(lnum, ...)$/;"	f
is_updated	_vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
isdir	_vim/plugged/vim-dirvish/plugin/dirvish.vim	/^function! s:isdir(dir)$/;"	f
item_count	_fzf/test/test_go.rb	/^          def item_count$/;"	f	class:Tmux.until
iter	_fzf/src/pattern.go	/^func (p *Pattern) iter(pfun func(bool, bool, []rune, []rune) algo.Result,$/;"	f
job_abort	_vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
job_handler	_vim/autoload/plug.vim	/^function! s:job_handler(job_id, data, event) abort$/;"	f
jobs_completed	bin/parallel	/^sub jobs_completed {$/;"	s
jobs_running	bin/parallel	/^sub jobs_running {$/;"	s
joinTokens	_fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) []rune {$/;"	f
joinTokensAsRunes	_fzf/src/tokenizer.go	/^func joinTokensAsRunes(tokens []Token) []rune {$/;"	f
jumpAcceptEnabled	_fzf/src/terminal.go	/^	jumpEnabled$/;"	c
jumpDisabled	_fzf/src/terminal.go	/^const ($/;"	c
jumpEnabled	_fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c
jumpMode	_fzf/src/terminal.go	/^type jumpMode int$/;"	t
key	bin/dropbox_set_lansync.py	/^	key = 'p2p_enabled'$/;"	v
keyMatch	_fzf/src/terminal.go	/^func keyMatch(key int, event C.Event) bool {$/;"	f
kill	_fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
kill	bin/parallel	/^sub kill {$/;"	s
lastChunk	_fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f
last_login_at	bin/parallel	/^sub last_login_at {$/;"	s
lastline	_vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
latex_documents	_vim/plugged/vim-autopep8/docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	_vim/plugged/vim-autopep8/docs/conf.py	/^latex_elements = {$/;"	v
layer_exists	_gimp/plug-ins/layerfx.py	/^  def layer_exists(self, layer):$/;"	m	class:layerfx_base
layerfx_base	_gimp/plug-ins/layerfx.py	/^class layerfx_base(object):$/;"	c
layerfx_bevel_emboss	_gimp/plug-ins/layerfx.py	/^class layerfx_bevel_emboss(layerfx_base):$/;"	c
layerfx_color_overlay	_gimp/plug-ins/layerfx.py	/^class layerfx_color_overlay(layerfx_base):$/;"	c
layerfx_drop_shadow	_gimp/plug-ins/layerfx.py	/^class layerfx_drop_shadow(layerfx_base):$/;"	c
layerfx_gradient_overlay	_gimp/plug-ins/layerfx.py	/^class layerfx_gradient_overlay(layerfx_base):$/;"	c
layerfx_inner_glow	_gimp/plug-ins/layerfx.py	/^class layerfx_inner_glow(layerfx_base):$/;"	c
layerfx_inner_shadow	_gimp/plug-ins/layerfx.py	/^class layerfx_inner_shadow(layerfx_base):$/;"	c
layerfx_outer_glow	_gimp/plug-ins/layerfx.py	/^class layerfx_outer_glow(layerfx_base):$/;"	c
layerfx_pattern_overlay	_gimp/plug-ins/layerfx.py	/^class layerfx_pattern_overlay(layerfx_base):$/;"	c
layerfx_reapply_effects	_gimp/plug-ins/layerfx.py	/^class layerfx_reapply_effects(layerfx_drop_shadow, layerfx_inner_shadow, layerfx_outer_glow, layerfx_inner_glow, layerfx_bevel_emboss, layerfx_satin, layerfx_stroke, layerfx_color_overlay, layerfx_gradient_overlay, layerfx_pattern_overlay):$/;"	c
layerfx_satin	_gimp/plug-ins/layerfx.py	/^class layerfx_satin(layerfx_base):$/;"	c
layerfx_stroke	_gimp/plug-ins/layerfx.py	/^class layerfx_stroke(layerfx_base):$/;"	c
layerfxplugin	_gimp/plug-ins/layerfx.py	/^class layerfxplugin(gimpplugin.plugin):$/;"	c
len	bin/parallel	/^sub len {$/;"	s
linechars	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
lines	_vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
link_fzf_in_path	_fzf/install	/^link_fzf_in_path() {$/;"	f
list_dir	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:list_dir(dir) abort$/;"	f
list_running_jobs	bin/parallel	/^sub list_running_jobs {$/;"	s
loadavg	bin/parallel	/^sub loadavg {$/;"	s
loadavg_too_high	bin/parallel	/^sub loadavg_too_high {$/;"	s
loaded_names	_vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
lock	bin/parallel	/^sub lock {$/;"	s
lod	_vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
lod_cmd	_vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
lod_ft	_vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
lod_map	_vim/autoload/plug.vim	/^function! s:lod_map(map, names, prefix)$/;"	f
log	_vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
log	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:log(msg)$/;"	f
log4	_vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
logpos	_vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
lpad	_vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
main	_fzf/src/fzf/main.go	/^func main() {$/;"	f
main	_fzf/src/fzf/main.go	/^package main$/;"	p
main	bin/chm2pdf.py	/^def main(argv):$/;"	f
main	bin/ldif2vcf.py	/^def main(fichdif, fichout):$/;"	f
makeBevel	_gimp/plug-ins/layerfx.py	/^  def makeBevel(self, img, drawable, style, depth, direction, size, soften, angle, altitude, glosscontour, highlightcolor, highlightmode, highlightopacity, shadowcolor, shadowmode, shadowopacity, surfacecontour, use_texture, pattern, scale, tex_depth, invert, merge):$/;"	m	class:layerfx_bevel_emboss
makeDialogButtons	_gimp/plug-ins/layerfx.py	/^  def makeDialogButtons(self):$/;"	m	class:layerfx_base
makeGlow	_gimp/plug-ins/layerfx.py	/^  def makeGlow(self, img, drawable, color, opacity, contour, noise, mode, source, choke, size, merge):$/;"	m	class:layerfx_inner_glow
makeGlow	_gimp/plug-ins/layerfx.py	/^  def makeGlow(self, img, drawable, color, opacity, contour, noise, mode, spread, size, knockout, merge):$/;"	m	class:layerfx_outer_glow
makeOverlay	_gimp/plug-ins/layerfx.py	/^  def makeOverlay(self, img, drawable, color, opacity, mode, merge):$/;"	m	class:layerfx_color_overlay
makeOverlay	_gimp/plug-ins/layerfx.py	/^  def makeOverlay(self, img, drawable, gradient, gradienttype, repeat, reverse, opacity, mode, centerx, centery, angle, width, merge):$/;"	m	class:layerfx_gradient_overlay
makeOverlay	_gimp/plug-ins/layerfx.py	/^  def makeOverlay(self, img, drawable, pattern, opacity, mode, scale, interpolation_type, merge):$/;"	m	class:layerfx_pattern_overlay
makeSatin	_gimp/plug-ins/layerfx.py	/^  def makeSatin(self, img, drawable, color, opacity, mode, offsetangle, offsetdist, size, contour, invert, merge):$/;"	m	class:layerfx_satin
makeShadow	_gimp/plug-ins/layerfx.py	/^  def makeShadow(self, img, drawable, color, opacity, contour, noise, mode, source, choke, size, offsetangle, offsetdist, merge):$/;"	m	class:layerfx_inner_shadow
makeShadow	_gimp/plug-ins/layerfx.py	/^  def makeShadow(self, img, drawable, color, opacity, contour, noise, mode, spread, size, offsetangle, offsetdist, knockout, merge):$/;"	m	class:layerfx_drop_shadow
makeStroke	_gimp/plug-ins/layerfx.py	/^  def makeStroke(self, img, drawable, fill, opacity, mode, size, position, merge):$/;"	m	class:layerfx_stroke
make_blend_mode_box	_gimp/plug-ins/layerfx.py	/^  def make_blend_mode_box(self):$/;"	m	class:layerfx_base
make_combo_box	_gimp/plug-ins/layerfx.py	/^  def make_combo_box(self, *vals):$/;"	m	class:layerfx_base
make_contour_box	_gimp/plug-ins/layerfx.py	/^  def make_contour_box(self):$/;"	m	class:layerfx_base
make_gradient_repeat_box	_gimp/plug-ins/layerfx.py	/^  def make_gradient_repeat_box(self):$/;"	m	class:layerfx_base
make_gradient_type_box	_gimp/plug-ins/layerfx.py	/^  def make_gradient_type_box(self):$/;"	m	class:layerfx_base
make_interpolation_box	_gimp/plug-ins/layerfx.py	/^  def make_interpolation_box(self):$/;"	m	class:layerfx_base
make_label	_gimp/plug-ins/layerfx.py	/^  def make_label(self, text, show = True):$/;"	m	class:layerfx_base
make_slider_and_spinner	_gimp/plug-ins/layerfx.py	/^  def make_slider_and_spinner(self, init, min, max, step, page, digits, show = True):$/;"	m	class:layerfx_base
make_spinner	_gimp/plug-ins/layerfx.py	/^  def make_spinner(self, init, min, max, step, page, digits, show = True):$/;"	m	class:layerfx_base
man_pages	_vim/plugged/vim-autopep8/docs/conf.py	/^man_pages = [$/;"	v
manual_update_tags	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
master_doc	_vim/plugged/vim-autopep8/docs/conf.py	/^master_doc = 'index'$/;"	v
match	_fzf/fzf	/^    def match list, q, prefix, suffix$/;"	f	class:start_search.ExtendedFuzzyMatcher.parse
match	_fzf/fzf	/^    def match list, q, prefix, suffix$/;"	f	class:start_search.FuzzyMatcher
matchChunk	_fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk) []*Item {$/;"	f
match_expr_on_line	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:match_expr_on_line(expr, lnum, start, ...)$/;"	f
matcher	_fzf/fzf	/^  def matcher$/;"	f
max	bin/parallel	/^sub max {$/;"	s
maxItems	_fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f
max_items	_fzf/fzf	/^  def max_items; C.lines - 2; end$/;"	f	class:usage
max_jobs_running	bin/parallel	/^sub max_jobs_running {$/;"	s
max_length	bin/parallel	/^sub max_length {$/;"	s
max_loadavg	bin/parallel	/^sub max_loadavg {$/;"	s
maxlength	bin/parallel	/^sub maxlength {$/;"	s
maybe_quote	bin/parallel	/^sub maybe_quote {$/;"	s
maybe_unquote	bin/parallel	/^sub maybe_unquote {$/;"	s
mergedGet	_fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) *Item {$/;"	f
mergerCacheMax	_fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c
metavar	bin/ldif2vcf.py	/^                       metavar = "FILE")$/;"	v
min	bin/parallel	/^sub min {$/;"	s
minHeight	_fzf/src/terminal.go	/^	minWidth  = 16$/;"	c
minWidth	_fzf/src/terminal.go	/^const ($/;"	c
min_failed	bin/parallel	/^sub min_failed {$/;"	s
mkdir_or_die	bin/parallel	/^sub mkdir_or_die {$/;"	s
mode_list	_gimp/plug-ins/layerfx.py	/^  mode_list = (NORMAL_MODE, DISSOLVE_MODE, MULTIPLY_MODE, DIVIDE_MODE, SCREEN_MODE, OVERLAY_MODE, DODGE_MODE, BURN_MODE, HARDLIGHT_MODE, SOFTLIGHT_MODE, GRAIN_EXTRACT_MODE, GRAIN_MERGE_MODE, DIFFERENCE_MODE, ADDITION_MODE, SUBTRACT_MODE, DARKEN_ONLY_MODE, LIGHTEN_ONLY_MODE, HUE_MODE, SATURATION_MODE, COLOR_MODE, VALUE_MODE)$/;"	v	class:layerfx_base
mouseSequence	_fzf/src/curses/curses.go	/^func mouseSequence(sz *int) Event {$/;"	f
move	_fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f
msg_error	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:msg_error(msg) abort$/;"	f
multi_regexp	bin/parallel	/^sub multi_regexp {$/;"	s
multiline_indent	_vim/plugged/vim-python-pep8-indent/spec/spec_helper.rb	/^    def multiline_indent(prev, default)$/;"	f
multiply_binary_prefix	bin/parallel	/^sub multiply_binary_prefix {$/;"	s
my_displayhook	_pythonrc.py	/^    def my_displayhook(value):$/;"	f
my_dump	bin/parallel	/^sub my_dump {$/;"	s
my_memory_usage	bin/parallel	/^sub my_memory_usage {$/;"	s
my_size	bin/parallel	/^sub my_size {$/;"	s
names	_vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
ncpus	bin/parallel	/^sub ncpus {$/;"	s
nest_get	bin/parallel	/^sub nest_get {$/;"	s
new	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:new(obj)$/;"	f
new	bin/parallel	/^sub new {$/;"	s
newRange	_fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f
new_shell	_fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	_fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	_fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
new_window	_vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
next	_fzf/src/history.go	/^func (h *History) next() string {$/;"	f
nextInt	_fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f
nextString	_fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f
next_seq	bin/parallel	/^sub next_seq {$/;"	s
nindex	bin/parallel	/^sub nindex {$/;"	s
nlinks	bin/parallel	/^sub nlinks {$/;"	s
no_of_cores	bin/parallel	/^sub no_of_cores {$/;"	s
no_of_cores_aix	bin/parallel	/^sub no_of_cores_aix {$/;"	s
no_of_cores_darwin	bin/parallel	/^sub no_of_cores_darwin {$/;"	s
no_of_cores_freebsd	bin/parallel	/^sub no_of_cores_freebsd {$/;"	s
no_of_cores_gnu_linux	bin/parallel	/^sub no_of_cores_gnu_linux {$/;"	s
no_of_cores_hpux	bin/parallel	/^sub no_of_cores_hpux {$/;"	s
no_of_cores_hurd	bin/parallel	/^sub no_of_cores_hurd {$/;"	s
no_of_cores_irix	bin/parallel	/^sub no_of_cores_irix {$/;"	s
no_of_cores_netbsd	bin/parallel	/^sub no_of_cores_netbsd {$/;"	s
no_of_cores_openbsd	bin/parallel	/^sub no_of_cores_openbsd {$/;"	s
no_of_cores_openserver	bin/parallel	/^sub no_of_cores_openserver {$/;"	s
no_of_cores_qnx	bin/parallel	/^sub no_of_cores_qnx {$/;"	s
no_of_cores_solaris	bin/parallel	/^sub no_of_cores_solaris {$/;"	s
no_of_cpus	bin/parallel	/^sub no_of_cpus {$/;"	s
no_of_cpus_aix	bin/parallel	/^sub no_of_cpus_aix {$/;"	s
no_of_cpus_darwin	bin/parallel	/^sub no_of_cpus_darwin {$/;"	s
no_of_cpus_freebsd	bin/parallel	/^sub no_of_cpus_freebsd {$/;"	s
no_of_cpus_gnu_linux	bin/parallel	/^sub no_of_cpus_gnu_linux {$/;"	s
no_of_cpus_hpux	bin/parallel	/^sub no_of_cpus_hpux {$/;"	s
no_of_cpus_hurd	bin/parallel	/^sub no_of_cpus_hurd {$/;"	s
no_of_cpus_irix	bin/parallel	/^sub no_of_cpus_irix {$/;"	s
no_of_cpus_netbsd	bin/parallel	/^sub no_of_cpus_netbsd {$/;"	s
no_of_cpus_openbsd	bin/parallel	/^sub no_of_cpus_openbsd {$/;"	s
no_of_cpus_openserver	bin/parallel	/^sub no_of_cpus_openserver {$/;"	s
no_of_cpus_qnx	bin/parallel	/^sub no_of_cpus_qnx {$/;"	s
no_of_cpus_solaris	bin/parallel	/^sub no_of_cpus_solaris {$/;"	s
node.Init	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:node.Init()$/;"	f
non_block_write	bin/parallel	/^sub non_block_write {$/;"	s
normalize_dir	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:normalize_dir(dir) abort$/;"	f
now	bin/parallel	/^sub now {$/;"	s
num_unicode_bytes	_fzf/fzf	/^  def num_unicode_bytes chr$/;"	f	class:start_search
number_of_args	bin/parallel	/^sub number_of_args {$/;"	s
number_of_replacements	bin/parallel	/^sub number_of_replacements {$/;"	s
numchildren	bin/waitkill.sh	/^numchildren() {$/;"	f
o	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^    nnoremap <buffer> o <CR><C-w>p$/;"	m
offset	_fzf/fzf	/^      def offset _$/;"	f	class:start_search.Matcher.MatchData
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_bevel_emboss
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_color_overlay
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_drop_shadow
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_gradient_overlay
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_inner_glow
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_inner_shadow
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_outer_glow
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_pattern_overlay
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_satin
okbutton	_gimp/plug-ins/layerfx.py	/^  def okbutton(self, widget):$/;"	m	class:layerfx_stroke
on_bufclosed	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:on_bufclosed() abort$/;"	f
on_bufenter	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:on_bufenter() abort$/;"	f
open_joblog	bin/parallel	/^sub open_joblog {$/;"	s
open_or_exit	bin/parallel	/^sub open_or_exit {$/;"	s
open_selected	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:open_selected(split_cmd, bg, line1, line2) abort$/;"	f
openoutputfiles	bin/parallel	/^sub openoutputfiles {$/;"	s
opfunc	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
optString	_fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f
option_map	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:option_map(letter, option, mode) abort$/;"	f
optionalNextString	_fzf/src/options.go	/^func optionalNextString(args []string, i *int) string {$/;"	f
optionalNumeric	_fzf/src/options.go	/^func optionalNumeric(args []string, i *int) int {$/;"	f
options_hash	bin/parallel	/^sub options_hash {$/;"	s
ord	_fzf/fzf	/^      def ord$/;"	f	class:usage
orig	bin/parallel	/^sub orig {$/;"	s
os.path	_vim/ftplugin/python.vim	/^import os.path$/;"	m
out	bin/ansicolors	/^def out(n):$/;"	f
output	_fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f
override	_fzf/src/curses/curses.go	/^func override(a int16, b int16) C.short {$/;"	f
override	_fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f
p	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> p   yy<c-w>p:e <c-r>=fnameescape(getreg('"',1,1)[0])<cr><cr>$/;"	m
pair_sort	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^function! s:pair_sort(x, y)$/;"	f
panel.Hide	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:panel.Hide()$/;"	f
panel.Init	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:panel.Init()$/;"	f
panel.IsVisible	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:panel.IsVisible()$/;"	f
panel.SetFocus	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:panel.SetFocus()$/;"	f
parent_dir	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:parent_dir(dir) abort$/;"	f
parentdirs_of	bin/parallel	/^sub parentdirs_of {$/;"	s
parse	_fzf/fzf	/^    def parse q$/;"	f	class:start_search.ExtendedFuzzyMatcher
parseKeyChords	_fzf/src/options.go	/^func parseKeyChords(str string, message string) map[int]string {$/;"	f
parseKeymap	_fzf/src/options.go	/^func parseKeymap(keymap map[int]actionType, execmap map[int]string, str string) {$/;"	f
parseMargin	_fzf/src/options.go	/^func parseMargin(margin string) [4]sizeSpec {$/;"	f
parseOptions	_fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f
parsePreviewWindow	_fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f
parseSize	_fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f
parseTerms	_fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, str string) []termSet {$/;"	f
parseTheme	_fzf/src/options.go	/^func parseTheme(defaultTheme *curses.ColorTheme, str string) *curses.ColorTheme {$/;"	f
parseTiebreak	_fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f
parseToggleSort	_fzf/src/options.go	/^func parseToggleSort(keymap map[int]actionType, str string) {$/;"	f
parse_env_var	bin/parallel	/^sub parse_env_var {$/;"	s
parse_nth	_fzf/fzf	/^  def parse_nth nth$/;"	f	class:FZF
parse_options	_vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
parse_options	bin/parallel	/^sub parse_options {$/;"	s
parse_sshlogin	bin/parallel	/^sub parse_sshlogin {$/;"	s
parser	bin/odf2pdf.py	/^    parser = optparse.OptionParser('%prog [options] ODF-Filename [PDF-Filename]')$/;"	v
partialResult	_fzf/src/matcher.go	/^type partialResult struct {$/;"	t
paste	_fzf/test/test_go.rb	/^  def paste str$/;"	f	class:Tmux
path	_vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
pdb	_gimp/plug-ins/layerfx.py	/^pdb = gimp.pdb$/;"	v
pick	_fzf/fzf	/^  def pick$/;"	f	class:start_search
pid	bin/parallel	/^sub pid {$/;"	s
placeCursor	_fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f
plug#	_vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	_vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	_vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	_vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	_vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug_window_exists	_vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
pop	bin/parallel	/^sub pop {$/;"	s
pop_all	bin/parallel	/^sub pop_all {$/;"	s
populate	bin/parallel	/^sub populate {$/;"	s
posDown	_fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c
posLeft	_fzf/src/options.go	/^	posDown$/;"	c
posRight	_fzf/src/options.go	/^	posLeft$/;"	c
posUp	_fzf/src/options.go	/^const ($/;"	c
postProcessOptions	_fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f
prepare	_fzf/test/test_go.rb	/^  def prepare$/;"	f
prepare	_vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
prepareInput	_fzf/src/pattern.go	/^func (p *Pattern) prepareInput(item *Item) []Token {$/;"	f
present	_fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget):$/;"	m	class:layerfx_color_overlay
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget):$/;"	m	class:layerfx_drop_shadow
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget):$/;"	m	class:layerfx_inner_shadow
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget):$/;"	m	class:layerfx_satin
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget, *extra):$/;"	m	class:layerfx_bevel_emboss
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget, *extra):$/;"	m	class:layerfx_gradient_overlay
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget, *extra):$/;"	m	class:layerfx_inner_glow
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget, *extra):$/;"	m	class:layerfx_outer_glow
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget, *extra):$/;"	m	class:layerfx_pattern_overlay
preview	_gimp/plug-ins/layerfx.py	/^  def preview(self, widget, *extra):$/;"	m	class:layerfx_stroke
previewLayer	_gimp/plug-ins/layerfx.py	/^  previewLayer = None$/;"	v	class:layerfx_base
previewOpts	_fzf/src/options.go	/^type previewOpts struct {$/;"	t
previewRequest	_fzf/src/terminal.go	/^type previewRequest struct {$/;"	t
preview_commit	_vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
previous	_fzf/src/history.go	/^func (h *History) previous() string {$/;"	f
previous_indent	_vim/plugged/vim-python-pep8-indent/spec/spec_helper.rb	/^    def previous_indent$/;"	f
print	bin/parallel	/^sub print {$/;"	s
printAll	_fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f
printHeader	_fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f
printHighlighted	_fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(item *Item, bold bool, col1 int, col2 int, current bool) {$/;"	f
printInfo	_fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f
printItem	_fzf/src/terminal.go	/^func (t *Terminal) printItem(item *Item, i int, current bool) {$/;"	f
printList	_fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f
printPreview	_fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f
printPrompt	_fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f
printUsage	bin/timeout	/^function printUsage() {$/;"	f
print_info	_fzf/fzf	/^  def print_info msg = nil$/;"	f	class:usage
print_input	_fzf/fzf	/^  def print_input$/;"	f	class:usage
print_item	_fzf/fzf	/^  def print_item row, tokens, chosen, selected$/;"	f	class:usage
print_joblog	bin/parallel	/^sub print_joblog {$/;"	s
process	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
processTabs	_fzf/src/terminal.go	/^func processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f
process_options_file	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
process_timeouts	bin/parallel	/^sub process_timeouts {$/;"	s
processes_available_by_system_limit	bin/parallel	/^sub processes_available_by_system_limit {$/;"	s
progress	bin/parallel	/^sub progress {$/;"	s
progressMinDuration	_fzf/src/constants.go	/^	spinnerDuration = 200 * time.Millisecond$/;"	c
progress_bar	_vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
progress_opt	_vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
project	_vim/plugged/vim-autopep8/docs/conf.py	/^project = u'vim-autopep8'$/;"	v
proposed_indent	_vim/plugged/vim-python-pep8-indent/spec/spec_helper.rb	/^    def proposed_indent$/;"	f
push	_fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte, index int) bool {$/;"	f
push	bin/parallel	/^sub push {$/;"	s
push	bin/waitkill.sh	/^push() {$/;"	f
pushd	_fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
putline	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:putline(how, map) abort$/;"	f
pygments_style	_vim/plugged/vim-autopep8/docs/conf.py	/^pygments_style = 'sphinx'$/;"	v
python_hightlight_all	_vim/ftplugin/python.vim	/^let python_hightlight_all = 1$/;"	v
python_layer_fx_bevel_emboss	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_bevel_emboss($/;"	m	class:layerfxplugin
python_layer_fx_color_overlay	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_color_overlay($/;"	m	class:layerfxplugin
python_layer_fx_drop_shadow	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_drop_shadow($/;"	m	class:layerfxplugin
python_layer_fx_gradient_overlay	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_gradient_overlay($/;"	m	class:layerfxplugin
python_layer_fx_inner_glow	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_inner_glow($/;"	m	class:layerfxplugin
python_layer_fx_inner_shadow	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_inner_shadow($/;"	m	class:layerfxplugin
python_layer_fx_outer_glow	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_outer_glow($/;"	m	class:layerfxplugin
python_layer_fx_pattern_overlay	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_pattern_overlay($/;"	m	class:layerfxplugin
python_layer_fx_reapply_effects	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_reapply_effects($/;"	m	class:layerfxplugin
python_layer_fx_satin	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_satin($/;"	m	class:layerfxplugin
python_layer_fx_stroke	_gimp/plug-ins/layerfx.py	/^  def python_layer_fx_stroke($/;"	m	class:layerfxplugin
python_layerfx_bevel_emboss	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_bevel_emboss($/;"	m	class:layerfxplugin
python_layerfx_color_overlay	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_color_overlay($/;"	m	class:layerfxplugin
python_layerfx_drop_shadow	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_drop_shadow($/;"	m	class:layerfxplugin
python_layerfx_gradient_overlay	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_gradient_overlay($/;"	m	class:layerfxplugin
python_layerfx_inner_glow	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_inner_glow($/;"	m	class:layerfxplugin
python_layerfx_inner_shadow	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_inner_shadow($/;"	m	class:layerfxplugin
python_layerfx_outer_glow	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_outer_glow($/;"	m	class:layerfxplugin
python_layerfx_pattern_overlay	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_pattern_overlay($/;"	m	class:layerfxplugin
python_layerfx_reapply_effects	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_reapply_effects($/;"	m	class:layerfxplugin
python_layerfx_satin	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_satin($/;"	m	class:layerfxplugin
python_layerfx_stroke	_gimp/plug-ins/layerfx.py	/^  def python_layerfx_stroke($/;"	m	class:layerfxplugin
qf	_vim/plugged/vim-qf/plugin/qf.vim	/^augroup qf$/;"	a
qf#AddList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#AddList()$/;"	f
qf#AddTitle	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#AddTitle(title)$/;"	f
qf#CompleteList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#CompleteList(ArgLead, CmdLine, CursorPos)$/;"	f
qf#DoList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#DoList(line, cmd)$/;"	f
qf#FilterList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#FilterList(pat, reject)$/;"	f
qf#FunctionName	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#FunctionName(argument)$/;"	f
qf#GetFilePath	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#GetFilePath(line) abort$/;"	f
qf#JumpFileChunk	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#JumpFileChunk(down) abort$/;"	f
qf#JumpToFirstItemOfFileChunk	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#JumpToFirstItemOfFileChunk() abort$/;"	f
qf#ListLists	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#ListLists()$/;"	f
qf#LoadList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#LoadList(add, ...)$/;"	f
qf#NextFile	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#NextFile() abort$/;"	f
qf#PreviousFile	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#PreviousFile() abort$/;"	f
qf#RemoveList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#RemoveList(bang, ...)$/;"	f
qf#ResetLists	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#ResetLists()$/;"	f
qf#RestoreList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#RestoreList()$/;"	f
qf#ReuseTitle	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#ReuseTitle()$/;"	f
qf#SaveList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#SaveList(add, name) abort$/;"	f
qf#SetList	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#SetList(pat, reject)$/;"	f
qf#SetStatusline	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#SetStatusline()$/;"	f
qf#SetTitle	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#SetTitle(pat, reject)$/;"	f
qf#WrapCommand	_vim/plugged/vim-qf/autoload/qf.vim	/^function qf#WrapCommand(direction, prefix)$/;"	f
qsort	bin/waitkill.sh	/^qsort() {$/;"	f
query	_gimp/plug-ins/layerfx.py	/^  def query(self):$/;"	m	class:layerfxplugin
queryCache	_fzf/src/cache.go	/^type queryCache map[string][]*Item$/;"	t
queryCacheMax	_fzf/src/constants.go	/^	chunkSize int = 100$/;"	c
quit	_gimp/plug-ins/layerfx.py	/^  def quit(self):$/;"	m	class:layerfxplugin
quoteEntry	_fzf/src/terminal.go	/^func quoteEntry(entry string) string {$/;"	f
quote_args	bin/parallel	/^sub quote_args {$/;"	s
randItem	_fzf/src/merger_test.go	/^func randItem() *Item {$/;"	f
rangeEllipsis	_fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c
rank	_fzf/fzf	/^    def rank tuple$/;"	f
raw_input	_pythonrc.py	/^        def raw_input(self, *args):$/;"	m	class:EditableBufferInteractiveConsole
readFromCommand	_fzf/src/reader.go	/^func (r *Reader) readFromCommand(cmd string) {$/;"	f
readFromStdin	_fzf/src/reader.go	/^func (r *Reader) readFromStdin() {$/;"	f
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_bevel_emboss
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_color_overlay
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_drop_shadow
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_gradient_overlay
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_inner_glow
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_inner_shadow
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_outer_glow
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_pattern_overlay
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_satin
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable):$/;"	m	class:layerfx_stroke
readParasite	_gimp/plug-ins/layerfx.py	/^  def readParasite(self, img, drawable, keyname, *keysntypes):$/;"	m	class:layerfx_base
read_arg_from_fh	bin/parallel	/^sub read_arg_from_fh {$/;"	s
read_args_from_command_line	bin/parallel	/^sub read_args_from_command_line {$/;"	s
read_nb	_fzf/fzf	/^  def read_nb chars = 1, default = nil, tries = 10$/;"	f	class:start_search
read_nbs	_fzf/fzf	/^  def read_nbs$/;"	f	class:start_search
read_options	bin/parallel	/^sub read_options {$/;"	s
read_sshloginfile	bin/parallel	/^sub read_sshloginfile {$/;"	s
read_sshloginfiles	bin/parallel	/^sub read_sshloginfiles {$/;"	s
readonce	_fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
real_max_length	bin/parallel	/^sub real_max_length {$/;"	s
reap	_vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
reap_usleep	bin/parallel	/^sub reap_usleep {$/;"	s
reaper	bin/parallel	/^sub reaper {$/;"	s
reapplyEffects	_gimp/plug-ins/layerfx.py	/^  def reapplyEffects(self, img, drawable):$/;"	m	class:layerfx_reapply_effects
recall	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:recall() abort$/;"	f
record_env	bin/parallel	/^sub record_env {$/;"	s
redraw	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
refresh	_fzf/fzf	/^  def refresh$/;"	f	class:usage
refresh	_fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f
regress_bar	_vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
reindent	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
release	_vim/plugged/vim-autopep8/docs/conf.py	/^release = '1.0.7'$/;"	v
release	bin/parallel	/^sub release {$/;"	s
reload	_vim/autoload/plug.vim	/^function! s:reload()$/;"	f
remedian	bin/parallel	/^sub remedian {$/;"	s
remote_hosts	bin/parallel	/^sub remote_hosts {$/;"	s
remove	_fzf/uninstall	/^remove() {$/;"	f
removeOldLayer	_gimp/plug-ins/layerfx.py	/^  def removeOldLayer(self):$/;"	m	class:layerfx_base
removeOldLayer	_gimp/plug-ins/layerfx.py	/^  def removeOldLayer(self):$/;"	m	class:layerfx_bevel_emboss
removePreviews	_gimp/plug-ins/layerfx.py	/^  def removePreviews(self):$/;"	m	class:layerfx_base
removePreviews	_gimp/plug-ins/layerfx.py	/^  def removePreviews(self):$/;"	m	class:layerfx_bevel_emboss
remove_line	_fzf/uninstall	/^remove_line() {$/;"	f
remove_rec_sep	bin/parallel	/^sub remove_rec_sep {$/;"	s
remove_rtp	_vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
remove_triggers	_vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
render	_fzf/fzf	/^  def render &blk$/;"	f	class:start_search
reorg_rtp	_vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
replace	bin/parallel	/^sub replace {$/;"	s
replace_placeholders	bin/parallel	/^sub replace_placeholders {$/;"	s
replaced	bin/parallel	/^sub replaced {$/;"	s
repo	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo(...) abort$/;"	f
repo_aliases	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_aliases() dict abort$/;"	f
repo_bare	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_config(conf) dict abort$/;"	f
repo_dir	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_dirglob	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
repo_git_chomp	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
repo_head_ref	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
repo_keywordprg	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
repo_rev_parse	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
repo_tree	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
reqClose	_fzf/src/terminal.go	/^	reqRedraw$/;"	c
reqHeader	_fzf/src/terminal.go	/^	reqInfo$/;"	c
reqInfo	_fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c
reqJump	_fzf/src/terminal.go	/^	reqList$/;"	c
reqList	_fzf/src/terminal.go	/^	reqHeader$/;"	c
reqPreviewDisplay	_fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c
reqPreviewEnqueue	_fzf/src/terminal.go	/^	reqPrintQuery$/;"	c
reqPrintQuery	_fzf/src/terminal.go	/^	reqClose$/;"	c
reqPrompt	_fzf/src/terminal.go	/^const ($/;"	c
reqQuit	_fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c
reqRedraw	_fzf/src/terminal.go	/^	reqRefresh$/;"	c
reqRefresh	_fzf/src/terminal.go	/^	reqJump$/;"	c
reqReset	_fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c
reqRetry	_fzf/src/matcher.go	/^const ($/;"	c
reset	bin/chm2pdf.py	/^    def reset(self):$/;"	m	class:CssCatcher
reset	bin/chm2pdf.py	/^    def reset(self):$/;"	m	class:ImageCatcher
reset	bin/chm2pdf.py	/^    def reset(self):$/;"	m	class:PageLister
reset_failed	bin/parallel	/^sub reset_failed {$/;"	s
reset_failed_here	bin/parallel	/^sub reset_failed_here {$/;"	s
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_bevel_emboss
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_color_overlay
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_drop_shadow
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_gradient_overlay
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_inner_glow
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_inner_shadow
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_outer_glow
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_pattern_overlay
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_satin
resetbutton	_gimp/plug-ins/layerfx.py	/^  def resetbutton(self, widget):$/;"	m	class:layerfx_stroke
resizeWindows	_fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f
restore_winlocal_settings	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:restore_winlocal_settings() abort$/;"	f
retry	_vim/autoload/plug.vim	/^function! s:retry()$/;"	f
return	bin/parallel	/^sub return {$/;"	s
returnsize	bin/parallel	/^sub returnsize {$/;"	s
reverseStringArray	_fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f
revert	_vim/autoload/plug.vim	/^function! s:revert()$/;"	f
rm_rf	_vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
round_robin_write	bin/parallel	/^sub round_robin_write {$/;"	s
rtp	_vim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
rubout	_fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f
runeAt	_fzf/src/algo/algo.go	/^func runeAt(runes []rune, index int, max int, forward bool) rune {$/;"	f
runeWidth	_fzf/src/terminal.go	/^func runeWidth(r rune, prefixWidth int) int {$/;"	f
runsource	_pythonrc.py	/^        def runsource(self, source, *args):$/;"	m	class:EditableBufferInteractiveConsole
runtime	bin/parallel	/^sub runtime {$/;"	s
rxflag_for	_fzf/fzf	/^    def rxflag_for q$/;"	f	class:start_search.FuzzyMatcher
s	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^    nnoremap <buffer> s <C-w><CR>$/;"	m
s:TYPE	_vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:abstract_prototype	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:added_dbs	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:auEvents	_vim/plugged/undotree/plugin/undotree.vim	/^let s:auEvents = "BufEnter,InsertLeave,CursorMoved,BufWritePost"$/;"	v
s:b	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:b           = ""$/;"	v
s:b	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:b           = ",bold"$/;"	v
s:back	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^        let s:back    = s:base03$/;"	v
s:back	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = "NONE"$/;"	v
s:back	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:back$/;"	v
s:back	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:base02$/;"	v
s:back	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:back        = s:base03$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "#808080"$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "#839496"$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "12"$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "244"$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = "LightBlue"     " 4*$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = s:base1$/;"	v
s:base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base0       = s:temp00$/;"	v
s:base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "#585858"$/;"	v
s:base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "#657b83"$/;"	v
s:base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "11"$/;"	v
s:base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "240"$/;"	v
s:base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = "LightYellow"   " 3*$/;"	v
s:base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base00      = s:base0$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "#4e4e4e"$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "#586e75"$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "10"$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "239"$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = "LightGreen"    " 2*$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base00$/;"	v
s:base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base01      = s:base1$/;"	v
s:base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "#073642"$/;"	v
s:base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "#262626"$/;"	v
s:base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "0"$/;"	v
s:base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "235"$/;"	v
s:base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = "Black"         " 0$/;"	v
s:base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base02      = s:base2$/;"	v
s:base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "#002b36"$/;"	v
s:base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "#1c1c1c"$/;"	v
s:base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "234"$/;"	v
s:base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "8"$/;"	v
s:base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = "DarkGray"      " 0*$/;"	v
s:base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base03      = s:base3$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "#8a8a8a"$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "#93a1a1"$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "14"$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "245"$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = "LightCyan"     " 6*$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = s:base2$/;"	v
s:base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base1       = s:temp01$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "#d7d7af"$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "#eee8d5"$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "187"$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "7"$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = "LightGray"     " 7$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = s:base3$/;"	v
s:base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base2       = s:temp02$/;"	v
s:base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "#fdf6e3"$/;"	v
s:base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "#ffffd7"$/;"	v
s:base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "15"$/;"	v
s:base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "230"$/;"	v
s:base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = "White"         " 7*$/;"	v
s:base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:base3       = s:temp03$/;"	v
s:base_spec	_vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bb	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:bb          = ""$/;"	v
s:bb	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:bb          = ",bold"$/;"	v
s:blank_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let s:blank_regex = '\\v^\\s*(\\#.*)?$'$/;"	v
s:blank_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let s:blank_regex = '\\v^\\s*(\\#.*)?$'$/;"	v
s:block_rules	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:block_rules = {$/;"	v
s:block_rules_multiple	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:block_rules_multiple = {$/;"	v
s:blue	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "#0087ff"$/;"	v
s:blue	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "#268bd2"$/;"	v
s:blue	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "33"$/;"	v
s:blue	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "4"$/;"	v
s:blue	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:blue        = "DarkBlue"      " 4$/;"	v
s:bright	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:bright      = "* term=bold cterm=bold"$/;"	v
s:buffer_prototype	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:c	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:c               = ",undercurl"$/;"	v
s:cntr	_vim/plugged/undotree/plugin/undotree.vim	/^let s:cntr = 0$/;"	v
s:colorscheme_list	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:colorscheme_list=[$/;"	v
s:commands	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:commands = []$/;"	v
s:common_efm	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:common_efm = ''$/;"	v
s:cpo_save	_fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	_vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cyan	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#00afaf"$/;"	v
s:cyan	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "#2aa198"$/;"	v
s:cyan	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "37"$/;"	v
s:cyan	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "6"$/;"	v
s:cyan	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:cyan        = "DarkCyan"      " 6$/;"	v
s:debug	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:debug = 1$/;"	v
s:debug	_vim/plugged/undotree/plugin/undotree.vim	/^let s:debug = 0$/;"	v
s:debugfile	_vim/plugged/undotree/plugin/undotree.vim	/^let s:debugfile = $HOME.'\/undotree_debug.log'$/;"	v
s:default_action	_fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_height	_fzf/plugin/fzf.vim	/^let s:default_height = '40%'$/;"	v
s:defaults_list	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:defaults_list=[$/;"	v
s:diffpanel	_vim/plugged/undotree/plugin/undotree.vim	/^let s:diffpanel = s:new(s:panel)$/;"	v
s:dir_for_worktree	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:displayed_warnings	_vim/plugged/vim-flake8/autoload/flake8.vim	/^let s:displayed_warnings = 0$/;"	v
s:docstring_end_double_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let s:docstring_end_double_regex = '"""\\s*$'$/;"	v
s:docstring_end_double_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let s:docstring_end_double_regex = '"""\\s*$'$/;"	v
s:docstring_end_single_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let s:docstring_end_single_regex = '''''''\\s*$'$/;"	v
s:docstring_end_single_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let s:docstring_end_single_regex = '''''''\\s*$'$/;"	v
s:docstring_level	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^    let s:docstring_level = -1$/;"	v
s:docstring_level	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^    let s:docstring_level = SimpylFold_docstring_level$/;"	v
s:docstring_level	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^    let s:docstring_level = -1$/;"	v
s:docstring_level	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^    let s:docstring_level = SimpylFold_docstring_level$/;"	v
s:docstring_start_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let s:docstring_start_regex = '^\\s*[rR]\\?\\("""\\|''''''\\)\\%(.*\\1\\s*$\\)\\@!'$/;"	v
s:docstring_start_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let s:docstring_start_regex = '^\\s*[rR]\\?\\("""\\|''''''\\)\\%(.*\\1\\s*$\\)\\@!'$/;"	v
s:fg_pdef	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:fg_pdef = s:fg_violet$/;"	v
s:fg_phead	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:fg_phead = s:fg_orange$/;"	v
s:fg_ptable	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:fg_ptable = s:fg_blue$/;"	v
s:first_rtp	_vim/autoload/plug.vim	/^let s:first_rtp = s:escrtp(get(s:split_rtp(), 0, ''))$/;"	v
s:fzf_go	_fzf/plugin/fzf.vim	/^let s:fzf_go = expand('<sfile>:h:h').'\/bin\/fzf'$/;"	v
s:fzf_tmux	_fzf/plugin/fzf.vim	/^let s:fzf_tmux = expand('<sfile>:h:h').'\/bin\/fzf-tmux'$/;"	v
s:git_versions	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:green	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "#5f8700"$/;"	v
s:green	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "#719e07" "experimental$/;"	v
s:green	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "2"$/;"	v
s:green	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "64"$/;"	v
s:green	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:green       = "DarkGreen"     " 2$/;"	v
s:hash_colors	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:helpless	_vim/plugged/undotree/plugin/undotree.vim	/^let s:helpless = ['" Press ? for help.']$/;"	v
s:helpmore	_vim/plugged/undotree/plugin/undotree.vim	/^let s:helpmore = ['"    ===== Marks ===== ',$/;"	v
s:i	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:i           = ""$/;"	v
s:i	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:i           = ",italic"$/;"	v
s:import_level	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^    let s:import_level = -1$/;"	v
s:import_level	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^    let s:import_level = SimpylFold_import_level$/;"	v
s:import_level	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^    let s:import_level = -1$/;"	v
s:import_level	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^    let s:import_level = SimpylFold_import_level$/;"	v
s:import_start_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let s:import_start_regex = '^\\%(from\\|import\\)'$/;"	v
s:import_start_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let s:import_start_regex = '^\\%(from\\|import\\)'$/;"	v
s:install	_fzf/plugin/fzf.vim	/^let s:install = expand('<sfile>:h:h').'\/install'$/;"	v
s:installed	_fzf/plugin/fzf.vim	/^let s:installed = 0$/;"	v
s:is_win	_vim/autoload/plug.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['ClearHistory','C','Clear undo history']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['Close','q','Close this panel']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['DiffToggle','D','Toggle diff panel']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['Enter','<2-LeftMouse>','Revert to current']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['Enter','<cr>','Revert to current']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['FocusTarget','<tab>','Set Focus to editor']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['GoNextSaved','>','Revert to next saved state']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['GoNextState','K','Revert to next state']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['GoPreviousSaved','<','Revert to previous saved state']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['GoPreviousState','J','Revert to previous state']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['Help','?','Toggle quick help']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['Redo','<c-r>','Redo']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['TimestampToggle','T','Toggle relative timestamp']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap += [['Undo','u','Undo']]$/;"	v
s:keymap	_vim/plugged/undotree/plugin/undotree.vim	/^let s:keymap = []$/;"	v
s:known_files	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_rtp	_vim/autoload/plug.vim	/^let s:last_rtp  = s:escrtp(get(s:split_rtp(), -1, ''))$/;"	v
s:last_saved_list	_vim/plugged/vim-qf/autoload/qf.vim	/^let s:last_saved_list = ''$/;"	v
s:launcher	_fzf/plugin/fzf.vim	/^let s:launcher = function('s:xterm_launcher')$/;"	v
s:lazycat_list	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:lazycat_list=[$/;"	v
s:loaded	_vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:mac_gui	_vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:magenta	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#af005f"$/;"	v
s:magenta	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "#d33682"$/;"	v
s:magenta	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "125"$/;"	v
s:magenta	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "5"$/;"	v
s:magenta	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:magenta     = "DarkMagenta"   " 5$/;"	v
s:maxoff	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:maxoff = 50$/;"	v
s:maybe_in_progress	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:maybe_in_progress[module] = {}$/;"	v
s:maybe_in_progress	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:maybe_in_progress = {}$/;"	v
s:me	_vim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:multiline_def_end_regex	_vim/plugged/SimpylFold/ftplugin/cython/SimpylFold.vim	/^let s:multiline_def_end_regex = '):$'$/;"	v
s:multiline_def_end_regex	_vim/plugged/SimpylFold/ftplugin/python/SimpylFold.vim	/^let s:multiline_def_end_regex = '):$'$/;"	v
s:n	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:n               = "NONE"$/;"	v
s:named_lists	_vim/plugged/vim-qf/autoload/qf.vim	/^let s:named_lists = {}$/;"	v
s:noau	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^let s:noau       = 'silent noautocmd keepjumps'$/;"	v
s:node	_vim/plugged/undotree/plugin/undotree.vim	/^let s:node = {}$/;"	v
s:none	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:none            = "NONE"$/;"	v
s:noswapfile	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^let s:noswapfile = (2 == exists(':noswapfile')) ? 'noswapfile' : ''$/;"	v
s:nowait	_vim/plugged/vim-dirvish/ftplugin/dirvish.vim	/^let s:nowait = (v:version > 703 ? '<nowait>' : '')$/;"	v
s:nvim	_vim/autoload/plug.vim	/^let s:nvim = has('nvim') && exists('*jobwait') && !s:is_win$/;"	v
s:ob	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:ob              = ""$/;"	v
s:options_list	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:options_list=[$/;"	v
s:orange	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "#cb4b16"$/;"	v
s:orange	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "#d75f00"$/;"	v
s:orange	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "166"$/;"	v
s:orange	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "9"$/;"	v
s:orange	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:orange      = "LightRed"      " 1*$/;"	v
s:ou	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:ou              = ""$/;"	v
s:ou	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:ou          = ",underline"$/;"	v
s:panel	_vim/plugged/undotree/plugin/undotree.vim	/^let s:panel = {}$/;"	v
s:paren_pairs	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:paren_pairs = ['()', '{}', '[]']$/;"	v
s:plug_buf	_vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_src	_vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	_vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:r	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:r               = ",reverse"$/;"	v
s:red	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "#af0000"$/;"	v
s:red	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "#dc322f"$/;"	v
s:red	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "1"$/;"	v
s:red	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "124"$/;"	v
s:red	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:red         = "DarkRed"       " 1$/;"	v
s:repo_prototype	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:repos = {}$/;"	v
s:runner_exe	_vim/plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = gutentags#get_plat_file('update_tags')$/;"	v
s:s	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:s               = ",standout"$/;"	v
s:save_cpo	_vim/plugged/vim-flake8/autoload/flake8.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	_vim/plugged/vim-flake8/ftplugin/python_flake8.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	_vim/plugged/vim-qf/autoload/qf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	_vim/plugged/vim-qf/plugin/qf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	_vim/plugged/vim-qlist/plugin/qlist.vim	/^let s:save_cpo = &cpo$/;"	v
s:sep	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^let s:sep = exists('+shellslash') && !&shellslash ? '\\' : '\/'$/;"	v
s:sep	_vim/plugged/vim-dirvish/syntax/dirvish.vim	/^let s:sep = exists('+shellslash') && !&shellslash ? '\\\\' : '\\\/'$/;"	v
s:skip_after_opening_paren	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:skip_after_opening_paren = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_search	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:skip_search = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:skip_special_chars	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^    let s:skip_special_chars .= '|| s:is_concealed(line("."), col("."))'$/;"	v
s:skip_special_chars	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:skip_special_chars = 'synIDattr(synID(line("."), col("."), 0), "name") ' .$/;"	v
s:solarized_termtrans_default	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 0$/;"	v
s:solarized_termtrans_default	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:solarized_termtrans_default = 1$/;"	v
s:sp_back	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_back      = ""$/;"	v
s:sp_base0	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base0     = ""$/;"	v
s:sp_base00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base00    = ""$/;"	v
s:sp_base01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base01    = ""$/;"	v
s:sp_base02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base02    = ""$/;"	v
s:sp_base03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base03    = ""$/;"	v
s:sp_base1	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base1     = ""$/;"	v
s:sp_base2	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base2     = ""$/;"	v
s:sp_base3	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_base3     = ""$/;"	v
s:sp_blue	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_blue      = ""$/;"	v
s:sp_cyan	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_cyan      = ""$/;"	v
s:sp_green	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_green     = ""$/;"	v
s:sp_magenta	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_magenta   = ""$/;"	v
s:sp_none	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_none      = ""$/;"	v
s:sp_orange	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_orange    = ""$/;"	v
s:sp_red	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_red       = ""$/;"	v
s:sp_violet	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_violet    = ""$/;"	v
s:sp_yellow	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:sp_yellow    = ""$/;"	v
s:stop_statement	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^let s:stop_statement = '^\\s*\\(break\\|continue\\|raise\\|return\\|pass\\)\\>'$/;"	v
s:t_none	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:t_none          = "NONE"$/;"	v
s:temp00	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:temp00      = s:base00$/;"	v
s:temp01	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:temp01      = s:base01$/;"	v
s:temp02	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:temp02      = s:base02$/;"	v
s:temp03	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:temp03      = s:base03$/;"	v
s:temp_files	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:terminal_italic	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^            let s:terminal_italic=1$/;"	v
s:terminal_italic	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=0 " terminals will be guilty until proven compatible$/;"	v
s:terminal_italic	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:terminal_italic=1 " TODO: could refactor to not require this at all$/;"	v
s:terms_italic	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:terms_italic=[$/;"	v
s:terms_noitalic	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^let s:terms_noitalic=[$/;"	v
s:timeDay	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeDay  = '1 d'$/;"	v
s:timeDay	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeDay  = '1 day ago'$/;"	v
s:timeDays	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeDays = ' d'$/;"	v
s:timeDays	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeDays = ' days ago'$/;"	v
s:timeHour	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeHour  = '1 h'$/;"	v
s:timeHour	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeHour  = '1 hour ago'$/;"	v
s:timeHours	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeHours = ' h'$/;"	v
s:timeHours	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeHours = ' hours ago'$/;"	v
s:timeMinute	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeMinute  = '1 m'$/;"	v
s:timeMinute	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeMinute  = '1 minute ago'$/;"	v
s:timeMinutes	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeMinutes = ' m'$/;"	v
s:timeMinutes	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeMinutes = ' minutes ago'$/;"	v
s:timeOriginal	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeOriginal = 'Orig'$/;"	v
s:timeOriginal	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeOriginal = 'Original'$/;"	v
s:timeSecond	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeSecond  = '1 s'$/;"	v
s:timeSecond	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeSecond = '1 second ago'$/;"	v
s:timeSeconds	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeSeconds = ' s'$/;"	v
s:timeSeconds	_vim/plugged/undotree/plugin/undotree.vim	/^    let s:timeSeconds = ' seconds ago'$/;"	v
s:triggers	_vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:u	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:u           = ""$/;"	v
s:u	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:u           = ",underline"$/;"	v
s:undotree	_vim/plugged/undotree/plugin/undotree.vim	/^let s:undotree = s:new(s:panel)$/;"	v
s:unix_redir	_vim/plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:update_queue	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:violet	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "#5f5faf"$/;"	v
s:violet	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "#6c71c4"$/;"	v
s:violet	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "13"$/;"	v
s:violet	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "61"$/;"	v
s:violet	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:violet      = "LightMagenta"  " 5*$/;"	v
s:vmode	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:vmode       = "cterm"$/;"	v
s:vmode	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:vmode       = "gui"$/;"	v
s:worktree_for_dir	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:yellow	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#af8700"$/;"	v
s:yellow	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "#b58900"$/;"	v
s:yellow	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "136"$/;"	v
s:yellow	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "3"$/;"	v
s:yellow	_vim/plugged/vim-colors-solarized/colors/solarized.vim	/^    let s:yellow      = "DarkYellow"    " 3$/;"	v
save_original_signal_handler	bin/parallel	/^sub save_original_signal_handler {$/;"	s
save_state	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:save_state(d) abort$/;"	f
save_stdin_stdout_stderr	bin/parallel	/^sub save_stdin_stdout_stderr {$/;"	s
savehist	_pythonrc.py	/^        def savehist(self):$/;"	m	class:Completer
scan	_fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f
section	_vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
selectedItem	_fzf/src/terminal.go	/^type selectedItem struct {$/;"	t
send_keys	_fzf/test/test_go.rb	/^  def send_keys *args$/;"	f	class:Tmux
separator	_vim/plugged/vim-eunuch/plugin/eunuch.vim	/^function! s:separator()$/;"	f
seq	bin/parallel	/^sub seq {$/;"	s
serverlogin	bin/parallel	/^sub serverlogin {$/;"	s
set	_fzf/fzf	/^  def set name, value = nil$/;"	f	class:FZF
set_altbuf	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:set_altbuf(bnr) abort$/;"	f
set_delta_time	bin/parallel	/^sub set_delta_time {$/;"	s
set_endtime	bin/parallel	/^sub set_endtime {$/;"	s
set_exitsignal	bin/parallel	/^sub set_exitsignal {$/;"	s
set_exitstatus	bin/parallel	/^sub set_exitstatus {$/;"	s
set_fd	bin/parallel	/^sub set_fd {$/;"	s
set_fd_file_name	bin/parallel	/^sub set_fd_file_name {$/;"	s
set_hidden_layer	_gimp/plug-ins/layerfx.py	/^  def set_hidden_layer(self, layer):$/;"	m	class:layerfx_base
set_job_in_joblog	bin/parallel	/^sub set_job_in_joblog {$/;"	s
set_last_login_at	bin/parallel	/^sub set_last_login_at {$/;"	s
set_max_jobs_running	bin/parallel	/^sub set_max_jobs_running {$/;"	s
set_max_loadavg	bin/parallel	/^sub set_max_loadavg {$/;"	s
set_maxlength	bin/parallel	/^sub set_maxlength {$/;"	s
set_ncpus	bin/parallel	/^sub set_ncpus {$/;"	s
set_pid	bin/parallel	/^sub set_pid {$/;"	s
set_remedian	bin/parallel	/^sub set_remedian {$/;"	s
set_seq	bin/parallel	/^sub set_seq {$/;"	s
set_sshlogin	bin/parallel	/^sub set_sshlogin {$/;"	s
set_starttime	bin/parallel	/^sub set_starttime {$/;"	s
set_stdin_buffer	bin/parallel	/^sub set_stdin_buffer {$/;"	s
set_time_to_login	bin/parallel	/^sub set_time_to_login {$/;"	s
set_var	_fzf/test/test_go.rb	/^  def set_var name, val$/;"	f	class:TestFish
set_var	_fzf/test/test_go.rb	/^  def set_var name, val$/;"	f	class:TestShell
set_virgin	bin/parallel	/^sub set_virgin {$/;"	s
setup	_fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase
setup	_fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBash
setup	_fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestFish
setup	_fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	_fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestShell
setup	_fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestZsh
setup_basefile	bin/parallel	/^sub setup_basefile {$/;"	s
setup_paste	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:setup_paste() abort$/;"	f
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-bevel-emboss"$/;"	v	class:layerfx_bevel_emboss
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-color-overlay"$/;"	v	class:layerfx_color_overlay
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-drop-shadow"$/;"	v	class:layerfx_drop_shadow
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-gradient-overlay"$/;"	v	class:layerfx_gradient_overlay
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-inner-glow"$/;"	v	class:layerfx_inner_glow
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-inner-shadow"$/;"	v	class:layerfx_inner_shadow
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-outer-glow"$/;"	v	class:layerfx_outer_glow
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-pattern-overlay"$/;"	v	class:layerfx_pattern_overlay
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-satin"$/;"	v	class:layerfx_satin
shelfkey	_gimp/plug-ins/layerfx.py	/^  shelfkey = "layerfx-stroke"$/;"	v	class:layerfx_stroke
shell_quote	bin/parallel	/^sub shell_quote {$/;"	s
shell_quote_empty	bin/parallel	/^sub shell_quote_empty {$/;"	s
shell_quote_scalar	bin/parallel	/^sub shell_quote_scalar {$/;"	s
shell_unquote	bin/parallel	/^sub shell_unquote {$/;"	s
shellesc	_fzf/plugin/fzf.vim	/^function! s:shellesc(arg)$/;"	f
shellesc	_vim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
shellesc	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellslash	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:shellslash(path) abort$/;"	f
shiftwidth	_vim/plugged/vim-python-pep8-indent/spec/spec_helper.rb	/^    def shiftwidth$/;"	f
should_be_retried	bin/parallel	/^sub should_be_retried {$/;"	s
should_reload	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:should_reload() abort$/;"	f
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_bevel_emboss
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_color_overlay
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_drop_shadow
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_gradient_overlay
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_inner_glow
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_inner_shadow
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_outer_glow
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_pattern_overlay
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_satin
showDialog	_gimp/plug-ins/layerfx.py	/^  def showDialog(self):$/;"	m	class:layerfx_stroke
show_error_msg	_gimp/plug-ins/layerfx.py	/^  def show_error_msg(self, msg, e):$/;"	m	class:layerfx_base
show_limits	bin/parallel	/^sub show_limits {$/;"	s
simple_replace_placeholders	bin/parallel	/^sub simple_replace_placeholders {$/;"	s
simultaneous_sshlogin	bin/parallel	/^sub simultaneous_sshlogin {$/;"	s
simultaneous_sshlogin_limit	bin/parallel	/^sub simultaneous_sshlogin_limit {$/;"	s
size	bin/parallel	/^sub size {$/;"	s
sizeSpec	_fzf/src/options.go	/^type sizeSpec struct {$/;"	t
sl	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:sl(path) abort$/;"	f
sliceChunks	_fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f
snapshot	_vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
sort	_fzf/fzf	/^    def sort list$/;"	f
sortCriteria	_fzf/src/item.go	/^var sortCriteria []criterion$/;"	v
sortSelected	_fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f
sort_insert	bin/waitkill.sh	/^sort_insert() {$/;"	f
sort_merge	bin/waitkill.sh	/^sort_merge() {$/;"	f
source	_vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
source_suffix	_vim/plugged/vim-autopep8/docs/conf.py	/^source_suffix = '.rst'$/;"	v
spawn	_vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
spinnerDuration	_fzf/src/constants.go	/^	initialDelayTac = 100 * time.Millisecond$/;"	c
split	_fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
split	bin/chm2pdf.py	/^def split(path):$/;"	f
splitNth	_fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f
split_rtp	_vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
splittable	_fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
spreadstdin	bin/parallel	/^sub spreadstdin {$/;"	s
sshcleanup	bin/parallel	/^sub sshcleanup {$/;"	s
sshcommand	bin/parallel	/^sub sshcommand {$/;"	s
sshcommand_of_sshlogin	bin/parallel	/^sub sshcommand_of_sshlogin {$/;"	s
sshlogin	bin/parallel	/^sub sshlogin {$/;"	s
sshlogin_wrap	bin/parallel	/^sub sshlogin_wrap {$/;"	s
sshreturn	bin/parallel	/^sub sshreturn {$/;"	s
sshtransfer	bin/parallel	/^sub sshtransfer {$/;"	s
stage_info	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:stage_info(lnum) abort$/;"	f
start	_fzf/fzf	/^  def start$/;"	f
start	_gimp/plug-ins/layerfx.py	/^  def start(self):$/;"	m	class:layerfxplugin
start	bin/parallel	/^sub start {$/;"	s
start_another_job	bin/parallel	/^sub start_another_job {$/;"	s
start_img	bin/chm2pdf.py	/^    def start_img(self,attrs):$/;"	m	class:ImageCatcher
start_link	bin/chm2pdf.py	/^    def start_link(self,attrs):$/;"	m	class:CssCatcher
start_loop	_fzf/fzf	/^  def start_loop$/;"	f	class:start_search
start_more_jobs	bin/parallel	/^sub start_more_jobs {$/;"	s
start_no_new_jobs	bin/parallel	/^sub start_no_new_jobs {$/;"	s
start_param	bin/chm2pdf.py	/^    def start_param(self,attrs):$/;"	m	class:PageLister
start_reader	_fzf/fzf	/^  def start_reader$/;"	f
start_renderer	_fzf/fzf	/^  def start_renderer$/;"	f	class:start_search
start_search	_fzf/fzf	/^  def start_search &callback$/;"	f
start_with?	_fzf/test/test_go.rb	/^  def start_with? str$/;"	f	class:NilClass
starttime	bin/parallel	/^sub starttime {$/;"	s
status	_vim/autoload/plug.vim	/^function! s:status()$/;"	f
status_load	_vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
status_update	_vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
statusbump	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:statusbump() abort$/;"	f
stdin_buffer_length	bin/parallel	/^sub stdin_buffer_length {$/;"	s
strLines	_fzf/src/options.go	/^func strLines(str string) []string {$/;"	f
string	bin/parallel	/^sub string {$/;"	s
stringToColor	_gimp/plug-ins/layerfx.py	/^  def stringToColor(self, string):$/;"	m	class:layerfx_base
string_decode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:string_decode(str)$/;"	f
string_encode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:string_encode(str)$/;"	f
sub	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sum	bin/parallel	/^sub sum {$/;"	s
sw	_vim/plugged/vim-python-pep8-indent/indent/python.vim	/^    function! s:sw()$/;"	f
swap	bin/waitkill.sh	/^swap() {$/;"	f
swap_activity	bin/parallel	/^sub swap_activity {$/;"	s
swapping	bin/parallel	/^sub swapping {$/;"	s
switch_fill_panes	_gimp/plug-ins/layerfx.py	/^  def switch_fill_panes(self, widget, *extra):$/;"	m	class:layerfx_stroke
switch_in	_vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
switch_out	_vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
symlink	_fzf/install	/^symlink() {$/;"	f
sync	_fzf/fzf	/^  def sync$/;"	f	class:FZF
syntax	_vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
sys	_vim/ftplugin/python.vim	/^import sys$/;"	m
system	_vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
system_chomp	_vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
t	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^    nnoremap <buffer> t <C-w><CR><C-w>T$/;"	m
tab_win_do	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:tab_win_do(tnr, cmd, bname) abort$/;"	f
tabstop	_vim/plugged/vim-python-pep8-indent/spec/spec_helper.rb	/^    def tabstop$/;"	f
tag	bin/parallel	/^sub tag {$/;"	s
teardown	_fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	_fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestShell
templates_path	_vim/plugged/vim-autopep8/docs/conf.py	/^templates_path = ['_templates']$/;"	v
tempname	_fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	_fzf/src/pattern.go	/^type term struct {$/;"	t
termEqual	_fzf/src/pattern.go	/^	termSuffix$/;"	c
termExact	_fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c
termFuzzy	_fzf/src/pattern.go	/^const ($/;"	c
termPrefix	_fzf/src/pattern.go	/^	termExact$/;"	c
termSet	_fzf/src/pattern.go	/^type termSet []term$/;"	t
termSuffix	_fzf/src/pattern.go	/^	termPrefix$/;"	c
termType	_fzf/src/pattern.go	/^type termType int$/;"	t
terminal_columns	bin/parallel	/^sub terminal_columns {$/;"	s
test_alt_c	_fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	class:TestShell
test_alt_c_command	_fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	class:TestShell
test_bind	_fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	_fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_cancel	_fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_ctrl_r	_fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	class:TestShell
test_ctrl_t	_fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	class:TestShell
test_ctrl_t_command	_fzf/test/test_go.rb	/^  def test_ctrl_t_command$/;"	f	class:TestShell
test_ctrl_t_unicode	_fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	class:TestShell
test_custom_completion	_fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	class:CompletionTest
test_cycle	_fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	_fzf/test/test_go.rb	/^  def test_default_extended$/;"	f
test_dir_completion	_fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	class:CompletionTest
test_exact	_fzf/test/test_go.rb	/^  def test_exact$/;"	f
test_execute	_fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	_fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_shell	_fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	_fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	_fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	_fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f
test_expect	_fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	_fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	_fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_file_completion	_fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	class:CompletionTest
test_file_completion_root	_fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	class:CompletionTest
test_file_completion_unicode	_fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	class:CompletionTest
test_filter_exitstatus	_fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_fzf_default_command	_fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_header	_fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	_fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	_fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines	_fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	_fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	_fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_with_nth	_fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	_fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_history	_fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	_fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f
test_invalid_cache	_fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_option	_fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_invalid_term	_fzf/test/test_go.rb	/^  def test_invalid_term$/;"	f	class:TestGoFZF
test_jump	_fzf/test/test_go.rb	/^  def test_jump$/;"	f
test_jump_accept	_fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f
test_key_bindings	_fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_long_line	_fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	_fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	_fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_multi_order	_fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_or_operator	_fzf/test/test_go.rb	/^  def test_or_operator$/;"	f
test_partial_caching	_fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f
test_preview	_fzf/test/test_go.rb	/^  def test_preview$/;"	f
test_preview_hidden	_fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f
test_process_completion	_fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	class:CompletionTest
test_query_unicode	_fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	_fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_scroll	_fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_select_1	_fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	_fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	_fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	_fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_sync	_fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	_fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	_fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	_fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	_fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	_fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_end_backward_scan	_fzf/test/test_go.rb	/^  def test_tiebreak_end_backward_scan$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	_fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth_trim_length	_fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth_trim_length$/;"	f	class:TestGoFZF
test_tiebreak_list	_fzf/test/test_go.rb	/^  def test_tiebreak_list$/;"	f	class:TestGoFZF
test_tiebreak_white_prefix	_fzf/test/test_go.rb	/^  def test_tiebreak_white_prefix$/;"	f	class:TestGoFZF
test_toggle_sort	_fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_unicode_case	_fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	_fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	class:CompletionTest
test_vanilla	_fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_with_nth	_fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	_fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	_fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
texinfo_documents	_vim/plugged/vim-autopep8/docs/conf.py	/^texinfo_documents = [$/;"	v
throw	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:throw(string) abort$/;"	f
tick	_vim/autoload/plug.vim	/^function! s:tick()$/;"	f
time_to_login	bin/parallel	/^sub time_to_login {$/;"	s
timedout	bin/parallel	/^sub timedout {$/;"	s
tmp_joblog	bin/parallel	/^  sub tmp_joblog {$/;"	s
tmux_enabled	_fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
to_a	_vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
to_s	_vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
toggle	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:toggle(op) abort$/;"	f
toggle_progress	bin/parallel	/^sub toggle_progress {$/;"	s
togglebg#map	_vim/plugged/vim-colors-solarized/autoload/togglebg.vim	/^function! togglebg#map(mapActivation)$/;"	f
tokenize	_fzf/fzf	/^    def tokenize str$/;"	f	class:start_search.Matcher
tokenize	_fzf/fzf	/^  def tokenize delim, nth$/;"	f	class:String
too_fast_remote_login	bin/parallel	/^sub too_fast_remote_login {$/;"	s
total_failed	bin/parallel	/^sub total_failed {$/;"	s
total_jobs	bin/parallel	/^sub total_jobs {$/;"	s
transfer	bin/parallel	/^sub transfer {$/;"	s
transfersize	bin/parallel	/^sub transfersize {$/;"	s
transform	_fzf/fzf	/^  def transform line$/;"	f
trim	_fzf/fzf	/^    def trim str, len, left$/;"	f	class:usage
trim	_vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
trimLeft	_fzf/src/terminal.go	/^func trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f
trimRight	_fzf/src/terminal.go	/^func trimRight(runes []rune, width int) ([]rune, int) {$/;"	f
trim_of	bin/parallel	/^sub trim_of {$/;"	s
try_curl	_fzf/install	/^try_curl() {$/;"	f
try_visit	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:try_visit(bnr) abort$/;"	f
try_wget	_fzf/install	/^try_wget() {$/;"	f
undef_as_empty	bin/parallel	/^sub undef_as_empty {$/;"	s
undef_as_zero	bin/parallel	/^sub undef_as_zero {$/;"	s
undotree.Action	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Action(action)$/;"	f
undotree.ActionClearHistory	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionClearHistory()$/;"	f
undotree.ActionClose	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionClose()$/;"	f
undotree.ActionDiffToggle	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionDiffToggle()$/;"	f
undotree.ActionEnter	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionEnter()$/;"	f
undotree.ActionFocusTarget	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionFocusTarget()$/;"	f
undotree.ActionGoNextSaved	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionGoNextSaved()$/;"	f
undotree.ActionGoNextState	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionGoNextState()$/;"	f
undotree.ActionGoPreviousSaved	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionGoPreviousSaved()$/;"	f
undotree.ActionGoPreviousState	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionGoPreviousState()$/;"	f
undotree.ActionHelp	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionHelp()$/;"	f
undotree.ActionInTarget	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionInTarget(cmd)$/;"	f
undotree.ActionRedo	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionRedo()$/;"	f
undotree.ActionTimestampToggle	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionTimestampToggle()$/;"	f
undotree.ActionUndo	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ActionUndo()$/;"	f
undotree.AppendHelp	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.AppendHelp()$/;"	f
undotree.BindAu	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.BindAu()$/;"	f
undotree.BindKey	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.BindKey()$/;"	f
undotree.ConvertInput	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.ConvertInput(updatetree)$/;"	f
undotree.Draw	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Draw()$/;"	f
undotree.GetStatusLine	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.GetStatusLine()$/;"	f
undotree.Index2Screen	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Index2Screen(index)$/;"	f
undotree.Init	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Init()$/;"	f
undotree.MarkSeqs	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.MarkSeqs()$/;"	f
undotree.Render	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Render()$/;"	f
undotree.Screen2Index	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Screen2Index(line)$/;"	f
undotree.SetTargetFocus	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.SetTargetFocus()$/;"	f
undotree.Show	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Show()$/;"	f
undotree.Toggle	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Toggle()$/;"	f
undotree.Update	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.Update()$/;"	f
undotree.UpdateDiff	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree.UpdateDiff()$/;"	f
undotree._parseNode	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotree._parseNode(in,out)$/;"	f
undotreeAction	_vim/plugged/undotree/plugin/undotree.vim	/^function! s:undotreeAction(action)$/;"	f
unget	bin/parallel	/^sub unget {$/;"	s
unlock	bin/parallel	/^sub unlock {$/;"	s
unset_hidden_layer	_gimp/plug-ins/layerfx.py	/^  def unset_hidden_layer(self):$/;"	m	class:layerfx_base
until	_fzf/test/test_go.rb	/^  def until pane = 0$/;"	f	class:Tmux
update	_vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
update_delta_time	bin/parallel	/^sub update_delta_time {$/;"	s
update_finish	_vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
update_impl	_vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
update_list	_fzf/fzf	/^  def update_list wipe$/;"	f	class:start_search
update_python	_vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
update_ruby	_vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
update_tags	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(module, write_mode, queue_mode) abort$/;"	f
update_vim	_vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
upgrade	_fzf/plugin/fzf.vim	/^function! s:upgrade(dict)$/;"	f
upgrade	_vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
upgrade_specs	_vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
url_decode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:url_decode(str)$/;"	f
url_encode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:url_encode(str)$/;"	f
usage	_fzf/fzf	/^  def usage x, message = nil$/;"	f
usage	_fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c
usage	bin/chm2pdf.py	/^def usage (name):$/;"	f
usage	bin/parallel	/^sub usage {$/;"	s
user_requested_processes	bin/parallel	/^sub user_requested_processes {$/;"	s
usleep	bin/parallel	/^sub usleep {$/;"	s
util	_fzf/src/util/atomicbool.go	/^package util$/;"	p
util	_fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	_fzf/src/util/eventbox.go	/^package util$/;"	p
util	_fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	_fzf/src/util/util.go	/^package util$/;"	p
util	_fzf/src/util/util_test.go	/^package util$/;"	p
v	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^    nnoremap <buffer> v <C-w><CR><C-w>L<C-w>p<C-w>J<C-w>p$/;"	m
v=	_fzf/fzf	/^    def v= v$/;"	f	class:start_search.MouseEvent
validatedata	_gimp/plug-ins/layerfx.py	/^  def validatedata(self, img, drawable, *params):$/;"	m	class:layerfx_base
value	bin/dropbox_set_lansync.py	/^			value = 1 if enable_lansync else 0$/;"	v
value	bin/dropbox_set_lansync.py	/^			value = enable_lansync$/;"	v
version	_fzf/fzf	/^    def version$/;"	f
version	_fzf/src/constants.go	/^const ($/;"	c
version	_vim/plugged/vim-autopep8/docs/conf.py	/^version = '1.0.7'$/;"	v
version	bin/chm2pdf.py	/^version = '0.9.1'$/;"	v
version	bin/parallel	/^sub version {$/;"	s
version_requirement	_vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
vim	_vim/ftplugin/python.vim	/^import vim$/;"	m
virgin	bin/parallel	/^sub virgin {$/;"	s
vmove	_fzf/src/terminal.go	/^func (t *Terminal) vmove(o int) {$/;"	f
vselect	_fzf/fzf	/^  def vselect &prc$/;"	f	class:start_search
vset	_fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f
wait	_fzf/test/test_go.rb	/^def wait$/;"	f
wait_and_exit	bin/parallel	/^sub wait_and_exit {$/;"	s
warn	_fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
warn	_vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
warn	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:warn(str) abort$/;"	f
warning	bin/parallel	/^sub warning {$/;"	s
width	_fzf/fzf	/^    def width str$/;"	f	class:usage
win_init	_vim/plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:win_init() abort$/;"	f
windowPosition	_fzf/src/options.go	/^type windowPosition int$/;"	t
winshell	_vim/plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:winshell() abort$/;"	f
withPrefixLengths	_fzf/src/tokenizer.go	/^func withPrefixLengths(tokens [][]rune, begin int) []Token {$/;"	f
with_cd	_vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
within?	_fzf/fzf	/^    def within?$/;"	f	class:start_search.MouseEvent
workdir	bin/parallel	/^sub workdir {$/;"	s
wrap	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
wrapreg	_vim/plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
write	bin/parallel	/^sub write {$/;"	s
writeParasite	_gimp/plug-ins/layerfx.py	/^  def writeParasite(self, drawable, fxlayer, *controls):$/;"	m	class:layerfx_base
writeParasite	_gimp/plug-ins/layerfx.py	/^  def writeParasite(self, drawable, fxlayer, *controls):$/;"	m	class:layerfx_bevel_emboss
writeParasiteRaw	_gimp/plug-ins/layerfx.py	/^  def writeParasiteRaw(self, drawable, fxlayer, *values):$/;"	m	class:layerfx_base
writeParasiteRaw	_gimp/plug-ins/layerfx.py	/^  def writeParasiteRaw(self, drawable, fxlayer, *values):$/;"	m	class:layerfx_bevel_emboss
write_pdf	bin/odf2pdf.py	/^def write_pdf(doc, pdf_filename):$/;"	f
write_record_to_pipe	bin/parallel	/^sub write_record_to_pipe {$/;"	s
write_triggered_update_tags	_vim/plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags() abort$/;"	f
writelines	_fzf/test/test_go.rb	/^  def writelines path, lines$/;"	f
xapply_get	bin/parallel	/^sub xapply_get {$/;"	s
xml_decode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_decode(str)$/;"	f
xml_encode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_encode(str)$/;"	f
xml_entity_decode	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^function! s:xml_entity_decode(str)$/;"	f
xterm_launcher	_fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
y	bin/ansicolors	/^y=16$/;"	v
yO	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> yO  :call <SID>setup_paste()<CR>O$/;"	m
yS	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
yo	_vim/plugged/vim-unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> yo  :call <SID>setup_paste()<CR>o$/;"	m
ys	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	_vim/plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
zsh	_fzf/test/test_go.rb	/^    def zsh$/;"	f	class:Shell
{	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^nnoremap <silent> <buffer> { :call qf#PreviousFile()<CR>$/;"	m
}	_vim/plugged/vim-qf/after/ftplugin/qf.vim	/^nnoremap <silent> <buffer> } :call qf#NextFile()<CR>$/;"	m
