#!/bin/bash +x

# TODO {{{
# Requisites:
#	build-essential
#	libtool
#	autogen
#	automake
#   autopoint
#   pkg-config
#	python-pip

#github_fetch ${GITHUB_REP}
#GITHUB_URL="https://github.com/"
#GITHUB_REP=" github/gitignore "
#
# Add a way to listall all plants
# Add a variable to point to BLUEPRINT (FACTORYBLUEPRINT)
# Check all references to cd - and cd and change for pushd/popd
# Instal gperf
# python lxml
# Libmount-dev
# EFL DEPS
# libpoppler-cpp-dev
# libspectre
# libraw-dev
# librsvg2-dev
# libcairo2-dev
# Add a globalconf file in a external file
# Add PREFIX as source to libraries headers and binaries
# Find a way to not download sources (parameter)
# More elegant way to proxy
# Setting up proxy (call the parameter with password)
# Implement a way it can be called from "source or execution" 
# if [ ${#} -gt 1 ]; then
# 	PROXYPASS=${1}
# 	PROXYUSER="${2:-$(whoami)}"
# 	PROXYSERVER="${3:-'165.225.34.32:80'}"
# 	export http_proxy="http://${PROXYUSER}@${PROXYSERVER}"
# 	export https_proxy="http://${PROXYUSER}@${PROXYSERVER}"
# 	echo ${http_proxy}
# fi
# Stop production when a error ocurrs
# put the correct requisites where it should be
#}}}

# Inital variables {{{
# Where to install the packages
FACTORY_PREFIX=${HOME}/usr


# Where all conf lies
FACTORY_CONFDIR=${HOME}/bin/factory.d

# Where to store the sources
FACTORY_SRCDIR="${HOME}/src"

# Add more paths to build
PATH=${FACTORY_PREFIX}/bin:${HOME}/bin:${PATH}

# Insert the compiled libraries on lib path
PKG_CONFIG_PATH=${FACTORY_PREFIX}/lib/pkgconfig:${PKG_CONFIG_PATH}
LD_LIBRARY_PATH=${FACTORY_PREFIX}/lib:${LD_LIBRARY_PATH}
LD_RUN_PATH=${FACTORY_PREFIX}/lib:${LD_RUN_PATH}

# Compilation flags
CFLAGS+=" -O3 -ffast-math -march=native"
CFLAGS+=" -I${FACTORY_PREFIX}/include"
LDFLAGS+=" -L${FACTORY_PREFIX}/lib"
# LIBS        libraries to pass to the linker, e.g. -l<library>
# CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if
#             you have headers in a nonstandard directory <include dir>

PREFIX=${FACTORY_PREFIX}


# Execute starting procedures 
[ -d "${FACTORY_SRCDIR}" ] || mkdir -p ${FACTORY_SRCDIR}

export FACTORY_SRCDIR FACTORY_CONFDIR FACTORY_PREFIX
export PATH PKG_CONFIG_PATH LD_LIBRARY_PATH LD_RUN_PATH CFLAGS LDFLAGS PREFIX

#}}}

# Support functions {{{
function a_c_m_mi() {
	./autogen.sh && \ 
	./configure ${CONF_FLAGS} --prefix=${FACTORY_PREFIX} && \
	make && \ 
	make install || return 1
}
	

function c_m_mi() {
	    ./configure ${CONF_FLAGS} --prefix=${FACTORY_PREFIX} && \
		make && \
		make install || return 1
}


function m_mi() {
		make && \
		make install || return 1
}

function m_mip() {
		make && \
		make install PREFIX=${FACTORY_PREFIX} || return 1
}

function bullet3_compile() {
	./build_and_run_premake.sh && \
	./premake4_linux64 gmake && \
	pushd gmake && \
	m_mi && \
	popd
}

function fetch_cvs() {
	while (( "${#}" )); do
		# CVSROOT="${REPOSITORY}"
		echo -ne "NOPASSWD\n" | \
		cvs -d "${REPOSITORY}" login 
		cvs -d "${REPOSITORY}" checkout ${1}
		shift
	done
}


function fetch_git() {
	while (( "${#}" )); do
		git clone ${REPOSITORY}/${1}.git 
		shift
	done
}


function fetch() {
	while (( "${#}" )); do
		fetch_${METHOD} ${1}
		shift
	done
	
}


function compile() {
	dstdir=${1##*/}
	pushd ${dstdir} && \
	${BUILD} && \
	popd
}


function produce() {

	if [ -z "${1}" ]; then
		echo "We need a blueprint. Choose from:"
		ls -1 ${FACTORY_CONFDIR}
		return 1
	fi

	BLUEPRINT=${FACTORY_CONFDIR}/${1}.conf 
	if [ ! -r ${BLUEPRINT} ]; then
		echo "${RED}Couldn't set up the blueprint for${CRST} ${BLUEPRINT}"
		return
	fi

	if [ "${INSTALL_THIS_BLUEPRINT}" = "NO" ]; then
		echo "${YELLOW}Plant ${CRST}${BLUEPRINT}${YELLOW} will not be installed${CRST}"
		return
	fi

	source ${BLUEPRINT}
	echo -ne "${GREEN}=========================================\n"
	echo -ne "${GREEN}       ${1}\n"
	echo -ne "${GREEN}=========================================\n"
	echo -ne "${CRST}"
	pushd ${FACTORY_SRCDIR}
	for module in ${MODULES}; do
	    echo -ne "${RED}=========================================\n"
		echo -ne "${RED}            ${module}\n"
	    echo -ne "${RED}=========================================\n"
	    echo -ne "${CRST}"
		dstdir=${module##*/}
		fetch ${module}
		compile ${module}
		shift
	popd
	done

	unset METHOD BUILD REPOSITORY PKGDEP MODULES dstdir
}

function mass_produce() {
	for file in ${FACTORY_CONFDIR}/*; do
		PACKAGE=$(basename ${file})
		PACKAGE=${PACKAGE%.*}
		produce ${PACKAGE}
	done
}
# }}}

# Main {{{
case $- in
	*i*) return ;;
	*)
		produce libjpeg
		produce libgif
		produce libtiff
		produce freetype6
		produce bullet3
		produce terminology
		# mass_produce
		;;
esac
#}}}


#	git clone git://anongit.freedesktop.org/fontconfig
#	a_c_m_mi && \

## libsdl2-dev {{{
#	hg clone http://hg.libsdl.org/SDL
#	c_m_mi && \

## libluajit-5.1-dev {{{
## }}}


# vim: foldmethod=marker:foldlevel=0
