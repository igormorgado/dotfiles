" vim: filetype=vifm:fold=marker :

if executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
elseif executable('vi')
    set vicmd=vi
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" What should be saved automatically on restarting vifm.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=bookmarks,chistory,commands,cs,dirstack,dhistory,fhistory,phistory,
            \shistory,filetypes,options,registers,savedirs,state,tui


" This is size of all of the many kinds of histories, in particular it's the
" number of last visited directories (not necessarily distinct ones) stored in
" the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set followlinks

set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
"set timefmt="%a %F %T" 

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Select search matches automatically
set hlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs,sshfs
endif

" Enable preview of files in the right miller column (add `set millerview` to
" turn it on)
set milleroptions+=rpreview:all


" Set custom status line look
" %t filename
" %T symbolic link reference
" %A file permissions
" %u file owner
" %g file group
" %s file size
" %E file size of all selected files
" %d file mtime
" %z hints
" %= space fill
" %[ %]  []
" %E 
if !has('win')
    set statusline="NW  %t%[ -> %T%]%= [%A %u:%g %E %d]"
else
    set statusline="WI  %t%= [%A %u:%g %E %d]"
endif


"set dotdirs=rootparent
"set relativenumber
set numberwidth=3
set title
set fusehome=~/tmp/fuse


" ----------------------------------------------------------------------
" Standard programs
" ----------------------------------------------------------------------

if executable('ag')
    set grepprg="ag --line-numbers %i %a %s"
else
    set grepprg="grep -n -H -I -r -s %i %a %s"
endif

" TODO: Use fd instead find.
if system("find --version | grep -c 'GNU findutils'") != 0
    set findprg='find %s %a -print , -type d \( ! -readable -o ! -executable \) -prune'
endif


" ----------------------------------------------------------------------
" Bookmarks {{{
" ----------------------------------------------------------------------

mark h ~/
mark t ~/.vifm/Trash

" }}}

" ----------------------------------------------------------------------
" Commands {{{
" ----------------------------------------------------------------------

" }}}

" ----------------------------------------------------------------------
" Mappings {{{
" ----------------------------------------------------------------------

" }}}

" " TMUX integration
" nnoremap <silent> <c-h> :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
" nnoremap <silent> <c-j> :if paneisat('bottom') | execute '!tmux select-pane -D %i' | else | execute 'wincmd j' | endif<cr>
" nnoremap <silent> <c-k> :if paneisat('top')    | execute '!tmux select-pane -U %i' | else | execute 'wincmd k' | endif<cr>
" nnoremap <silent> <c-l> :if paneisat('right')  | execute '!tmux select-pane -R %i' | else | execute 'wincmd l' | endif<cr>
" " account for <c-h>/<bs> conflict
" nnoremap <silent> <bs>  :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>



" Like MC
nmap <space> tj
nmap <f3> :!less %f<cr>
nmap <f4> :edit<cr>
nmap <f5> :copy<cr>
nmap <f6> :move<cr>
nmap <f7> :mkdir<space>""<left>
nmap <f8> :delete<cr>

nmap cd :cd<space>

nnoremap zo :sync %c<CR><Tab>
nmap ][ :compare<cr>

" Open file in the background using its default program
nmap gb :file &<cr>l

" Yank current directory path into the clipboard
" archpkg: xclip
nmap yd :!echo %d | xclip %i<cr>

" Yank current file path into the clipboard
nmap yf :!echo %c:p | xclip %i<cr>

" Opening vim to edit .vifmrc
nmap \c :execute ':!vim $MYVIFMRC' | restart<cr>
 
" Toggle wrap setting on ,w key
nmap \w :set wrap!<cr>
 
" External commands
nmap ! :!
nmap @ :!<space>%f<left><left><left>
 
 
" Resize
nmap < <c-w><
nmap > <c-w>>

nnoremap <silent> w : if &quickview && !layoutis('only')
                   \|     view
                   \| else
                   \|     if layoutis('only')
                   \|         if &lines + 50 < &columns | vsplit | else | split | endif
                   \|     endif
                   \|     view!
                   \|     execute 'qnoremap w q:view|only|qunmap w<lt>cr>'
                   \|     execute 'wincmd w'
                   \| endif
                   \| <cr>

colorscheme darktrial


" :com[mand] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

"command df df -h %m 2> /dev/null
"command diff vim -d %f %F
"command run !! ./%f
"command make !!make
"command vgrep vim "+grep %a"

" command! extract extract %a %f %n
" command! extract! extract -f %a %f %n


" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.

" Pdf, PostScript & Djvu
" archpkg: zathura evince poppler
filextype *.pdf,*.ps,*.djvu
  \ zathura %f %i &,
  \ open %f &,
  \ evince %f &,
fileview *.pdf
  \ pdftotext -nopgbrk %c -

" Audio
" archpkg: mpv mediainfo
filetype *.wav,*.mp3,*.flac,*.ogg,*.oga,*.m4a,*.wma,*.aac,*.3gp,*.opus,*.wv
  \ mpv %f,
fileview *.wav,*.mp3,*.flac,*.ogg,*.oga,*.m4a,*.wma,*.aac,*.3gp,*.opus,*.wv
  \ mediainfo
 
" Video
filextype *.avi,*.mp4,*.wmv,*.dat,*.ogv,*.mkv,*.mpg,*.vob,*.flv,*.webm,*.mts,*.m2ts,*.rm,*.mov
  \ mpv %f %i &,
fileview *.avi,*.mp4,*.wmv,*.dat,*.ogv,*.mkv,*.mpg,*.vob,*.flv,*.webm,*.mts,*.m2ts,*.rm,*.mov
  \ mediainfo
 
" Midi
" archpkg: timidity++
filetype *.mid,*.midi
  \ timidity %f,
fileview *.mid,*.midi
  \ mediainfo

" Web
" archpkg: firefox elinks
filetype *.html,*.htm
  \ firefox %f %i &,
fileview *.html,*.htm
  \ elinks --dump

" Object
" archpkg: binutils
filetype *.o
  \ {List Symbols} nm %f | less

" Image
" archpkg: eog imagemagick
filextype *.gif
  \ {Loop} mpv --loop=inf %f %i &,

filextype *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.svg,*.ico
  \ open %f &,
  \ eog %f &,
fileview *.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.svg,*.ico
  \ identify %f

" MD5
" archpkg: coreutils
filetype *.md5
  \ {Check MD5 hash sum} md5sum -c %f,

" ##################################################################
" FUSE MOUNTS
" ##################################################################

" archpkg: fuse-zip
filetype *.zip,*.jar,*.war,*.ear,*.oxt
       \ {Mount with fuse-zip}
       \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,

" IsoMount
" archpkg: fuseiso
filetype *.iso
  \ {Mount with fuseiso}
  \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,

" SshMount
" archpkg: sshfs
filetype *.ssh
  \ {Mount with sshfs}
  \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR,

" FtpMount
" archpkg: curlftpfs
filetype *.ftp
  \ {Mount with curlftpfs}
  \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR,
 
" Office files
" archpkg: libreoffice docx2txt
filetype *.doc,*.docx,*.xls,*.xlsx
  \ libreoffice %f &
fileview *.docx
  \ docx2txt.pl %f -
 
" Torrents
" archpkg: transmission-gtk
fileview *.torrent
  \ transmission %f

" Open all other files with default system programs
" archpkg: xdg-utils highlight
filetype * xdg-open %i &
" All other files get free syntax highlighting
fileview *
  \ highlight --out-format=ansi --force -qWJ %pw -t 2 %c


" " Archive
" filetype *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,*.tar.Z,*.tZ,*.tar.lzo,*.tzo
"   \,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,*.tar,*.zip,*.jar,*.war,*.rar
"   \,*.lha,*.lzh,*.7z,*.alz,*.ace,*.a,*.arj,*.arc,*.rpm,*.deb,*.cab,*.gz,*.bz,*.bz2
"   \,*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,*.cpio
"   \ {View contents} als %f | less,
"   \ {Extract here} aunpack %f,
 
" fileview *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,*.tar.Z,*.tZ,*.tar.lzo,*.tzo
"   \,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,*.tar,*.zip,*.jar,*.war,*.rar
"   \,*.lha,*.lzh,*.7z,*.alz,*.ace,*.a,*.arj,*.arc,*.rpm,*.deb,*.cab,*.gz,*.bz,*.bz2
"   \,*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,*.cpio
"   \ als %f
" 

