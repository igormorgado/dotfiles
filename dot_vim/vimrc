" VIM CONFIGURATION FILE
" vim: set ft=vim
"
" TODO / Check or learn {{{
" --  Master arglist
" --  Master vim grep
" --  Spelling and +kspell in complete
" --  If exists only works after vim is fully loaded. Since plugins just
" --  Omnifunc/Omnicomplete
"       load in the en.Find a way to use something like that.
" -- Add files with wildcards to arglist
" -- Change working directory
" -- Delete all other buffers
" -- Fast Buffers access
" -- Find current word
" }}}

" Initial settings {{{
if v:version < 600 | finish | endif

" DEBUG (when necessary)
"set verbose=4
"set verbosefile=~/tmp/vim_debug.log

if $VIM_BARE
    set noloadplugins
    finish
endif

" Every vimrc file should set vim to nocompatible mode
" Let's move to 80s. The future is now!
if has('vim_starting')
    set nocompatible
endif

" Disable netrw
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1

" Filetype handling
" Enables filetype handling
filetype on
" Loads the filetype indentation at $VIMRUNTIME/indent
" Loads the file im $VIMRUNTIME/ftplugin/filetype.vim
filetype plugin indent on

runtime macros/matchit.vim
"}}}

" Plug-in load {{{
" To install plugins call
" :PlugInstall
call plug#begin('~/.vim/plugged')
    " Commentary operator management
    Plug 'tpope/vim-commentary'
    " Tags and surroundings
    Plug 'tpope/vim-surround'
    " ga over a char for info
    Plug 'tpope/vim-characterize'
    " Suggar for Shell commands
    Plug 'tpope/vim-eunuch'
    " Git Integration
    Plug 'tpope/vim-fugitive'
    " Repeat commands
    Plug 'tpope/vim-repeat'
    " Complementary pairs
    Plug 'tpope/vim-unimpaired'
    " Alternative to netrw
    Plug 'justinmk/vim-dirvish'
    " Shows Git information in dirvish buffer
    Plug 'kristijanhusak/vim-dirvish-git'
    " Quickfix enhancements
    Plug 'romainl/vim-qf'
    " Auto disable hlsearch
    Plug 'romainl/vim-cool'
    " Align by character
    Plug 'tommcdo/vim-lion'
    " Navigate between tmux and vim windows
    Plug 'christoomey/vim-tmux-navigator'
    " Navigate in kitty using vim window hotkeys
    Plug 'knubie/vim-kitty-navigator'
    " Use any repl with vim.
    Plug 'jpalardy/vim-slime'
    " Shows Git information in sign column
    Plug 'airblade/vim-gitgutter'
    " Shows mark information in sign column
    Plug 'kshenoy/vim-signature'
    " Colorize current word occurrence
    Plug 'RRethy/vim-illuminate'
    " Integrate Valgrind Debugger
    Plug 'igormorgado/valgrind.vim'
    " My own documentation
    Plug 'igormorgado/vim-hints'

    "
    " FILE FORMATS
    "
    " Meson
    Plug 'igankevich/mesonic'
    " Solidity
    Plug 'tomlion/vim-solidity'
    " Fish
    Plug 'dag/vim-fish'
    " Vue
    Plug 'posva/vim-vue'
    " Xonsh
    Plug 'linkinpark342/xonsh-vim'
    " Markdown
    Plug 'tpope/vim-markdown'
    " XML Support
    Plug 'chrisbra/vim-xml-runtime'
    " Javascript
    Plug 'pangloss/vim-javascript'
    " Typescript
    Plug 'leafgarland/typescript-vim'
    " JSX
    Plug 'maxmellon/vim-jsx-pretty'
    " JSX - Typescript
    Plug 'peitalin/vim-jsx-typescript' 
    " GraphQL
    Plug 'jparise/vim-graphql'

    " Code completion
    Plug 'neoclide/coc.nvim', {'branch': 'release'}


    " AUTOCOMPLETE WARS (TO READ)
    " https://programmersought.com/article/11541994259/
    " https://www.thegeekstuff.com/2009/04/ctags-taglist-vi-vim-editor-as-sourece-code-browser/
    " https://stackoverflow.com/questions/934233/cscope-or-ctags-why-choose-one-over-the-other
    " Auto Autocomplete Popup when able
    " Plug 'vim-scripts/AutoComplPop'
    " Autocomplete
    " Plug 'ackyshake/VimCompletesMe'
    " Coding snippets - need more stuff
    " Plug 'garbas/vim-snipmate'
    " Autocomplete using clang information
    " Plug 'xavierd/clang_complete'
    " CLANG another CLAN autocomplete
    " Plug 'justmao945/vim-clang'
    " Automatic management to ctags
    " Plug 'ludovicchabant/vim-gutentags'
    " Plug 'LucHermitte/lh-tags'
    " Automatic tags management
    " Plug 'xolox/vim-easytags'
    " Automatic management to callgraph - Need cscope
    " Plug 'skywind3000/gutentags_plus'
    " Use binary call graph in Vim - Need ccglue
    " Plug 'hari-rangarajan/CCTree'
    "
    " PYTHON
    "
    " Pylint, flake8, jedi, pep8, black, pyflakes, mypy
    " how all thos fit together?
    "
    " Python Folding
    Plug 'tmhedberg/SimpylFold'
    " Python Auto completion
    " Plug 'davidhalter/jedi-vim'
    " Python Identation
    " Plug 'Vimjas/vim-python-pep8-indent'
    " Python Linting
    " Plug 'ambv/black'
    " Python Static Checker
    " Plug 'nvie/vim-flake8'
    "
call plug#end()
" }}} 

" Auto groups {{{
" correctly identify some files
augroup filetypes
    autocmd!
    autocmd BufNewFile,BufRead *.xhtml setlocal ft=html
    autocmd BufNewFile,BufRead *.mako,*.mak,*.jinja2   setlocal ft=html
    autocmd BufNewFile,BufRead *.cu,*.cuh,*.h set filetype=c
augroup END

" When editing a file, always jump to the last cursor position
augroup lastposition
    autocmd!
    autocmd BufReadPost *
    \ if line("'\"") > 0 && line ("'\"") <= line("$") |
    \   execute "normal! g'\"" |
    \ endif
augroup END

" This change display of numberings when entering/leaving insert mode
augroup numbering
    autocmd!
    autocmd InsertLeave * :setlocal relativenumber
    autocmd InsertEnter * :setlocal norelativenumber
augroup END

" Faster loads large files
augroup LargeFile
    let g:large_file = 10485760 " 10MB
    " Set options:
    "   eventignore+=FileType (no syntax highlighting etc
    "   assumes FileType always on)
    "   noswapfile (save copy of file)
    "   bufhidden=unload (save memory when other file is viewed)
    "   buftype=nowritefile (is read-only)
    "   undolevels=-1 (no undo possible)
    au BufReadPre *
            \ let f=expand("<afile>") |
            \ if getfsize(f) > g:large_file |
                    \ set eventignore+=FileType |
                    \ setlocal noswapfile bufhidden=unload buftype=nowrite undolevels=-1 |
            \ else |
                    \ set eventignore-=FileType |
            \ endif
augroup END
" }}}
"
" Vim special files {{{
" Backup remove for compliance with CoC
set nobackup
set backupdir=~/.tmp/vim,~/tmp/vim,/tmp/$USER/vim
set swapfile
set directory=~/.tmp/vim,~/tmp/vim,/tmp/$USER/vim
set undofile
set undodir=~/.tmp/vim,~/tmp/vim,/tmp/$USER/vim
set writebackup
set viminfo^=%
set tags=.tags;tags;$HOME
"}}}

" Buffer settings {{{

" More room for messages
set cmdheight=2

" Increase Interactivity for CoC
set updatetime=300
set colorcolumn=80
set conceallevel=0
set cursorcolumn
set cursorline
set encoding=utf-8
set fileformat=unix
set linebreak
set listchars=tab:→\ ,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨
set modeline
set noexpandtab
set nowrap
set scrolloff=4
set shiftround
set shiftwidth=4
set showbreak=↪\
set sidescroll=4
set softtabstop=4
set tabstop=4
set textwidth=80
set hlsearch
set incsearch
set ignorecase
set smartcase
" set termwinsize=15x0
" }}}

" Window display {{{
set foldcolumn=2
set ruler
set signcolumn=yes
set undolevels=1000
set virtualedit=block
set wildmenu
set wildmode=longest:full,full
set wildignore+=*.bak
set wildignore+=*.o,*~,*.pyc,*.obj
set wildignore+=tags,cscope.out,.tags,cctree.out
set wildignore+=*.exe,a.out
set wildignorecase
set splitbelow
set splitright
set showtabline=2
set numberwidth=5
set number
set relativenumber
set mouse=a

" }}}

" Programming minimum {{{
set autoindent
set backspace=indent,eol,start
set hidden
set completeopt=menuone,preview,longest
set shortmess=a

"  CoC: Don't pass |ins-completion-menu| msgs.
set shortmess+=c
" }}}

" Internal settings {{{
set path=.,,
set clipboard^=unnamedplus

" Map leader must be defined before all mappings
let mapleader=' '
let maplocalleader='\'
" }}}

" Status Line configuration {{{
set laststatus=2
if has("statusline")
    set statusline=
    set statusline+=\ %#FileName#
    set statusline+=\ %<%F
    set statusline+=\ %*
    set statusline+=(%{bufnr('%')}\ /\ %{bufnr('$')})
    set statusline+=%m
    set statusline+=\ %h
    set statusline+=%r
    set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}
"if exists("g:loaded_fugitive")
    set statusline+=\ %{FugitiveStatusline()}
" endif
" if exists("g:loaded_gutentags")
"    set statusline+=\ %{gutentags#statusline()}
" endif
    set statusline+=%=            " left/right separation point
    set statusline+=%{&fileencoding?&fileencoding:&encoding}
    set statusline+=\ \|\ %{strlen(&ft)?&ft:'none'}      " filetype
    set statusline+=\ \|\ %{&ff}  " fileformat
    set statusline+=\ (%04v,%04l)\  " (x,y)
endif
" }}}

" Color and gui settings {{{
if $TERM =~? 'linux'
    set t_Co=16
    set notermguicolors
elseif ($COLORTERM ==? 'truecolor' || $COLORTERM ==? '24bit' || has("gui") || $TERM =~? "256color")
    set termguicolors
endif

" Fix termcap on tmux
if $TERM == 'tmux-256color'
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
"
" Only set the interface when starting
if has("gui_running") && has('vim_starting')
    " Remove toolbar and menubar
    set guioptions-=T
    set guioptions-=m
    set lines=32 columns=110 linespace=0
    set mouse=a
    if has("gui_gtk3")
        set guifont=Fira\ Code\ weight\=453\ 12
    endif
endif
 
" Enable syntax
syntax on
set synmaxcol=200

colorscheme darktrial
" }}}

" Window navigation {{{
" Kitty navigation
" For system configuration check https://github.com/knubie/vim-kitty-navigator
if $TERM !~? "kitty" || has('gui_running')
    let g:kitty_navigator_no_mappings = 1
endif

" Tmux navigation
" Need additinal settings https://github.com/christoomey/vim-tmux-navigator
if empty($TMUX) || has('gui_running')
    let g:tmux_navigator_no_mappings = 1
else
    let g:tmux_navigator_save_on_switch = 1
    let g:tmux_navigator_disable_when_zoomed = 1
endif

" Window
nnoremap <silent> <Leader>= <C-w>=
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>> :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>< :exe "vertical resize " . (winwidth(0) * 2/3)<CR>


" Vim Terminal + Kitty/Tmux Navigator
tmap <S-Insert> <C-w>"+

if $TERM =~? "kitty"
    tnoremap <silent> <C-h> <C-w>:KittyNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:KittyNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:KittyNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:KittyNavigateRight<cr>
    vnoremap <silent> <C-h> <esc>:KittyNavigateLeft<cr>
    vnoremap <silent> <C-j> <esc>:KittyNavigateDown<cr>
    vnoremap <silent> <C-k> <esc>:KittyNavigateUp<cr>
    vnoremap <silent> <C-l> <esc>:KittyNavigateRight<cr>
    inoremap <silent> <C-h> <esc>:KittyNavigateLeft<cr>i
    inoremap <silent> <C-j> <esc>:KittyNavigateDown<cr>i
    inoremap <silent> <C-k> <esc>:KittyNavigateUp<cr>i
    inoremap <silent> <C-l> <esc>:KittyNavigateRight<cr>i
elseif !empty($TMUX)
    tnoremap <silent> <C-h> <C-w>:TmuxNavigateLeft<cr>
    tnoremap <silent> <C-j> <C-w>:TmuxNavigateDown<cr>
    tnoremap <silent> <C-k> <C-w>:TmuxNavigateUp<cr>
    tnoremap <silent> <C-l> <C-w>:TmuxNavigateRight<cr>
    vnoremap <silent> <C-h> <esc>:TmuxNavigateLeft<cr>
    vnoremap <silent> <C-j> <esc>:TmuxNavigateDown<cr>
    vnoremap <silent> <C-k> <esc>:TmuxNavigateUp<cr>
    vnoremap <silent> <C-l> <esc>:TmuxNavigateRight<cr>
    inoremap <silent> <C-h> <esc>:TmuxNavigateLeft<cr>i
    inoremap <silent> <C-j> <esc>:TmuxNavigateDown<cr>i
    inoremap <silent> <C-k> <esc>:TmuxNavigateUp<cr>i
    inoremap <silent> <C-l> <esc>:TmuxNavigateRight<cr>i
else
    nnoremap <silent> <C-h> <C-w><C-h>
    nnoremap <silent> <C-j> <C-w><C-j>
    nnoremap <silent> <C-k> <C-w><C-k>
    nnoremap <silent> <C-l> <C-w><C-l>
    tnoremap <silent> <C-h> <C-w><C-h>
    tnoremap <silent> <C-j> <C-w><C-j>
    tnoremap <silent> <C-k> <C-w><C-k>
    tnoremap <silent> <C-l> <C-w><C-l>
    " Substitute useless backspace
    inoremap <silent> <C-h> <ESC><C-w><C-h>i
    " Substitute useless ENTERR
    inoremap <silent> <C-j> <ESC><C-w><C-j>i
    " Substitute useless digraph
    inoremap <silent> <C-k> <ESC><C-w><C-k>i
    " Substitute useless go to normal mode
    inoremap <silent> <C-l> <ESC><C-w><C-l>i
endif
"

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" }}}

" Functions {{{

" Remove whitespaces
function! StripTrailingWhitespace()
  if !&binary && &filetype != 'diff'
    normal mz
    normal Hmy
    %s/\s\+$//e
    normal 'yz<CR>
    normal `z
  endif
endfunction

" Open url in browser
function! Browser ()
    let line = getline (".")
    let line = matchstr (line, "http[^   ]*")
    exec "!firefox ".line
endfunction

function! Rinkeby ()
    let line = getline (".")
    let line = matchstr (line, "0x[^   ]*")
    if len(line) > 43
        echom "Opening transaction " . line
        " Silent skips the boring Press ENTER message but need a redraw
        exec "silent !firefox https://rinkeby.etherscan.io/tx/".line
        redraw!
    else
        echom "Opening address " . line
        " Silent skips the boring Press ENTER message but need a redraw
        exec "silent !firefox https://rinkeby.etherscan.io/address/".line
        redraw!
    endif
endfunction

" Show highlight group
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
" }}}

" Togglee quickfix window {{{
function! ToggleQuickFix()
    if empty(filter(getwininfo(), 'v:val.quickfix'))
        copen
    else
        cclose
    endif
endfunction
" }}}
"
" Toggle location list window {{{
function! ToggleLocationList()
    if empty(filter(getwininfo(), 'v:val.loclist'))
        lopen
    else
        lclose
    endif
endfunction
" }}}
" Fugitive {{{
let g:fugitive_dynamic_colors = 1
" }}}

" Illuminate {{{
let g:Illuminate_ftblacklist = ['dirvish', 'json', 'dircolors']
let g:Illuminate_highlightUnderCursor = 1
let g:Illuminate_delay = 2
" }}}

" Markdown editing and vieweing
let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'c', 'help']
"
if &shell =~# 'fish$'
    set shell=/bin/bash
endif
" 
if &shell =~? 'xonsh'
    if executable('$HOME/.local/share/xonsh-vim-read/xonsh-vim-read')
        set shell=$HOME/.local/share/xonsh-vim-read/xonsh-vim-read
    endif
endif

if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor\ --ignore-case\ --column
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" Python Jedi
let g:jedi#use_splits_not_buffers = "top"

" Mappings to remember {{{

" Some mapping to remember
" GitGutter
" GitGutter shows marks on VimGutter regarding status
" GitGutterSignsToggle
" GitGutterLineHighlightsToggle
" GitGutterQuickFix
" <Leader>hs stage hunk
" <Leader>hu undo stage
" {RANGE}GitGutterStageHunk
" more @ https://github.com/airblade/vim-gitgutter

" Vim terminal
" C-\ C-M  (enter terminal-normal)
" i  (enter terminal-insert mode)

" vim-unimpaired
" Files     ]a [a
" Buffers   ]b [b
" Checklist ]q [q
" Moveline  ]e [e

" Vim Sign column
" m,        place next mark
" ]` [`     Next/Prev mark
" `] `[     Next/Prev mark alphabetically

" Gutentags
" <leader>cs    Find symbol (reference) under cursor
" <leader>cg    Find symbol definition under cursor
" <leader>cd    Functions called by this function
" <leader>cc    Functions calling this function
" <leader>ct    Find text string under cursor
" <leader>ce    Find egrep pattern under cursor
" <leader>cf    Find file name under cursor
" <leader>ci    Find files #including the file name under cursor
" <leader>ca    Find places where current symbol is assigned
" <leader>cz    Find current word in ctags database
"
" Function keys
" ======================================================================
" Standard functions keys in APPS
" <F1> Help
" <F2> Toggle Paste
" <F3> Show Buffers
" <F4> Quickfix
" <F5> Build/Execute/Refresh
" <F6>
" <F7> Spellcheck
" <F8>
" <F9>
" <F10>
" <F11>
" <F12>
" }}}

" Display highlight groups
nmap <C-S-P> :call <SID>SynStack()<CR>

" Exit vim lazily
nnoremap <ESC><ESC><ESC> :q<CR>
nnoremap <ESC><ESC><ESC> :q<CR>

" Lazy to reach esc < makes vim laggy>
"inoremap jkjkjkjk <ESC>:q<CR>
" nnoremap jkjkjk <ESC>:q<CR>

" Display buffers (maybe stay with <Leader>b
nnoremap <F3>      :buffers<CR>:buffer<Space>
inoremap <F3> <ESC>:buffers<CR>:buffer<Space>
tnoremap <F3> <ESC><C-w>:buffers<CR>:buffer<Space>

" Quickfix toggle
nnoremap <silent> <F4> :call ToggleQuickFix()<cr>
tnoremap <silent> <F4> <ESC><C-W>:call ToggleQuickFix()<cr>
inoremap <F4> <Nop>
vnoremap <F4> <Nop>

" Run make (maybe stay with <Leader>m
inoremap <F5> <ESC>:make!<cr>
nnoremap <F5> :make!<cr>
vnoremap <F5> :make!<cr>
nnoremap <S-F5> <Nop>
inoremap <F6> <Nop>
nnoremap <F6> <Nop>
inoremap <F7> <ESC>:SpellCheck<CR>
nnoremap <F7> :SpellCheck<CR>
inoremap <F8> <Nop>
nnoremap <F8> <Nop>
vnoremap <F8> <Nop>
inoremap <F9> <Nop>
nnoremap <F9> <Nop>
" Used by gnome to access menu
inoremap <F10> <Nop>
nnoremap <F10> <Nop>
vnoremap <F10> <Nop>
" Used by gnome to toggle fullscreen
inoremap <F11> <Nop>
nnoremap <F11> <Nop>
vnoremap <F11> <Nop>
vnoremap <F12> <Nop>
nnoremap <F12> :bnext<cr>
inoremap <F12> <esc>:bnext<cr>
tnoremap <F12> <esc><c-w>:bnext<cr>
nnoremap <S-F12> :bprev<cr>
inoremap <S-F12> <esc>:bprev<cr>
tnoremap <S-F12> <esc><c-w>:bprev<cr>


" Look for other files with same extension
"nnoremap <leader>a :argadd <c-r>=fnameescape(expand('%:p:h'))<cr>/*<C-d>

" Open buffer list
nnoremap <leader>b :b <C-d>

" Write all buffers and close all buffers except this  one
nnoremap <leader>ca :wa<bar>%bd<bar>e#<bar>bd#<CR>

" Command to delete all buffers except active one
command! BufOnly silent! execute "%bd|e#|bd#"

" Change vim PWD to actual buffer
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
"
" Command to change to active file directory
command CWD cd %:p:h

" Open edit command in wild menu recursively
nnoremap <leader>e :e **/

" Open ftplugin file in a new split
"nnoremap <leader>ef :execute 'vsplit $HOME/.vim/ftplugin/' . &filetype .  '.vim'<CR>

" Open vimrc in a new split
"nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Shortcut for grep
nnoremap <leader>g :grep<space>

" Grep for current word 
nnoremap gR :grep '\b<cword>\b' *<CR>

" Grep for current word only in same type
"innoremap GR :grep '\b<cword>\b' %:p:h/*<CR>

" Grep for current word as substring
nnoremap gr :grep <cword> *<CR>
" Grep for current word as substring only in same type
"nnoremap Gr :grep <cword> %:p:h/*<CR>


"nnoremap <leader>i :Ilist<space>
nnoremap <leader>j :tjump /
nnoremap <leader>l :setlocal list!<cr>

" Run make
nnoremap <leader>m :make<cr>
" nnoremap <leader>q :b#<cr>

" Call strip white spaces
nnoremap <leader>s :call StripTrailingWhitespace()<cr>

" Toggle fold
nnoremap <leader><space> za

" Open word url on Browser
map <leader>w :call Browser()<cr>
map <leader>er :call Rinkeby()<cr>

" Toggle paste mode
set pastetoggle=<F2>

" Alias to w
command! W :w

" Force write with sudo
cnoremap w!! w !sudo tee % >/dev/null
cnoremap W!  w !sudo tee % >/dev/null

"
" PLUGIN DEPENDANTSz
"

" Git gutter 

" Move beetwen hunks (kind of impaired)
nmap ]h <Plug>(GitGutterNextHunk)
nmap [h <Plug>(GitGutterPrevHunk)

" TTags
" Open ttags on current word
"nnoremap <leader>t :TTags<space>*<space>*<space>.<cr>

" Slime configuration {{{
let g:slime_target='vimterminal'
let g:slime_vimterminal_config={"term_finish": "close"}
let g:slime_no_mappings=1
" }}}

" Quickfix {{{
nmap <buffer> <Left>  <Plug>(qf_older)
nmap <buffer> <Right> <Plug>(qf_newer)
nmap <buffer> { <Plug>(qf_previous_file)
nmap <buffer> } <Plug>(qf_next_file)
let g:qf_mapping_ack_style = 1
" }}}

" COC {{{

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif


" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [k <Plug>(coc-diagnostic-prev)
nmap <silent> ]k <Plug>(coc-diagnostic-next)

" GoTo code navigation. CANNOT USE ANY OF THE NAVIGATION KEYS in firs key
nmap <silent> td <Plug>(coc-definition)
nmap <silent> ty <Plug>(coc-type-definition)
nmap <silent> ti <Plug>(coc-implementation)
nmap <silent> tr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup cocsettings
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
" nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" " Manage extensions.
" nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" " Show commands.
" nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" " Find symbol of current document.
" nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" " Search workspace symbols.
" nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" " Do default action for next item.
" nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" " Do default action for previous item.
" nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" " Resume latest coc list.
" nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" }}}

" Programming config {{{
" Autocomplete
"inoremap <expr> <Tab>   pumvisible() ? "<C-n>" : "<Tab>"
"inoremap <expr> <S-Tab> pumvisible() ? "<C-p>" : "<S-Tab>"
"inoremap <expr> <Cr>   pumvisible() ? "<C-y>" : "<Cr>"
"inoremap <expr> <Up>    pumvisible() ? "<C-p>"  : ""
"inoremap <expr> <Down>  pumvisible() ? "<C-n>"  : ""
"inoremap <expr> <Left> pumvisible() ? "<C-e>" : ""
"inoremap <expr> <Right> pumvisible() ? "<C-y>" : ""

" C == omnicomplete when "." found
" let g:AutoComplPop_Behavior = {
" \ 'c': [ {'command' : "\<C-x>\<C-o>",
" \       'pattern' : ".",
" \       'repeat' : 0}
" \      ]
" \}

" CLANG justmao
" let g:clang_library_path='/usr/lib/llvm-11/lib'
" let g:clang_complete_copen=1
" let g:clang_hl_errors=1
" let g:clang_auto_select=1
" let g:clang_close_preview=1
" let g:clang_snippets=1
" let g:clang_snippets_engine='clang_complete'

" let g:clang_c_options = '-std=c11'
" let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
" let g:clang_c_completeopt = 'menuone,preview'
" let g:clang_load_if_clang_dotfile = 1
" let g:clang_verbose_pmenu = 1
" let g:clang_check_syntax_auto = 1
" let g:clang_pwheight = 6
" let g:clang_statusline = '%s\ \|\ %%l/\%%L\ \|\ %%p%%%%'

" C Tags management
" let g:gutentags_define_advanced_commands = 1
" let g:gutentags_modules = ['ctags', 'gtags_cscope']
" let g:gutentags_ctags_exclude = ['*.css', '*.html', '*.js']
" let g:gutentags_cache_dir='~/.tmp/vim/gutentags'
" let g:gutentags_project_root=[ 'meson.build', 'Makefile', 'setup.py', 'Makefile.am', 'CMake', '.root', '.git' ]
" let g:gutentags_plus_switch = 1
" let g:CCTreeKeyHilightTree = '<C-t>'
" let g:CCTreeCscopeDb = "cscope.out"
" let g:CCTreeMinVisibleDepth = 3
" let g:CCTreeOrientation = "topleft"
" let g:CCTreeWindowVertical = 1
" let g:CCTreeDisplayMode = 2
" let g:CCTreeHilightCallTree = 1
" let g:tagbar_left = 1
" let g:tagbar_width = 30
" let g:tagbar_autopreview = 1
" }}} 


" Cleaning corpus
function! TogglePosition()
    if line(".") == line("$")
        call cursor(1,1)
    else
        call cursor(line("$"), 1)
    endif
endfunction

command! Usp 1,/voluntario@futuro\.usp\.br/d <bar> g/\%uc/d
command! Usp2 1,/como isso é possível./d <bar> g/\%uc/d
command! Npi 1,6d <bar> $-1,$d
command! Unama 1,/\%uc/d <bar> g/[[:cntrl:]]/-1,.d
command! Cultura 1,8d <bar> g/\%uc/d
command! Paginas g/^\s*\d\{1,3}\s*$/d
command! CarrLin g/\%uc/d
command! MultiLinha %s/\s\+$//e <bar> %s/\%ua0//e <bar>%s/\n\{3,}/\r\r\r/

nnoremap <f13> :call Usp<cr>
nnoremap <f14> :call Usp2<cr>
nnoremap <f15> :call Npi<cr>
nnoremap <f16> :call Unama<cr>

inoremap <F9> <esc>:call TogglePosition()<cr>
nnoremap <F9> :call TogglePosition()<cr>
vnoremap <F9> <esc>:call TogglePosition()<cr>
""" }}}

