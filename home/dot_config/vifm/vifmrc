" vim: filetype=vim:foldmethod=marker :


" Standard programs {{{
" ----------------------------------------------------------------------

if executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
elseif executable('vi')
    set vicmd=vi
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif

if executable('ag')
    set grepprg="ag --line-numbers %i %a %s"
else
    set grepprg="grep -n -H -I -r -s %i %a %s"
endif

" TODO: Use fd instead find.
if system("find --version | grep -c 'GNU findutils'") != 0
    set findprg='find %s %a -print , -type d \( ! -readable -o ! -executable \) -prune'
endif

" }}}


" Options {{{
" ----------------------------------------------------------------------

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" What should be saved automatically on restarting vifm.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=bookmarks,chistory,commands,cs,dirstack,dhistory,fhistory,phistory,
            \shistory,filetypes,options,registers,savedirs,state,tui

" This is size of all of the many kinds of histories, in particular it's the
" number of last visited directories (not necessarily distinct ones) stored in
" the directory history.
set history=100

" Automatically resolve symbolic links on l or Enter.
set followlinks

set fastrun

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
"set timefmt="%a %F %T" 

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Select search matches automatically
set hlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
if !has('win')
    set slowfs=curlftpfs,sshfs
endif

" Enable preview of files in the right miller column (add `set millerview` to
" turn it on)
set milleroptions+=rpreview:all

" Set custom status line look
" %t filename
" %T symbolic link reference
" %A file permissions
" %u file owner
" %g file group
" %s file size
" %E file size of all selected files
" %d file mtime
" %z hints
" %= space fill
" %[ %]  []
" %E 
if !has('win')
    set statusline="  %t%[ -> %T%]%= [%A %u:%g %E %d]"
else
    set statusline="  %t%= [%A %u:%g %E %d]"
endif

" Customize view columns a bit (enable ellipsis for truncated file names)
set viewcolumns=*{name}..,16{mtime},7{}.

" Show vertical border
" set fillchars=vborder:│

" Diplay number lines in vifm panes
"set number
"set relativenumber
"set numberwidth=3

" Display filename in title
set title

" Show dotfiles by default
set dotfiles

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" Set the directory to mount fuse filesystems
set fusehome=~/tmp/fuse

" Add additional place to look for executables
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" Activate screen/tmux support
" screen!

colorscheme darktrial

" }}}


" Bookmarks {{{
" ----------------------------------------------------------------------

mark h ~/
mark t ~/.vifm/Trash

" }}}


" Commands {{{
" ----------------------------------------------------------------------

" :com[mand] command_name action
"
" These are some of the macros that can be used in the action part:
" 
"  %a is replaced with the user arguments.
"  %c the current file under the cursor.
"  %C the current file under the cursor in the other directory.
"  %f the current selected file, or files.
"  %F the current selected file, or files in the other directory.
"  %b same as %f %F.
"  %d the current directory name.
"  %D the other window directory name.
"  %r{x} for list of files in register {x}
"  %m run the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart full
command! vgrep vim "+grep %a"
command! ln ln -s %f:p %D

" command! zip zip -r %c.zip %f
" extract command is at ~/.config/vifm/scripts 
" command! extract extract %a %f %n
" command! extract! extract -f %a %f %n

" archpkg: fzf
" command! FZFfind : set noquickview
"                 \| let $FZF_PICK = term('find | fzf --height 10 2>/dev/tty')
"                 \| if $FZF_PICK != ''
"                 \|     execute 'goto' fnameescape($FZF_PICK)
"                 \| endif
" 
" " variation that automatically enters directories
" command! FZFlocate : set noquickview
"                   \| let $FZF_PICK = term('locate $HOME | fzf --height 10 2>/dev/tty')
"                   \| if $FZF_PICK != ''
"                   \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
"                   \| endif

" }}}


" Mappings {{{
" ----------------------------------------------------------------------

" Nice mappings to remember
" ga/gA Show selected dir sizes
" za show/hide hidden files
" al put symbolic links with absolute paths
" rl put symbolic links with relative paths

" Block particular shortcut
" nnoremap <left> <nop>

nnoremap ln :ln<cr>

" TMUX integration
nnoremap <silent> <c-h> :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>
nnoremap <silent> <c-j> :if paneisat('bottom') | execute '!tmux select-pane -D %i' | else | execute 'wincmd j' | endif<cr>
nnoremap <silent> <c-k> :if paneisat('top')    | execute '!tmux select-pane -U %i' | else | execute 'wincmd k' | endif<cr>
nnoremap <silent> <c-l> :if paneisat('right')  | execute '!tmux select-pane -R %i' | else | execute 'wincmd l' | endif<cr>
" account for <c-h>/<bs> conflict
nnoremap <silent> <bs>  :if paneisat('left')   | execute '!tmux select-pane -L %i' | else | execute 'wincmd h' | endif<cr>

" Like MC
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>""<left>
nnoremap <f8> :delete<cr>
" Open current directory in the other pane
nnoremap <a-i> :sync<cr><tab>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr><tab>
" Swap panes
nnoremap <c-u> <c-w>x

nnoremap <space> tj

" FZF
" nnoremap <c-g> :FZFlocate<cr>
" nnoremap <c-f> :FZFfind<cr>

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Fast CD
nnoremap cd :cd<space>

" Open actual dir into other pane
nnoremap zo :sync %c<CR><Tab>

" Compare dirs selected in both panes
nnoremap ][ :compare<cr>

" Open file in the background using its default program
nnoremap gb :file &<cr>l
" MacOS version
" nnoremap gb :!open -g %f<cr>

"" yank current directory path into the clipboard
nnoremap yd :!echo -n %d | xclip -selection clipboard %i<cr>:echo expand('%"d') "is yanked to clipboard"<cr>

" yank current file path into the clipboard
nnoremap yf :!echo -n %c:p | xclip -selection clipboard %i<cr>:echo expand('%"c:p') "is yanked to clipboard"<cr>

" yank current filename without path into the clipboard
nnoremap yn :!echo -n %c | xclip -selection clipboard %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr>

" yank root of current file's name into the clipboard
nnoremap yr :!echo -n %c:r | xclip -selection clipboard %i<cr>:echo expand('%"c:r') "is yanked to clipboard"<cr>

" " yank current directory path into the clipboard
" nnoremap yd :!echo -n %d | pbcopy %i<cr>:echo expand('%"d') "is yanked to clipboard"<cr>
" 
" " yank current file path into the clipboard
" nnoremap yf :!echo -n %c:p | pbcopy %i<cr>:echo expand('%"c:p') "is yanked to clipboard"<cr>
" 
" " yank current filename without path into the clipboard
" nnoremap yn :!echo -n %c | pbcopy %i<cr>:echo expand('%"c') "is yanked to clipboard"<cr>
" 
" " yank root of current file's name into the clipboard
" nnoremap yr :!echo -n %c:r | pbcopy %i<cr>:echo expand('%"c:r') "is yanked to clipboard"<cr>

" External commands
nmap ! :!
nmap @ :!<space>%f<left><left><left>
 
" Resize
nmap < <c-w><
nmap > <c-w>>

" Mappings for faster renaming
" nnoremap I cw<c-a>
" nnoremap cc cw<c-u>
" nnoremap A cw

" As above, but without the file extension
" nnoremap I cW<c-a>
" nnoremap cc cW<c-u>
" nnoremap A cW

" Toggle wrap setting on ,w key
" nmap ,w :set wrap!<cr>

" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
 
nnoremap <silent> w : if &quickview && !layoutis('only')
                   \|     view
                   \| else
                   \|     if layoutis('only')
                   \|         if &lines + 50 < &columns | vsplit | else | split | endif
                   \|     endif
                   \|     view!
                   \|     execute 'qnoremap w q:view|only|qunmap w<lt>cr>'
                   \|     execute 'wincmd w'
                   \| endif
                   \| <cr>

" }}}


" Filetypes {{{
" ----------------------------------------------------------------------


" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer

" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app

" The file type is for the default programs to be used with a file extension.

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer

" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables

" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.

" A sample line might look like this:

"   :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR

" :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
"
" %PARAM and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
"
" %PARAM value is filled from the first line of file (whole line). Example:

"    root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.  There is also %FOREGROUND, which is useful for entering passwords.
"

" " PDFs
" " archpkg: zathura evince poppler
" filextype *.pdf,<application/pdf>
"   \ {zathura} zathura %f %i &,
"   \ {xdg} open %f &,
"   \ {evince} evince %f &,
" fileview *.pdf
"   \ pdftotext -nopgbrk %c -
" 
" " Postscript
" filextype *.ps,<application/postscript>
"   \ {zathura} zathura %f %i &,
"   \ {xdg} open %f &,
"   \ {evince} evince %f &,
" 
" " DJVU
" filextype *.djvu,<image/vnd.djvu>
"   \ {zathura} zathura %f %i &,
"   \ {xdg} open %f &,
"   \ {evince} evince %f &,
" 
" 
" " Audio
" " archpkg: mpv mediainfo ffmpeg
" filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
"          \*.aac,*.mpga},<audio/*>
"     \ {mpv} mpv %f,
" fileview {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
"          \*.aac,*.mpga},<audio/*>
"    \ mediainfo
" "  \ ffprobe -hide_banner -pretty %c 2>&1
"  
" " Video
" filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
"          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
"          \*.as[fx],*.unknown_video},
"          \<video/*>
"     \ {mpv} mpv %f %i &,
" fileview {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
"          \*.fl[icv],*.m2v,*.mov,*.webm,*.ts,*.mts,*.m4v,*.r[am],*.qt,*.divx,
"          \*.as[fx],*.unknown_video},
"          \<video/*>
"     \ mediainfo
" "   \ ffprobe -hide_banner -pretty %c 2>&1
"  
" " Midi
" " archpkg: timidity++
" filetype *.mid,*.midi
"   \ {timidity} timidity %f,
" fileview *.mid,*.midi
"   \ mediainfo
" 
" " Web
" " archpkg: firefox w3m
" filetype {*.xhtml,*.html,*.htm},<text/html> 
"   \ {Firefox} firefox %f %i &,
"   \ {vim} nvim
" fileviewer {*.xhtml,*.html,*.htm},<text/html>
"     \ w3m -dump -T text/html
" 
" " Object
" " archpkg: binutils
" filetype {*.o},<application/x-object> {List symbols} nm %f | less
" 
" " Man page
" filetype {*.[1-8]},<text/troff> {Manual} man ./%c
" fileviewer {*.[1-8]},<text/troff> man ./%c | col -b
" 
" " Image
" " archpkg: eog imagemagick
" filextype *.gif
"   \ {Loop} mpv --loop=inf %f %i &,
" 
" filextype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm,*.svg,*.ico},<image/*>
"   \ open %f &,
"   \ eog %f &,
" fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
"   \ identify %f
" 
" " MD5
" " archpkg: coreutils
" filetype *.md5
"        \ {Check MD5 hash sum}
"        \ md5sum -c %f %S,
" 
" " SHA1
" filetype *.sha1
"        \ {Check SHA1 hash sum}
"        \ shasum -c %f %S,
" 
" " SHA256
" filetype *.sha256
"        \ {Check SHA256 hash sum}
"        \ shasum -a 256 -c %f %S,
" 
" " SHA512
" filetype *.sha512
"        \ {Check SHA512 hash sum}
"        \ shasum -a 512 -c %f %S,
" 
" " archpkg: fuse-zip
" filetype *.zip,*.jar,*.war,*.ear,*.oxt
"        \ {Mount with fuse-zip}
"        \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
" 
" " IsoMount
" " archpkg: fuseiso
" filetype *.iso
"   \ {Mount with fuseiso}
"   \ FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR,
" 
" " SshMount
" " archpkg: sshfs
" filetype *.ssh
"   \ {Mount with sshfs}
"   \ FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR,
" 
" " FtpMount
" " archpkg: curlftpfs
filetype *.ftp
  \ {Mount with curlftpfs}
  \ FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %CLEAR,
"  
" " Office files
" " archpkg: libreoffice docx2txt
" filetype *.doc,*.docx,*.xls,*.xlsx
"   \ libreoffice %f &
" fileview *.docx
"   \ docx2txt.pl %f -
"  
" " Torrents
" " archpkg: transmission-gtk
" fileview *.torrent
"   \ transmission %f
" 
" fileview */ tree %c

" " Archive
" filetype *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,*.tar.Z,*.tZ,*.tar.lzo,*.tzo
"   \,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,*.tar,*.zip,*.jar,*.war,*.rar
"   \,*.lha,*.lzh,*.7z,*.alz,*.ace,*.a,*.arj,*.arc,*.rpm,*.deb,*.cab,*.gz,*.bz,*.bz2
"   \,*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,*.cpio
"   \ {View contents} als %f | less,
"   \ {Extract here} aunpack %f,
 
" fileview *.tar.gz,*.tgz,*.tar.bz,*.tbz,*.tar.bz2,*.tbz2,*.tar.Z,*.tZ,*.tar.lzo,*.tzo
"   \,*.tar.lz,*.tlz,*.tar.xz,*.txz,*.tar.7z,*.t7z,*.tar,*.zip,*.jar,*.war,*.rar
"   \,*.lha,*.lzh,*.7z,*.alz,*.ace,*.a,*.arj,*.arc,*.rpm,*.deb,*.cab,*.gz,*.bz,*.bz2
"   \,*.Z,*.lzma,*.lzo,*.lz,*.xz,*.rz,*.lrz,*.7z,*.cpio
"   \ als %f
" 

" " 256-color terminal
" fileview *.[ch],*.[ch]pp
"     \ highlight -O xterm256 -s dante --syntax c %c
" fileview Makefile,Makefile.* 
"     \ highlight -O xterm256 -s dante --syntax make %c
" 
" " Or leave it for automatic detection
" " archpkg: python-pygments
" fileview *[^/]
"     \ pygmentize -O style=monokai -f console256 -g


" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  Use of the line below results in ignoring 'vi[x]cmd' option for
" unknown file types on l/Enter keys.

" Open all other files with default system programs
" archpkg: xdg-utils highlight
filetype * 
    \ xdg-open %i &

" All other files get free syntax highlighting
fileview *
    \ highlight --out-format=ansi --force -qWJ %pw -t 2 %c


" }}}


" Icons {{{
" ----------------------------------------------------------------------

" file types
set classify=''

" Filetypes/directories
set classify+=' :dir:/'
"set classify+=' :exe:'
set classify+=' ::*.exe::'
set classify+=' :reg:'
set classify+=' :link:'
set classify+='? :?:'
set classify+=' ::../::'

" various file names
set classify+=' ::/^copying|license$/::, ::.git/,,*.git/::'
"set classify+=' ::license,,copyright,,copying,,LICENSE,,COPYRIGHT,,COPYING::'

" Web
"set classify+=' ::*.htm,,*.html,,**.[sx]html::'
set classify+=' ::*.ejs,,*.htm,,*.html,,*.slim,,**.[sx]html::'
set classify+=' ::*.xml::'
" ebooks
set classify+=' ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::'
"set classify+=' ::*.epub,,*.pdf,,*.fb2,,*.djvu::'

" Languages
set classify+=' ::*.sh,,*.fish,,*.bash,,*.zsh::'
set classify+=' ::*.[hc]pp::, ::*.[hc]::'
set classify+=' ::*.java,,*.jar::'

" Linux packages
set classify+=' ::*.7z,,*.apk,,*.bz2,,*.cab,,*.cpio,,*.deb,,*.gem,,*.gz,,*.gzip,,*.lh,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.tar,,*.tgz,,*.xz,,*.zip,,*.zst::'

" archives 
set classify+=' ::*.ace,,*.arj,,*.bz2,,*.cpio,,*.dz,,*.lzma,,*.rz,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.z,,*.zoo::'

" images
set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xmb;;*.xcf,,*.xpm,,*.xspf,,*.xwd,,*.cr2,,*.dng,,*.3fr,,*.ari,,*.arw,,*.bay,,*.crw,,*.cr3,,*.cap,,*.data,,*.dcs,,*.dcr,,*.drf,,*.eip,,*.erf,,*.fff,,*.gpr,,*.iiq,,*.k25,,*.kdc,,*.mdc,,*.mef,,*.mos,,*.mrw,,*.obm,,*.orf,,*.pef,,*.ptx,,*.pxn,,*.r3d,,*.raf,,*.raw,,*.rwl,,*.rw2,,*.rwz,,*.sr2,,*.srf,,*.srw,,*.tif,,*.x3f,,*.webp,,*.avif,,*.jxl::'
" audio
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
"set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'

" media
set classify+=' ::*.avi,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
"set classify+=' ::*.avi,,*.flv,,*.mkv,,*.mov,,*.mp4,,*.mpeg,,*.mpg,,*.webm,,*.av1::'

" office files
set classify+=' ::*.doc,,*.docx,,*.odt::'
set classify+=' ::*.xls,,*.xls[mx],,*.ods::'
set classify+=' ::*.pptx,,*.ppt,,*.odp::'

" Languages
set classify+=' ::*.ts::'
set classify+=' ::*.diff,,*.sum,,*.md5,,*.sha512::'
set classify+=' ::*.scala::'
set classify+=' ::*.xul::'
set classify+=' ::*.clj,,*.cljc::'
set classify+=' ::*.pl,,*.pm,,*.t::'
set classify+=' ::*.cljs,,*.edn::'
set classify+=' ::*.rb::'
set classify+=' ::*.dart::'
set classify+=' ::*.f#,,*.fs,,*.fsi,,*.fsscript,,*.fsx::'
set classify+=' ::*.rlib,,*.rs::'
set classify+=' ::*.d::'
set classify+=' ::*.erl,,*.hrl::'
set classify+=' ::*.ai::'
set classify+=' ::*.psb,,*.psd::'
set classify+=' ::*.cbr,,*.cbz::'
set classify+=' ::*.log::'
set classify+=' ::*.sln,,*.suo::'
set classify+=' ::*.db,,*.dump,,*.sql::'
set classify+=' ::*.go::'
set classify+=' ::*.jl::'
set classify+=' ::*.lua::'
set classify+=' ::*.hs,,*.lhs::'
set classify+=' ::*.c++,,*.cpp,,*.cxx,,*.h::'
set classify+=' ::*.cc,,*.c::'
set classify+=' ::*.twig::'
set classify+=' ::*.coffee::'
set classify+=' ::*.rss::'
" MEH: TODO (Igor): These icons are not ok.
set classify+=' ::*.css,,*.less,,*.bat,,*.conf,,*.ini,,*.rc,,*.yml,,*.cfg::'
set classify+=' ::*.mustasche::'
set classify+=' ::*.js::'
set classify+=' ::*.json::'
set classify+=' ::*.markdown,,*.md::'
set classify+=' ::*.php::'
set classify+=' ::*.py,,*.pyc,,*.pyd,,*.pyo::'
set classify+=' ::*.scss::'
set classify+=' ::*.styl::'
set classify+='λ ::*.ml,,*.mli::'


" Specific files
set classify+=' ::.Xdefaults,,.Xresources,,.bashprofile,,.bash_profile,,.bashrc,,.dmrc,,.d_store,,.fasd,,.gitconfig,,.gitignore,,.jack-settings,,.mime.types,,.nvidia-settings-rc,,.pam_environment,,.profile,,.recently-used,,.selected_editor,,.xinitpurc,,.zprofile,,.yarnc,,.snclirc,,.tmux.conf,,.urlview,,.config,,.ini,,.user-dirs.dirs,,.mimeapps.list,,.offlineimaprc,,.msmtprc,,.Xauthority,,config::'
set classify+=' ::dropbox::'
set classify+=' ::favicon.*,,README,,readme::'
set classify+=' ::.vim,,.vimrc,,.gvimrc,,.vifm::'
set classify+=' ::gruntfile.coffee,,gruntfile.js,,gruntfile.ls::'
set classify+=' ::gulpfile.coffee,,gulpfile.js,,gulpfile.ls::'
set classify+=' ::ledger::'
set classify+=' ::node_modules::'
set classify+=' ::react.jsx::'

""" }}}
